<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.0.4) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.6 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="17"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="swresults">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>1 -- all:</dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>2 -- firmware:</dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>3 -- kernel:</dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>4 -- privileged:</dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>5 -- system-libs:</dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>6 -- partial:</dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>1 -- verification-not-run:</dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>2 -- verification-indeterminite:</dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>3 -- verification-failed:</dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>4 -- fully-verified:</dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>5 -- partially-verified:</dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwvers",     260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "profile",    265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
swresults-label        = JC< "swresults" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "lI-IYNE6Rj4",
    "seclevel" : "secure-restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "secure-restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+S9aXPbWJYg+h2/AqGsiLS6SMqS5bUns0YpKbOUbVseS253
v3oVGRAJUiiTABsALbM82b99zn7PBUBZXf3m03NUVIoA7n7u2ZfxeJw0bVbO
fsuWVZm/Stt6kyfFuqa/mvbo8eOXj4+Sada+Spt2liSzalpmK/hwVmfzdlzk
7XxcZ20zzrN2vMzavGmT5G7xKn1/cn2VfqzqT0W5SH+pq806+S6dVmWTl82m
eZV+v82b7+FRs7lZFU1TVGW7XUO/F+fXPyfr4lWSpm011e/oxyxft7fw5Bh/
N1Xd1vm8CV8021X8YFqt1tm0dV9sbsKzssJH9Xyaz5p2u8z1s7Zo8cf1bZ6e
l/Bjm560uKyshTmm19WnvEwfnZ9c7yfZzU2df36Vwo8kq/MMJl+2eV3mbfLp
DvarWJS4+Mw1n95UNSx6Bhv1Kj16fPhkfPg4yTbtbVW/SsZpUcL0X0/S15ty
drPMZjnMkLf7dbap83KaR6+qGjb6Kp9uapwmzLiqt+nr16fwKl9lxfJVulws
/2cjH7T0fgI7oCP9MknfwNlvs5WN80tRF7PbrHYvaJT/tcmW0HKVXufT27Ja
Vosib2C90wnuK5xEDnv69Pnzp+mbqs5vq02Tp2d18RmnOYXBYZ5ZmZ4V+aLC
Xc8XsBuv0tNsWcyruiwyOq5N2dbw5YerE/i5viWA3PvjYfri6Yv02dPD9DmA
415Y3Iqn+D//oy0m/yHz88v7dZJefn9WldXidhN28te8zlfb+M3Dl3j0/GX6
c1aXcI7VZnGbvq+ymS3RvaD1zHBDPxwep89fX0ULLIs2n6X/AtAxq1ZhrX88
Pk4Pj54epU+ePTl88TKs9G/VjCbbX2pSVvUKYOtzjjfm/c+nR4eHL+XP54dP
7c+nh0/Dn8/kzxcvj+0DGDZ88Dz8aR+8ePxYmx0eWQ+Hz4/1zycvtYcXzw7t
2+fH2tmTly9CMxvtJSAY/BP/wX8+/nL14ph/t1m9wC3fu23bdfPq4CDP6vZ2
XJTzalIussmqWB6sb9cHs+quXMIxTODHn+bFMv9hWlX1bHy3aF4c73FXfKc/
Xr5/fZb+cn55dn59cZpe/fvV9fmb9PDli+NR+vaXk8nV9duzyePHT579djh5
PHn8G02GOtArin+PGVze0o3OlukvedWs4Ue2HOP9Xy6LBd3UE/zPNn0EPe9T
Q7v1x+PHz8ePXyTw9OLk7cnk9OP15HSZFasmXjkuHNZ9d3c3KbIym8C4B1mD
eGWVl21zML1r/fJOf7p8n37MbxRJQbf7KffrF5H6VeD4bnLzbNnkNq9fO/OK
JtbcN7O/ycx0ar9eXb71U/u1M7V4br3JdWd3fQu38Zd37yYXb84v+nuGU1sD
fciWkyeL9ZpmN8ubT221XlWzzTJvDq7W+bSYF1M6xM7Ps7yFW9dMsmb95U+N
f3Mx++H50Uu/50/qGQBAmdeM398BiMKP5rZYp+/q6m/5tP1nxifQwzKNhmGq
mJ4Cvkzf5u0d0MoUMBp8Xq8KAKzmn9O3m9VNXgOaGKXZbFbnsMNIUOCjYgb7
bF3tgtEnsEcx6L1Mcf9+vji7nJy8vzx/5deCT9MT6AW7ho6rOj1ZLqs7QFXv
gYLVxRSx1uWaFgvzOC8/F3XFJ56+Lpp28CDmxazK4FJkcCfoJHBHG3o8VtI0
rvP/2BSAlwl46FXm5zHOeB7wnc5jXOk8xrmbx3gJ8xh/Ppwcjeez8dFjWPLh
46PJbbta7tokpPS8dJml27G31eccjyDFnnDnzk/ejg+fDIMc3oZFc8iLRKYq
q2fNwU1WIyVoAH2V48166nec+QVFJCc1LHeZy6nD9GCwgw/vTlPtYtcKfrk6
7JwyTvW0uvp4cQaDjM8mxKc12XQ1nlbNXTHD93CQ5cXZaVWWAKUIhcOrgn0u
i9kEuBo5OX4AHVFD+G+djw9/exz2WBbH/acyAMM54FWgzdAEricDUV7DH1na
5G16OLTxLwhhDuGv+Wa5ZJL+dgLcxaditamz3jtgAn6qs9ky3/ZevZmkvwLd
bXovfpqkszx9k89ygKv+69MJMjltsYIVJUS1zl5fngzv3mJZ3WTLNXDGwOes
CDTu1rh3LUDrwWaNhKs5gCU+PTg8Ovjl3elvZ8WiAMz1Oge2sb6cn6zXdfU5
W/72GWnSejb3WyzfpvxxWs1T/XwYhg+fJnjy787f7kCaeRnwOfw4eJeX0ONS
0MxknS1yP/474PBgDGSU83pdF40B7yMYYx/Qxn9sSCJQioL877jNFk2EePAV
U69reAWtFnCJ6+3OSzZMDLXr8NfkC8Ek/EOmIeaTjg+PlAU5Pg5/Oo7o8MiY
mOPjZ8auPIEP8G+QbyYn9fQWWLlpC8y5u2gkEGXuHTb4qQDuZZZtQZrIpp+i
9esrFBXg3eC64WTuik/FOp8VvHb8daAtf+OWk0FSfn5+PnkBSPDw5H287fAi
vRJENUr36Ld8yGIF8PD55wJ4mQshN3m954Y4y6cKWY9fDnEuhgVhX3LG/vOi
BHkLYF7fHciIY+yEkQjygU9OJ8BYvQYR0E8ZHi0rIZ8n7y46BPUICOP5rDCK
yLP8NSs3GQhGAP4vdoLU3ROa3fX7g0UYYgxDHHxH3CQQZJDifisQ0OeZ0IgB
VAwS73IGCDYnbgdwH8qpxWZFCPfDxeSXDbyLl4RPlgXgoRRgNP0Adwju8fkX
QBAzILcgK8AdcgcAwueHi/1RelkvsrL4uxCP5Xboy0v6EvmFU5R7y20KCPnR
6cWZZ0hPNguQ9HF7ng9uz8AhKv6aZasDfDgO5C78dZffAG8+3fD1bDdAx4FH
Bjq4KQiPyY68rqpPm3UfMAULyFnTTpMwHq784GxBtMRjmQzM2h7BBR3j7Nab
m4PPRX5HUPddzQMWQhCGbtH7k4fO86E7Cdh6tpkCumjyGm9aows4gHuSfwlE
dcelxltzuPtWpz8DSMElQu4CoOBN3tbVuloC0YC51nmmjGeTXn7GCeR39J3H
a8NXJr9p4DzzSVY2RYfhwbXR/8H0cHY1/N/ziD+Bn8SEvrsaHx4/jmZv2oz3
jiOki3Fab9dttaiz9W0xBQJMfPzg5KZNPZ2UcCiTRfUZD3lpfP6MWHtAQuvm
AIY+OEJ8lO1kDU3GuygbmOCGrqburQeTNxnil8eHzA7AZVsBtTyFhQD3nkUL
5HepvqOlXSh1QgWTKh+2YS/OgaBvAqM/hL+m1O1UehXhh67q9MDfdSDSS77q
OM/Lq/PJvz0FtHuG2jxHwYBLzMdf4A19BpR5cprX7fBnRG5B1AUOFbhC+Aw3
IRmPx2l2gxdjCvT/pPyGMi1FtgUQYQPYSjRmgPymJCEic5i0t1kLXFkDS7yB
r7CLnDDb9DbDMWDZcETTBk8IushptFGSQRuiYMviE3zPmpZRelFdy4tRWors
hQC3RniDs0+bzfR2goJm0bhZpPBr08DEboBWJ3W+3CILuwahbztK8QYjE1an
cpfTtoJBWhLn8vS2uktX0GtatOld0dzCIuA9aVlTEHVkxhPeq5NrHCov4EUN
sx6U7GGgQbH6Dlp5peMYEBJ0DrNOeCUT+Bw6XSIYwQQXIEsDkVguYRowqKJs
+AOmiLMgUpTAmLTfqBRI+HxXxQwY6yT5DgUZRmQIowlO384T1zbL4ZoRXabj
AYEGqBzuJ/yS3aXzncLJ3eTpKgP6md1Um9YdZZrZiTXVCppX8/YuqwkIDnDT
8SHAwgwfTpKBk6uBXQEGkE8vjU4vvbut8GQbPB06tinS8GJOS8ajo1ODPSIO
AOCNtxkXB0iqasP5XbQw/y2AZQWXA/sqq7Z3zNQtvoi7K9qB9tzWvcIZF0Ty
9dWI0Ej+JVutQX4kYRmXBhgB8F2N3wGezuh04IKU0HKzxq4BCIoV9kxHRqck
J0b3GfuAE8LffidLhsevX0WF+PvvDBgIjPQQFY+//z5JBIzxDBGGUMmPow5C
M/f25OWR760L2tz700PqPbnuzAv/g0zrDKdISy7cMTUgu6UrwK7ANTWrcI8d
XI+wIe3udAO3gyd6eYNanPRKtfnIYwKiBWKEy3mEOFRnf/g0mn3cErFwt/Gv
oTFqaKGx/v0MV2i6GIUYhJYFkQS4XkifsZcVwkC2vMu2DV4euXizSULSGWog
cxtynwAomzGTTDAUNcEt/ZRv4SuiI0veJTgzZLpoCtIX7bYy39jNFLgJxDH4
DfWHpw2/ETBx+9cbkPmZt3W4iWC6YJDb8FtCQtEcCDWsMsDfHUjcU0KxlwL/
hagSPi3Tv+GGEDqAs4RTh27w+5JuNt9Yf/UBBhhHIXKRq1AgzzGlxcMOO10U
6eJE+bZVeAgk6O/4qMBbiCiUmQ7ALTmgqe5TRF08ZjOCHoAjGRn6GkXYjYkR
YzRE0EjoSgCseV2tCBCqabVsmMJdv74SYASZFeCJ9s7NP/faw63QrIZHEQ5U
zyRHQwOc7L3jXZ1cveYBUYr+9oBrGA1WL7cXMKDSBMcWwNhEm0ZwquWCkNBn
IoM3dZXN0s8Z0DM4N2iFIDPNmlwXIPzSMv+cL2GMP+O+0yamc+BsBT82geqA
JP9PwLt94kmugINZ4ssVSIwg5LWES9BmCQSxlsMabJDRASJFhu2BLQShb+QQ
CWwiXoPMZhhIMraDLi8idS53nmfNhhlgRcIGFPWmJGSEn4Z5gbQ5LxabOvTB
XBJN0L5yWlu4W0PcU8QyFcB+//LuKlWZGHr4GZlVaAqsXlChG3XlCwRyCiCN
zRo50QZYrKYVYgL31h0AY0T4vkUsz4w+HiphbbTVLvMv9N8KcLndF4Iez6oQ
5cYdYmaL2WfaxAwwumiKiZHnI2NKR3TiL6TI8cqav8IF8GRghLRfOBPCCDhJ
Mm97XvYcMSiafXBY/+J93myWLc75u++UCVZhi2/B8DLSPWYV9hBr1fkcsRuj
L+b/FSj8zaFdnHjC6FYac3cIRnoGMafFLKjwKUy+Y9yFnQ1gKtiVmwok705z
o70Z/817A6u55mU4ePSz5Q12xxL1S+A1reo6b9ZVOWuYmdlrttDzigGmhE/3
cNBoC3Kz0Qfx6pdl1TTIJjEeI44GNxEQ2UJf0YDKINnJ4FnroPasIdoDuw0A
L6SLqGwmyA83qnLKG2xxlwNrCf8FFNFZgmAxG7LMERcSPMiqh3vtHgO3y5yU
kinGjz6VyeJOAU+81DuHDQq3lGZzwzMd+R+MPsJPwkFVirNhpACMqXHlMPmb
XOdM54N8xuZGTHQjwho5oYfG9QTnlsNJ8YcNn5Sx1dDD3W0BQlbGo6QZaq9Z
jiFA1O4RGvhLWBV8lGc1jFiFO1atx0RGbAvn+CXKROX32gI7yUKfsI9XyHV4
OkOtYQJEaU5Uq3rOt4keXZ+f03+nqK6hDlUgreFa5jW9jB+N8Mxvs3XDeDLP
YBnanPgb+spPDTspndTLv4tyVgDaAjKvdIufw+qYtDQrwIIkMtMswk8eeIUa
xXBihBiRXuhzhoKG2xpQFHHPTGZw2oibV6nwi1NAGXXWhczb7HOOvhgV3K1A
7rEDuJtAQJATWADOBwZQMRSM9zlrgDKJdr0xOYruNPUIYGndIRf2Ge9uWTGH
C7tjQ+koBHTYd4OfAckpVptV+MyZMwXMPXYFOnCKwsavInmcnf/kpf51XcDm
FMutAjEzux0sTTI0cae4h0IL5pWIfgRu35Kz4JNvSVkwr+XSie9wR7ypdsRs
v7Ibn7NlMeOfBE8zgPVmFLYFWSmgkkyM4QXZfWqnP3X3nLlNWBSxeDWgYGIC
YTdhm5QBiIzzoqjAi46CRvSuQS6fl4E8u8k/usHEnnmxZKB7IQGqgWpj/jXd
gyWj98leUGWUMG+ArAENCB32KEVfOIJQuK7EpdwUS5X15qxtSFllyVPUCQGn
kC1gidMchiiqZvd8YalMjzqbT935rcdpzTctYaeT6zGISFnQwAm7Hjsd8LJV
HkhzxmlExWR5IPiQVEaAqOoq0RSOBFh5IxfkQrHESX7GMXCGTkAfsdbpNXIM
qPYgTiZf02lXjPNsHgQsTHtzhhXg5ngHMlHwCBW7IYhs6ZJu1znIyZPFZJS+
uXhzTg/2qWlFS+i2bW/Z/0uEVlohmRwjxDAvvuSzoHRIs2kN/ATp2kx0GYZl
Oje82WhkdtSIODyaHV1xdFWZ3jKRTH/alDOgbI8An+yP4BbDf+kGI4Iheb2t
N8RK4S0C2j5DBAOHIHoEWMZMuwt4h6+k7CWDdpOjXN3iSZiWL2gm8PPMKy6c
qkKUAStCwcJSi5JzCEZga15nTTsauEF8KmE3iMKLl8gkuZx7NQ5utTEuoQkv
xlYAxxVNG2nZkLoFxVs4v0hSIWUTizomhbPCutIB6Lcg/7Oz1yNesOqKugKN
cpog0k3Rqv5TUSIXKhql9/kaEKux44+wq/2+Pi4DugfIat1qu7eVtsAx972y
Lij8CBWWfHMQ+QsoINVmEvXmw9U1Ld04e2ubf5nmMBwrPPIv6DhQtEjI9GBE
s9B7I/KxcHxyRswfkkBazIHfxY3RoSbMasnkXId4o0nooyU3Iko3iC+bwI7j
9Ie6ZQWSKECB9yc3p130hsQ1PaEz9GI5CzD6OisXG0TSj/C49XSeHT6GvabF
xnSVuViTswT4ajjnljEk9oJbMsVlw3/l2tCr3tWhDboohZFiFIVvR+gfAliz
+JKe4zM/KVJ56TmdBApZE2uHjNQCmCgS/r5+/RtIHEK1oCmft+saFVVA2uaw
VQXJMDiZVdW0gke5gS2LzHu4CNJu6ZnQUdCaMv6M/OyA+KEXDshdv57+jx/3
1CKjoKX0ecbzxHa/Qfe/ARExnbHT+Ha5hDvSGJEhEIlPPkfsS4PfIV37DJQ4
u1mykD8rWIWPsISfDBLhAsBoQ2Yt7ibGYrQl8N87hMsiElUdnwawXqwK0iON
mPbtGMM281v9qgr9mtgrB4YpM8y9nWOsXhPHk5rLMaOz4BD4hpQr+GlPek+S
j7cFil0tk8ZW+cgZX0pELKpfMZU99TKkvXFn/DNqvPL0UNbW9cr5/XeS6nKE
XBoIJuD1OI7pG3U0JPC3qekyoPalTJUmgaCE0uoKWfW/o/2sDJoN5mbgx6CG
CG7XkN4I6Zfn92WVuK+o8aw2zb2mzh29EhNId4SVuajHVwsYKtmNBprdx8xT
9NNmR1/NNlPBBUYqJz0zTID4sipZc0DsF5PsVQ6kEhGY0sU5kLJbQPyN2Yug
Mc8S0R2x/sPbeG3apM6iF1UuupF/hb0iV5iAcbDvjLggGOozv58JOYmNXSYj
AsAAVzT9hIAg0uX7nLAUDPav2XIjAmEYDjcnbNiAOlCVDw2PoMfjISDYz0Tw
uGdTTMnY3RMdblGpZuO9GD/eid1TpkEWmGVboNUl6LxlQ96zidN3/E4FPB4z
7tUUmUNTyVAZlc+cbUh54aDXMBNmkHeFzxdNyMh9kqIPR0mCujN0mhU/Sd7i
5Jl1Rc1csZLZ2XERyopWoLhOeV25ERtqaPw9rkNYF5M/7j8fxJjf4VhMcNBq
cAMryvPyv6RNTr9+V7s+kMsvt6Ly2qnyJaaCdaDkcAnkD7kG+I8Igqb9I/RY
7JgSuoUPLu2aTWthZUHN3+lLVwF7tQsXzgHfZmykgHuxQOFfEFfv5PyD75v0
XQW8IGmxU/aKMfhiHqfu94BKK25GmCmv0R+H7zzqOLIlChJBQSHKMoQWolXD
J8cwVpTrTSv4DrEBaeWQaqCWCHdh594QtQKGakqUBPvCTUC+8TbPlujjIRae
TaP3VEnBz8EbYOQNSb2DsNnKwVN4XM1YpovixHTKsyPmghStaI5SeQQRJCmx
iZEFGaxpDubAM+1YI/KFrWG4NYjGBTJXdlMd9HSRiU2cnDJuUPVV32U1YpVN
CRSasPowyts1F+LepBsy4zaotCTBSfpxQNaxiOBRKNz10WFzW22WM5I/2VIy
H4ZZHOdTWd0x38bgh5T3FjZVgJJVfrovrc5Xr59BtdEu2guSZgk3MmAPNKfV
q3KjCusTQ7q4EtA515950XBFp8yYsV5z+CzdpOis8DrsPtcI+lHgMP0X6z8d
j6LsHO4Owu0GwQ/WuawqpNSbNWuaZyCYoa60cyva7m7h6dCMK5pilv75Y3p5
/gY9ZilQ6b7Z3mz1fJgg4RRwAqajzdIP5+h627BHQ0lO8vs4e3NK2nEz+WDF
jm0qpdr07eib5PgcQU07WE+PhwbvwEcRGOD40YWwNOeMDn0vZ3lNHp8MqtFm
kt+YvULUih6n04I5RyKBEuNEdtrEnE6Ars+adA/1C3sj/m/69pL+fn/+vz5c
vD8/w7+v/nzy+rX9wV8k8OPyw2t5j3+FlqeXb96cvz3jxvA07Tx6c/Lve+Qk
nexdvru+uHx78npv2F7KGgkTzBnbeWkk+en0XXp4zEIWRmKqRw/GSbKgXLI/
Njlh8U/YvK03KC2XyTRbY1wH0B60JsIRlynCQM/uXefMaTmrN6nNkaY7QY89
wPWZCpUJgfWr5FV6kq6LfEp4qXCuqIC985pWyaYHRYcTtFbxlWi6uH+dFbV4
IKI5YMMcjDkyouiOd5REjyq4hZAPGl+ztxhjQ5PasEN7m39pUXdp9lRVQwtJ
oqlM0ovgnZm5FzzkvK8ekeH+Jd/iaNeqR1lla5qdOj7ZFIU1t4ZEFLUpLxXv
jEj2bmK6WfyNaD3RQkbjIXqC5bPhi6ZI3+EwH68P8CA5TDK9ytveRLVJJWSK
yAYrwNwWNKxW3wb2KbB+DwapSKJH6WlQ2E4SFYL5CGu0IAfShWKnMfSP2u1a
nMfU5WQfbc7ApwW2BF25cLvW6zorhCsFNMGWIABWUYGR6acN5t/I0aBozPiB
Z4o+k4Bq2lv02UWH3IwUUiU7fRJTJ3YLVlawOohM1I45ZJFWdROwjYr/3MLZ
F0qmzgdCJrKCvZeG2UY189n0hePcLUoyWjK/5BhXw8yi393pdcwofn4RLuhO
i11OxauP+EFg/QugoITLeMAshI4F05W4oU44JAUA6SByxztgpxz2w/jrJBlU
a/AiwsUwjYuCmG2eWF8NfGiD9Kgm6W5mWNQYCDnOqQpva8xRA/4myxdITyOW
sIRrbjpzl9PSOwzbiWxGPHGb2SgNl4NnQhzp/QcSdBxGiz9XAOB5kHr88Tp2
HmEkZvZ5h8VF+zPz/6r74CsmD9H4JUiGMZuJEEQNauogQERJEYpwFsAFCdM7
7wiUxvmkfREE4SXI8OQFI9JKoZY6CznCCSA3XY4XVTWT+Y5AlFxC950zhCmU
FUVd23coYpGJj83JiBAbdypAHDcrXW3RiHGLfCbJiYAOA2ZAZ9Jbx6pY3BJi
I/OeWj/xpjvpm7woKt7BMI4wUNV6/Josgmy5D5YH70qQpXti+0AOJ90jw8re
SFUjgm3VCEoN+DDHVwMeB6rIY+7Ve7dMdEzi2cQX2QiR7zTENwjPLaY+8ypX
kuYct5j1Yf0x6mSwCVzIBRqRu2eOvXI7GsTsOgYefIMa8fPtjMLyC83+2wZN
Ul3HVmBHVi+dgVLGhM/ICVL0oABXM7o/3pebN0XnBPvfsO3QkegeyY580/BW
o1W47ZqFxR6McHDDT9AbE8/TrL7hmBplGRtZUBNZSwdsukO9iFBqXinOBKKO
jmrYVmW2+YKKIqGafspNDULmyY1YsP3Gxts2SdhFrGPC0Il27DDi8xqHt7wN
DqvkfhaMy2z68faUt2S0HNM9ZKNKETxeTRvuXGDNCC3CljdE8oqGzJDOtzM2
IvnxGSUS+ems1SkEGz45vFLQoszvOrvJnunUhuVk1tmTd1fsASLuas5oKwiA
leZ2Hsl/wj+cC166Md5zme4P6R/+EB5li4Ut5MC/+QCYxL1Lkp2tfsCD1Gdv
GPfd9zXcie7Xye6BpXt7OjBAvwUO0WuBG9LZFkR7nW0Jj8Y/8+Ho7PpvcCgA
3s6chr+7Z0pIWxBwODeLmDTlqgfnJwSajodxx5omzK9JzdlsFhRyLIt2ct+o
20J496t/553FCuc2o24ZsXfWLXn0kb4UhQPUZHizr3o+I1+CUMw2fnbMwExo
C5VhSfjkbtdsJFQhs1WcK/6X2GOCQbvIT4vTvkmbaXpuH3mDbGaG4QUmgyGj
/dev2gxWjW5t8msUbjR9DDd8U5fsNmsSIQxcF6J/ITqK4u+BiKcgmxPhC1MJ
yotbmsqAyG1xRxxeE4nfKLbT0ErFxY3fXERIzcFqcO6BTP0qeMNkvLvP7tZ+
PqEH1BSQSQWt0G/J1sgvHpHhcZ+dFwl/U5fk6qlWSdKEoVkYRd710pIvGGDZ
WZnyAtHwEt3GWtJh+Emxz0xW1xmx1gOfiG2OPynYPDkl+wRG5oKgu2wBstFh
BEkg2yVdNAhb5NaMt5G8mdRLrq2zopluKIseaRvdNTTzKikY1UXjBGfZM9IP
y/RsSTFdyizdox3cY19VkNurTbPcBpCG2fI1JXGb7hHd3TlzEiNgP1o+EGTm
In5X/PUk9pTsbxxCwvuzJgaQZau3lQ0uJ8pTvMtilHQqOg5p6SDh2XF6U7Tq
pV1Xa2TqMVAIDpteIPLalOjQtdwKFuMAQ2B34bJ9IZ9f7rUp/p5zACIpISiq
Ukjnqqq3wdlBvKti8wE7WokmuBZodfpoDyjUqYyNo7JvDV7CkbikmjMBQaG7
xYgOt7g0VWX7D5BbB0ywadl0LjvCQGv+zbLKF9RSINpPBl/itvJbnBjd7868
3K1Qtx2WpsTBgkxdePXN3yFWM4oSC9mxOn3OZ6VmIIKlpuphDVUkVWU+buja
36aI5/N6eImHj+9b4/OwRiPhf/hDYHzHIhIfAK2l6HvGSONldgMS2w8/8m6M
yQvxIP1LevRP/slf9zGtn/0Esn76P9IWFpJOaAKPDh9PJs+P9+EmuYcvJpNn
x/s/JkLH0c+QJ3EWHEnIjZOEuSh6tsMYGlXw1hbY5Hw5p+3YDn6gSjNSZ1dT
uCf3WZAHPzAzBPPvkYWb+fcYzyGRH1KIsfPyLuuyGuE/lHTbgEGQqCyz9Dza
5MVsP/36HRptyIOWrDeO8GVR8EQULyjbwfkGklV1g2KrpB3IAD21LPyhwiZL
fwK63FYgEaJ+LPukgTni5JDPkuA7T/EQpOYm9ZSqpfUE6tyJ6VFQikenoRn6
zI7Yl4lkPACFhhV5iUn1olPPPhUlu9NE5ivENyT9Fm4AwqyEK2HqwEqUGKkO
O44bGBDbRrd+yeI1Z8nCsHTmP8RP2u1r3SRMBjfM4ExS16PKG3HrEKlKhnKO
RRklaBxgPiMT1/tSOFPURsDCZqKOoCiWIJlF3SXS3QT4jhTOKtU8Lqi0IdXP
iH3OoB8OYyR3aesNGcUNM7Kc7QBxGnQThovWTjfUv05sI9S4zBuvHrlsbSzm
YlwSZxbeZpq/nYBd/ruMvAvzMtIfF7lGdgr+WDGqxeESSk4APJP6yPfd07y5
tko/5fnadEYWV5yoA0y05P3I8Kn254EgBoIDjQrDiyvfxp+a8yffZLKnw3io
TkEoZ3aEQuTQV3+Ri1cPu7yGuEhrjr2TOz1qaeaBOSSMTXRVnWmVXBHBcFKR
i6dAInQlwgo7s5OLnbTvMAABRAIMjQYBh3Tqag+m69NKvBPyqktJPfhZDQES
2iasCkgLrLGNo0TmOZmmNOoHlk76A5q0tEQSbzly0hMmKWIFPaK8BoINcJHo
2khszjIvF+3tBJMw9kLlu/yQcErSjW3pkyeyySTAPTp0h4GLP3r6jHiFfWIe
6SCZA2Bti7UW+zFxe6Rt+9/pNXb0E3Ykf6PoAX/H6cf+N3z5+MvjQ3jx/uTt
GX4rIftZenj0YpQevjxCVAsTGSMXVsOsqpWqU4MloFLHL0qxZFF9AoWp99Tw
YMjhLOgtVEpqxZLRs0EZcXaUSGGzJr0unBeIhgg1Qacrs2IOmL2r6NhnykC4
QUjMZxVolk6jBE0gT96ah4iRLcXU3a9Fbf6NLWHW8AbgUcLfGcEsi3neQTZh
98L1RtM/HuoKLpYeOhwLrZTxB3VGcAgdZMttQ37sALsILOMz8sAE+NWDPoIT
pmxb5x8u9LDN85FeTCXrWkdtpu52Ewy2xMZOyqQH42OAFvzvs8cIMPTXsQS0
z+j0WFt6+eFihP83fvKMyf7pxZnHBU4O604lx3hXjrZbGeUEpDhWfi/gJhyf
b2s1b/MyUJmMOIeGndMRtt6cnGqiWiTRtCN0CU0NCl/Q4jKM0GgqpIvBQs8r
n6SPgsPmHWn9jWZw2KnJghIVa1n5mhAkah9FcxoF902SMDDCijCByGW8eIzW
iBKsodr861fL3+dg4AnCwJvzi/iyH49nmJnTbSJTrqACLtMX8g3hE8yzK8Bx
Ws349mfpM/kkYruILkwzJwh5ujkS6xz7xjj7StZE4h7MQSD98NhFETOylKRN
OPb3jfgtPKI0RmhWvzq9uOjlB6KP/zn8mT6RkckMhxs1Ihbk8ZcnT/YnpGKk
bePOdZLm0WPm19eb21I84TbkInH1r2+9HVQJf5QRms/n66v0O+QHSIpqxi1T
D8zC9sMenfmp5JXAXcdTaPZ+96QJp2te1yx81OhlgZop2PnbzQq14hI0CExH
yYdbJq2LujHPBkyUgP5bKJSizFDHMVxBJ6iJjZwLtniPERZrkfTqE9TZJY6/
rNYZXuNwxkzRNNnUihOXbNVeVbRs56oxBZ5FB07SrqOceTBquAuuEG5DsO/S
LU8IJ9LEvONMF0Q7zqqUWy/P2NSwTWQkG+X8DXQnnjR81FW+KmZ4xOxvnDXC
CSbExmY1R0YKb0CMCSKFz+hxOwcgWYpDCwVX+mmJbrqEA5pgD2+NsYEJc3dK
dTnXUWejeBMQ1p/zJsDXIPyH74M7oI+H8FOIWK0GwH6V01Suoy10fF2Mt7yZ
Ct3QhZOtqcaAGB9L4VFlTcRdljSVSdpdj58b9ICrx/StDBJo7q/WLSD/v9NR
FeZ8iLejAZwypRQYHMctO4MJEnGf5SexQ5RegoQR4rB7GWfTD+/fsqeZEbMe
36/v8L5vajLDpem3dTMk6AetjGGL/SSxv1n/gkf37Hi8qZdjUiupJuZoMjk+
3k9jVczzyQSw3I9mUfnuO5jmqhibzCHg9OiK/rtPNvEroH4kWmiyH6GKaA4k
3Tx+y8pTQK9vTv5dz5ck80DzGaOSFkey+MzzMYhDSEZR74VxNi5BRUshYPyG
k8Jwrxhjeyep7EcpQgHrMSkVATkwjm8q9ZQuCYpcfgkEnWwhDsQkKk9cJgec
PBFpzBdjuAw65f3AzB/EDY04twGbbRlGVSjELm4cleeWE7ZtYCu2Z3gVIB8z
duVykYX4l0oE0sWmaEinwVgCRzVPZWeD5d5wGsS+uG5Hkd8Tzl7uG35D84Qe
1I9EGRJzYwekA9+cNaLEHAo1mXP+JZoB6TYtvlySXBp/STOVbIyYm4Dma8o7
VJ/xvjkPdeqV4innA7zSFQNh8K6ssUIJ+Xig9UnkBXTSaXFB5r7H3Q64YPM2
qmmeujdPNkrKf1kamL2zEH+aLAUZED7e+/nscu+h+oKr/4LCIGCj8lvo6Opb
+OgB2KjBz5uAj+S3YCT3C3DSV9Ir/5H1wh53Jb97vPNnzYJCruyxGPKIKCnq
OZmkxoav2Mn2sgauDt2jzi1L6htPuR5B//sK5CELJ0YlycMWOTSCXe8zDSsF
KJTbzM67rUqZgJMK1hc7f1oUymeqtVeTieUN5E+6+gK4HTPOi+lnQdGrGIzF
Mqckrv+JaDSxHRLRFImkN+F15Ox0+Ex4rUcqUooCizaesDUxAUIp0aMberjZ
ClnuyMPje+XhqhY1/B3dA/VIpQ2QmzrNFWV54VhlQNgSFa2Z1LDuSsSgJitM
XIwGYp4MY3MQ4yGxKsWmZBEZlLbxk6ZfZalyue0BE2wJ5xdC7heVhQBYsLMF
s6qa/08VGIKcGLGg0QFk0BtALwjDPE/1Bwi7LVGViHoiTYRkLfzzyRjVQYSv
6g3pM5jIsFcmbJBpBjgwX6O4GLybW4cxLduXqKJYw9aCfJUB9nv5rGtlZBq+
Jk8d8pfVodw3u0aVixISjLEHH280W3kbob3iUTrFHknekBA/oREAVpgmAYmX
s9Sp+xEryAmi9DIxBwQMkMvOQfeHNB29a0NP2T+aNIKie7ZpIKRFormYuTVN
vYYk8Y0WtQqqKSWcJxIxYNyG5QHxZVTWhjMem6+h6Vhodm9Oxq9H+P9v6P+v
xIpP705hHaIEeH+CwgaqargB+bJjTkdyLpV8N6SJIeH/6JiUe8SGJT4cYV7U
lJZqOWeRya1+QrNQTcpyKz29wJ4SZuhoB6KegvDlemKdDq4mTDSxibKqCFn7
J8/CLGFxb3DT7S7B7QFkNRNNCrA1wF/AQpKQaarJMa7hlBlWTjQULdyyNzGu
aNYZR0RmZcKbiFcApUlNo0LcWrQjfA4U+oYZ3Bt0LQy1EhJfK0G0YFLpACYV
6WpCSlqOSl9SwYFEk3Tzt1yFgMNibBvCdeYsPKgx9HuAYJrGcJzeLKvppyYR
JXKTY3YdasSz4DyO2K8mAWGCEDxpE84QL6xhw/xM/mVNt4SUwX8GDgpjFZAJ
7KSC6cYj9fRYZtOjBIqoCeX42VMQArlGFaOASUrOga33hEnMTwcxJQVhmIpB
PQqQG1Hzhs/6yJ/zV8nuBXRFar5zjLP2Tk7HZ+fj4xd7TI+S2HtY1fekzBLn
9MdfTk5H8P9n5/j/xy/Ut0fQXPD2fRKWwTZ+dqnYhRlH30CNrL/jroOrAGNL
dIXZXTcnwqP0LaJp9aMWL6oxcyGKLA2nuvP8VmWer1/hPwTu8F+v3FXfNmFX
ELWRwCK+qqoFJP0WO2Zfq4lR0iWTczxbyGm2wUOFd40RhO6d00+iDPE3lZce
m8uYsATB9f6J7qiczeib/TL/9CAenNhq4ocDH84/1+SVyn9jeQv7wUxaAix6
+PAHnL4+oK9JjRB+jzGFzsh1R3UUfkw6D6CZ0yw8STod4OtBzcSxji0cpBud
n0TjyyM/A/consPhs6TXz85pHB0ng9IIZ4oRbwsVF8bkjbAfiSGm1yiIj7Ck
juy4MPJ2d84MnXEUgHPIIDbIpQODyzUSHyNngqXvJN6XbD6qZoymowKt2EuQ
7onqwE2TNZ7sWRGCt9oQhcPDTNJooX0Piq5bhCl/ONIGvdDuE4CwM4lS4UC2
TncTzGBjz1yco9srmTrvlw0mvG8wBOZuWaIE0LkIXw6CTYk9utgjTubT9Sjn
XSJjBPZntRgsa+cNKQu31mNIGhICpUi/iipFdlIP1oJeJxx5E/og9OXCDULm
PT1FWZDTIUVEMuJLBQiQJBVl8CAZGetDRoQxMlskqzpHYxE8VAHImfedycWG
dKp51OnEHbJWS8JlWO3fWp58PyXR93QWQj78NYWnE0NHfgPEGo6LcozddcYL
Bi+fNRskLGcnji3DqrUpokyqYpsiHRgtn4BB44rx5MiM68zWstU4Iot96OlH
5qwQ8utd+WQEGPbJkdKT2Avzfp2CfMefdBwyv6WaYBtOIXrdb9pv1JXIKeQI
wLM1Btqh8T5biRNyMOKYNIw3CnUeqKJdthIvq1YflxPSmFqxGYkbRRRLjdJV
UW7YRbQr3W859y+dw8NJbYz8A83tPCfNFpCGgcf3KuiPST8/kgLDA/94tarO
n0yeHMWKeyNZ/yroRFYQqJbgmTE7U+7z8RuhMizUVUe34XZ7PTTq14ESEQL0
9hc+0HBcbLqv2eaovDgBmh9ELqAE32JWjEbH1mmzmYlD0OmSc91QjJ+iP5AE
Wmz9fLO0JCWoPsaM3eieLZ2p1hqdgihpKo3u9OqKSIj8Lmeq0O9v1zQrzVmE
nbCIjB8+EZP4169ciZXKpJAPkkxbO9BlNcPO6DeaRdayvZVObavLoT5oiFIq
v5rs5IX/e8u4ajq+qYh1fOlvspoKhKMz6jdvSveq6NH1L4u+6V0X/wIuzF+o
Q3n4KiUtMl+SP8nOwcM/xCCS/DUyaGnaf3KFoskmSXCBQJQzZrUkgiOjD+V/
OAtEp6aFvnTBpsGH9USPF65EMc8bSmYlpEysK/bGl2oo2LbMuLND3MhJX4Qd
rCQwbb3LuVg106uP98/sAXgube7GuORwXqS03x/czgjNJJqW51PehPo4+Q5Y
p1QSnNm24tw5lolJv9Sl6K7jzmJh2//69nZ3lva0kvEeZu246wOye6ZWj7uH
wO43QDeNYRcxjlV/4ChqEUWsQAvxfLEo4kHDJ0v8HnMTcd5ujgnLy5AnUIKK
UuiAbRvTbC0mfNa8c1WpT/mW9HVU7caVRtFHGMSkSbg5WLvHd3KwlBy8sOvF
uqAA4bRWT8DM7p2u30F2QfOUIKtQcOhzkRkkIetajiXwCFmhRiuRII+hhXe4
aUtga2V7sLikph1QE7Nl7b/JpxkCuASuc4kT3jHtwBq51NlkiSU9O0fm8Aww
5X+1/Exx9iVpmeAWR6n7GSUPt5Gk/5Tww+hS/2QNtbIyJkSPXXLUGm95/mWd
cYhWVC4HGW8QYFaSL7pbFBKPnqyfcaOCcnaF3Fpw3WAWawu+6ldAusL3nXjh
zkeq1bFuxczC59GSKv/6Z3MPlpHIBYC1+ztWNvH5wHYPQEkOHjDLO0uhFmg2
WYlEmGnF0h2lxsWz3qi2zvXPkElcEEKlRR3Fg/oW8eSLxl0I5EQxSTkfuMMS
mhnmMB2nH8pQup5ya3ifHZSiF5JiJkOzWfiWM9O4yiOrPBcNnK8gmgU7622x
QLytEEA3UZZjUSCSVTByMOilOB9xITXbHJmvToRMlPOtkZTOuMkRrPp9tOZz
9eKkDm1aJBL1l+Wi1q9kXse4RroXJ+LlFAZwaYhdRaEGmDpsMDl5f3lOJQnV
9UUdDK/Pz7+XCBEiFZqlAbpAPz05RbnkCh+TNDH6ES+mcKieEQaZdwVnEMAC
TcqC8+qBlI9UQnGz1foj6MeBSX8UtwDXQU6usLdPYG9VMLlnZznAJegyUFHL
FVS4IMQG+VZJhNIMoLj17bYhmwBqZNCQUdMvo2nyWQCOyT+2Ldwh+adTkgkZ
FtkxopZRnBnKsbwfGH3cP893b/g441I7Sj07N5yoJx6sWXMVnO8wHAv3oCpK
C5jMpRSpasG5Eg181vFsKeKCdphPrGhc3hA6ZC2gdSNpDeu86RT14txVlGQB
wNS73agekqt40B0Qz1ERIY0kC3b3FLvikwmuO0xfXRWSWBXVR8es0u+UWCCS
PLLAkiiNsstpEjI74u8a9Xhyz0NyI8HoToeIbjVESXAPzl5fnhjng3LbbFll
Dec24afspuDrU7pKFd0kSjsK2T1ENOPgzjRmGx07Gz8nBnY/TZKh5z/EeP9g
h8riAZ8oaCVJ1CP/42jSPf9mb8SvDn9Mep9bg/7naXr0owmYbnhpoG/C52n6
5EeLTv1OL+hPFYCnZ7+Bo4JHokcRb8Y5umkYMsu10muKX1L0RIlAO5top/I8
cXnf5BMmqGJFX1mJzUqpR2JlzSj6e8au+3DPl6a33unL7K0JYup0/svd2gRm
YDiV/gfc+a2wk58rKU+M2klVrVDThjLcS86j95dvRvIrcjDiyEtXpXM2Yk3k
TVFaZBd5bd1VLsbjYXJdOMRwE+DXct8d/ll+s1lgmBhmL5bTn+GzMWc0VtFL
67dxSDpemTvMP+RlcH5CjdFPFSWxwnxbEx+O++v1yS9SuiFblBU6HgUO/2ZT
UDLmtkqoGitZyt3wnI1LpPTeaFovCTXDsPBR0jsgzJZXF5+LZb6gEHXpifXb
S6pARh/ycjhvQAL4ec3Mz4hCLUXNywmOQxkmlMlkGOuYVgx4uU5WFFESfFJD
iosOryrmIvW06a5RC/bIRcIw0lnR8A9OtbtFTfQUQ0mpGiSp/uw9JxI2F2j8
CJOQcWX3suJ+JfGystsUIaV1rVFelBH8t1idjlPfsVbcFetlmSlUmpBB5PwW
lJklDJBgLi6bH09dxrixXPMGL3OkebRsBBf2PlKKk3iX3+Ceq/bz7FMueVsw
sHODMagx+8DsfsIxGy3xAfOBhZFKVByrMNc2JtCljd+6SK6E3GemyIRQSkLx
kMistA/zFdlN430t+fAdkyRJoHz9DkzMQcViyM2W00J/dvlxeZ6c6k4MkYwr
GSSoOC1w0p10K31uJYvqRWSa1f1efoXnz7iEbFuRWbOTvVupRONVKprsN5th
Ur82N4OWSMDksHdH8u4aCxJjfIlwK1rCXbp1hklyeHeDiAEoq5vAqfcXYDnq
B8fjTmoTl2Ym/LJq3ctloecA3ha2q6io+0WicZbcBbvsch0V9ACdzykn8FVB
aXVuOTEHCjsEPNp7Yr0rZSEVz/eNjIZhMpsazVlccppgZMQN2rCARMOTWSyt
qo4BsSjhR9FmAspa3o+Ml676J2cz2ADwFBUhSHwYx6KkvlsCX0kA5Ys7QpPF
BpAogGKemKQcCvSGQVIZBK2RqzXnWgjfUt6FUEkTB9+w3a92FTaZ7XfFrsyV
X4AjCVCTa3xUMEP6+l1wyxK7k4bsC84pRTHt8zSubupVQqoCsaRXKmIyeuj3
Ee1Br95sHLBJU0kC3eGFiPZ7vdzUmrSgd+lZJEP+MAkFcnF5IrExEc8Wizpf
WHSGgxi5Mb4YtCVJJJ4Av5ca1MpwUR5Nhu145tvg/WoyJRXU1VLhUnA+5UAL
Opq5JOZMpKC4hc36srhIBdg+GM5G5FeXfmy5TRhD266EMhE0j7HOg39J3E5E
9LdBB8z+MpizPNvGziCIEskeGMgGj6ZowxWIbRRHDN1X9ZA7Z/qQENbGFBzR
lMQYHjHJRpMDX9eMiP03jCJER3bPaSZUklbRwtyazwQHJV6FFgSQgCcdh0Tx
Uz0shpxkIuDilbfCi7S3uRUX4OyW3XB5wyxbLlCmFFQaralGoqgRtrsm0VmW
4GuUvv77KyRekCO6MJEHln43aiD3HMWBfHYAoFEPbHL6Tvmu5fae6SCfG518
Z2Zr14vNLdxQYjIpjqGWCwikbC0w7E5jkqIOP+kJYwYjuvNeuuv1gatIuP6W
q+ISkdh/eGNxN3kvezv580az6nx7T3dPp2Pz7Gyuh6oH2D+9YBdEwugpq0aS
pP/wh3TWjBXih1Uetlv3vx7T3pFg+q0v/Vq/8SmaT7dj2G/fCBYSJj30T5Qk
8sneKH2c/hhAdviftNGvoNGha+RXt7uR+wraH/n2fs2727uvoIMnvoPBneh1
MPjV3j0eOtG/4/THriX3tWVOYDWCZlLAwDb9+3em7JZkga8saiEbYVmnkdpD
wJ74xlBRwOt0Kw6IYz9kKbLoPOXw849PTtNf8sr6Pnl3kX79Ck8n8BRmrbXr
MctZC2R+RB5X8me25IfsSo7Z0jCekagVpqQnz4oKu/vl6sWx9mSNWG1Macao
co6YhO3zNF8ugZ+pihk3RDWPDaLp3msiVwUJdexo53rldrd5prWSqFQ1cFaq
DCnYjZX0diWWW9CQUmf4ks3Mag528N29zd6mj+bLivjKMWvhgYkbZ2MpniMO
UWuMixUGhco0YNbxJTnVVaUZym1QxPiUxDtsDxKAJodN1dQLdmDGmxLynXJ6
ayn3hgwtpX7CVPRaKZSiAxKtid6X6lkWDl2uipISLlIdn03dsG6nzpNAPpdZ
IzU9pq06QP7y7iptsAAzIGtgFs5DKVjKi9/CgNBTgi6fobyId4uBcwGZNqRn
kKXxoiYpXSvrKgl9kBFDk+5npA2gfKrjcOLFytjoncObCrZjUgy1r7CbhIUJ
CdpS6cOZQiWf6xQjboiTx+/xBRZPxDWo8o8kHo5IljZ7wCJ+ymtXq13MYOik
R2OjcgEuAgsfuJRC67nxCyvbl01BHGwKjz0UgHjnOPEWqnwMMNieoZ9ZsfUd
UcukLdaPdwcrf5sQ24BGg+2JeNtEvy3KWBEUZa7k3H/8XNFV98WfAibqv1E0
s7PNePcniiB6LxgP9B6H+wCv/hN/jeEAbcAFzW+DoRpAIWyZXeKnL7wpA0lv
WH+3gb5wLZDW2q50G+iLyFiCDXQneg3khW9w7EZwexiPMHYtn0ID3dHeCPLC
D5A+gwa802m/Ab2IPk/T59AgnEGngb1wjV7gGhZ5Gv/TNSzyTv9p+jL1NiW8
rB/WhJI1lSf9EmvSHv/a887YWjBc61URRrDsPHzpzc08YULhQwPh7q7JN6Ar
8ZiNgnISEx5nIehBd5Vn6nKTAJDud1ZKprPLWUWETBdcyW9dsv7ecz7cYvd9
yIJDtdTesjA2k8iYLCu9kmTNLDyYkjNxiQHX6JfXkAcb5mfDo65Ul8PqkIds
jq7pAdtzhdAqW0MmqQYeyN6EDwbhQUKnpG6X5PDJNKEJ2xgJ1DhTGZIXNuT4
aCAhC6yLEU1kSNZCfTQ5ZbQ1swwPWISizazBVz6T4nqQY6klFYvPbhcKW5db
i1ER9ZQ0aYRj4iK8oQZWIzn+st1ZBx7kq2y77Kx/BfJ4YySH+132HY356aMz
9OoGqvo6J3MHVsdao8Y/W+6beRCN/MjUs7WfsnN8s+3Xr/gNl7cHKv9vb14H
9zFRfGrJgKzjyKaRJwL3CO3BNcCn0On5D0SpqjOepfqncDWhomk2/PoXNt+8
AxpDTD0bePEbyxbV8Q5kxpc7RWcxq6wl+k1n5+gsiIxSdW8KnUZVvcjK4L0W
W2dcWarQ3pWtIuAMRamkxkjsqTrcsmhDPK1zPhzYfWZZY8/I0hxD4ilT5g25
0XEQN38LIokpntmthNPH0AF+a1I2IWfWiIEBJkMH5eFOs7tSdPA850I9YqHQ
BGASI04pLBvWJ0WuyIrDtcSF8dmhOIWlBsUES+9fE1Kg0dT3mCZmwqoDAJtE
ZysHImu15gFnEBQ5hF0G2P0oN/er61tNXCDPrEMc/sP7C9M5ufHFZavC8LdO
K6AlemcYzzgzBIvs9h7pr5xLyGzE648M/N5IbppiCvGqw/iISChFNA9i04la
a76ja7L/YqUnLuIlR6JHEI4b1j/qLohiR1lfvO13TvKzxfWQjMCo7uGxV4RI
A5b+S/pHeiRZ6DF+JPxUv3t88pvN+5VGUI43dRHe60J+o75fcQyIMN30gVuN
/2bATV/dGd5I/IF5i2hAApEE+xEnMbJ74gMr2aQj3cpNVyZE3RivKRLOehVP
yqblAPvo4yDNWqekDbGPOSGC8Q+hKh6Lk/SduU5j/jwMbHdPiXJt21urfwrg
1zgHkipyTTSA0ZRtfgTWspD+Wx5TnmB07aRwEecjIgFmaRXVnEI/oijLt4jF
22iN4shkU+zHsUXRs7jVoRJBZtXrKMpyyfamFaEY9NaLfF86hbnjKzNU/RtF
bzTnhaNVOx7n+eSpF/Xw5E3PoyvG/DzkyEEUDuctLgBE9oizioEobkAfj3pe
X983NJ2MDJAhHbWwELOBNGoWnWOFBTMN6YkWNrysEe47ozPK68CWKKBp0lZ7
MidZXkUaeWi6a0dccBMIqxYWUwSvs713IVKSmxJHjCVQkicyEk5On9LkNGAJ
Lk8cUa7uBt04ppD8gxiR0+rkXXrK2YOkVJZloOBSykdPqWyyz4tXVtzO5fnt
pIWL1sTz5ayGYTNDCx/Kzpf6C6rkyFGFnLCJfo6nAMBj/hO9bnIJjRmm1r4s
kWRTJD7IwFJyJoZ94aF39wL03VNzVgxyI/+Nb6sbObjJLgm+I/eqb/RMAoIr
l9sQ8NHEImPlSajYk9/zEekTKbG/Jn3Box9Zv0Cqpuq/5hIkh8wvCmWWE+sf
7DyqekPogVWn9Fya2yFIkq5obXILUQfL1y/j+UXVszq3yGeowRTiIXVX/7oi
uNqVDVirYHaZNZis5LCvAhnNpp9AlmccF1VMEgIrrFC/e8lohn5JnSKInOCF
nS/QtZzDe4IzgWCIKM5T3ecJDkOwdISrdiwU9uSjUvIQ++xSBeFAkUSALmXb
JbrOK14S6SfXQjf8/OEMmU0mMGXhkcb0xk+QMfujfSXA+tfwlYKv8m+SII3a
voLfqDgZpdErbvGKdG5/+IN1dFPNtpI1Zqexrvs5pY/5Edi6ZPANLFzi7+nn
RksSTqvmrpj12lCqmYNerpmHdX714eL6t/OSTf4P77rZFO2YM38DizQWFm2s
fjakYD182dE8GddqJY/Uwf1OYQO51vDrAWzrCO5V05JTWCij5KsY9yKqiVnM
v2CrAf52J0fXz2hCuZ/aJiTX6zB7VmSkwxlzQ8zjiZyo1c02Wn2Haal6Edc2
/4E5x+n9bJIzjjA0m6xLPzfMg0a7zZapLMp4YKhAsO49aKBz2yW7S4warmBI
rb/pMrBI5842JokfeyxMGB/225PR9GdhKmi1LuNaQLEuUCbISf8FMTGAqQ/U
tmeKlzqPGDG5h4aaes/+ceTkugro6R7s1P2e8VPKCGrw5TdR1NAUBjFJB0V8
TN+Ey2ulywxPSGV2RhPyI8ISjemU8bRBMppWIauCK0tOXqgOT1j++Z4E+WXN
0WndauXm0CwOhejQOcULj9lAwkiYJbxYal46Gbx2ebsjpdxN7sq7iHASiXEk
lg+LcF2z+lRZadap8E7KTlifMqtQxKaNkKadYnD/7u9DdxGWocQVqolcHCLf
g1u5mZotAPkQEgU2N2JSwPI8aofmpPzhZWfZFBLoHQp8z66fGKNK+D1KepdX
UlBmG9r36tSbSo5bII/EuayyuMqoejy7sJxR4LH0SDQdlEUO9PwjNFSwKeqQ
aMm8WLUfndWnvC5FT0b+sK4kn1eXNTkcPLpLoPTPY5L3rO3Kzd+YujMSDeXK
u/NNry/PLl+F6uzaTlzwrjhNineZ7aRB8YlPohKvIUZIElZwICxndhaNt28w
iZzeqzk8L3x2XVRxSTgz9inF6lz2MzLyyWw4oiKvqQtJc5aKJ7K6F17aWml5
FOveSZciiaIq1Egv+vldPAoK6Uf4QmH6lWbNhtWq52oVgIs6dJUN517zHrwz
pYHYymhGrpS5zYKcqSwWnhTgVKvwMB2PsWOMrL6I/E+jBZn5kw8GR5hHN7Tb
QIXkby+NoufHFvXXnwh5889CgWT9kkLDx3IxsNl784N3O4XJL8YDwWjRAujL
10W5+SLdJckx9h3a7ezfVqyZ/OnyYlicA/Rshsk5uNoJ6h45EipJnuIgEgq3
LG6a3aNwV/BNndWWrpdC+TCeecl5JSQZq86kr+JEd/vkGa2MIQAHvAoFWuRp
iKoO60s0gzzjJQbmYFAMKCuEggXo4xSxEtHsSOYw4SGY9BhgjM5w9aaMYUPd
nBHGVuuWLB9UMgwR6abs4REBtKhjDCLAvACY+oJA77qLrbBXGQGhXrJSzgrO
QsgYhOtQ4OL/OWi1qOYd8iqkiaMQR76WNxTlhn7FrDHnU3nSmxtzGIOTwp7J
7EXZ9EzZ7XaWzECSbG8mcaAzQRH4Ue7yQBnjEZ+E3AH2YdV7/7DpyIEvY5lN
Rp7FQ/eHfeoA9B8bGnm+kHeb8nv8QzOJyQGl/7on8Zclu4tM7cSxahcdNmDP
45w9BIa9n7NpflNVn9Cuv/cQJwRMuSXMQmze0sdi4kpJbPGPXHqpAHWMaV65
LGk2+VdOvIja2BfUL7figV7FQknUyk1lpAaz0BMSbGpNKa9AZtnVFpYxhCt2
ZgzoTyQgAaSND28nIsC9DeLbc/+3fZDvrFqXxv/EUWzoC/McQ8+9e9Y61EX0
hfjNDy37nlnwF8F9Db37Ohvh/0kX8Rcd5zf09+vvT7eL/heuG/QATO6BW+gE
Uda9R4QnqukJvvWhcOzf+szxJge7lY38z7EK3+5XaHmS4Kr0n3lILt3OIJTY
ssJH+oi/RDiQJfmeBHdJZ3jSbkF2LvqIvsOz9CtRn8rwSPw1dQluOHkk46GP
ZpRZMGjMHzGDyUoF/vN3sYdqVCNTQcTEX0aaiIgKYZsciqUZTqK65oz4F1U1
UyxuAWycbUicVEDmLgm2MCo99EdMJ0ogm9I4M6mq+LEY/1xwYZB8uUTnlP2o
624vILeN1xWmHs02s6LipOAg1ldoidneZNNP8cxUQg0JWaq6YM8t17MYY1De
5rqccWohLdgoocaVlF8X9lRkyAVITGsy0gC/f8ulEHxwrUnOmqeIj0ccD0J9
6VW2PuArymZErO6y5RCGIBeZbGh1u7S70FyMUlTQjGtCJHEudFT4mmsZu7No
7QgYj+slSt1vSSPAfGCiYhe7P2hGHue/z6HDrONm05l+xbmLQCKAbhPSkJLx
0KR6qQPJWY5kSa4GJZmoxJqFlrnErOEymRoPrimkILF8GUYmtw1KLzL3T5PB
p5PJRPl/u2JcRjSRzN2qRmg4g4dW+BSfIsrJrOUlg1mLileeOMgIHA69KNGv
zox9arRnDXZJsTsFmUH1C6q7ADuMpkKpJDkrFpJqCkOWW479cMME/uq+UmW0
+4G7+oq1yJDjg7/DfvwODFb49YMbBRD7W1rK+JqO7SA9k6mMrcH4jGbqVKfR
ZvspBwYUZlZhvTik5W44gTefX5OSP3VUCu7yxUNIAi9OyKbOFKhAUVdH1bsD
Rw13nROcSb1AvjacF8enYKb2IT1Ipn7W02XVWHPFhXxxOt4cpO+PM43t03im
oIlVK841M71m3YPLljfq1o9hGejk+iqKiUfbuGW4IM9K2dGouL3aIgiPdPeE
8Z1kBfB5D/oeISEDv3pyUAeGw7UwpmJT/yaYlK3EJEgom1o1qwYoLsWChl27
zgUsfAL+bBhIvLeCN8ZYU/nNa+AjFQSm2uWQxdfc6NV3JQxZSMVFQeYKYg6D
k1faLJdhCZ9/Lz1xPqi4vd4uvpMp38mv3/krqtaHHbMhVjUVfaWK2fENCM7D
/iZlpqB1bsPdBqa/sarNudZm7MIsweuJz+Hw9Ss+m/hnv/+OzgW6E44Oz4cv
sd6/fhatG/xO9QVDlx/rLIvuofycb3mSuGAgSUv2nN0xJPsZWebTsmKPsptC
0ieWM5c6UYpiAuOBgT6YUZJZMo8epIgDk23J+KDK9Ci4lZKF5DUmNvEWiCSm
PyGjKFUnbSsr20yw3wX6DmJzySUqCZzonq0WoeDcXOoBiNk76qAqtmEaDj/x
XnwKUI1mgu341PAy1Nvm4zWRUrn5v8JPrh7klxxAhZlLV7uYrxBSqHCS4spI
g57zoMmQnjDsFaql8oBoPP2Op93oxIQ9GVraJFFv52gROiP5VnydI9cWrteU
LUKECTy+A7hfD3pLIX7Er12lR8BArcaldkenze6dxtn5TyOiDEH76r3/BOZC
XljSfHPGjACZA+fbuuJVbmUYZXx5rRWzd2+V33rnFh5iW8OuRbUXAseBPfAe
US2xovGrQE4LIZaGiXgiWWJJneZaL+Wjx+yca9SfBadDlOSu4qoAj7heAV+n
bPde8Sx9d3Tm0i/mqv2sTgo+x5ntlepJAo+i271j5n7HHjLz/j2wCPYxHQb7
ftFUQi02jJVuIj/QVg6jd18C8xudxQ+8Wf5ZkvQepZwRlDqmB+MLupxj+lI4
XfokPOh/Ih3v6kDLcZFDwh/+AChG3rJngnRx7xx+4BIEnrEexFvUyf91vDV4
Dtfdm7jDF3XUrauCByxWvaq2hJniO+p7V6iT8jXKlfdnY0OH4o9BvAOBbQ9I
xZ6q4sV/VcAwRg9IUhiZkQViOq1qoffiY/z08CVwJske7t49PWrSIkKUVn0w
eIpyrT2pcIiXb+RYKSZ0Vd3DvTAu/P/DFuL3SAU3ApqfNlxruYkRdRFKrSAb
MZsVUi2FReBOjmDmCls4OyL02Q7U13ZdjsOtH/BQDjYywQL9oloxxFmkEH0d
cBSSET4hHyQ0RC3YSOs6CTZqleDM23hwqN3D+MMTpB1XoRxC2dGJM/1quO9o
2xRHdgnhMHIfE3IX1RBxjVWtni8EiUZ5mQrsRLA9AihIrPMZGWhoiq9Sunnp
gewT/oEQTNYWnvyYJ/8Kr974Td406JowpCbuY9yAQAcbmLoC8a9APdpk7u2o
7xYWNLWUFVduUlByqArEeOWe9IXB1Z+zpbhLZV4cdc44+ZdpvmZ1R6zUMKkk
uMmghVY1XgZ0k53iH+WiaNiXKlPtElmdB4ubcwE4+jbMROAzmhmXKuCYF+WF
InnSpt4NAxqef6zacexZG5Ri2KsqLk03xu80PMF2yYbvbGivfdAaWg0XV9g7
jJx/ydjuKizY2LNg+cwiL8m8qqWAwtjzvocMlW31WjDSp3IksvmXqXkgpCn1
F78R0h7thVVBrIsVJiJFuc/UFSzRSTIxLQ7ZSbnKKhSq4cfOfqRR17T3IRBm
DY+pIqMl+ROxkdqOug3DMIAhL6/OrcCOectk6Ty/M5W1DkOVLkxHZPkEYz9c
Ajv0+qHjY1W/bEesww39PjniGoTWowb7YG0W9ZKpNyXNMUqEEIJFG61zwop0
1D2HAShBKL0fCXhwuLC4N/DkWokfzu0JDntXF22riYgJbug4Ojva+CljF0jk
e4rQoZa83+bLjt+xpm7H9kZT1qK/ILRrDau8pAIrkpdXz5lRQwCOd3V1k90s
t5o81SUvUoUbulMXX6Ah14B0dZUWVOLAVULRKyUnIBrwKzQVUL4HqbqZWUJ6
UnVQZKP4oksi9pBmHLMVhaIPWBoC2EGM619GsKc1nnlEGuwmV8RnWSSt+Iqr
U5RjdrCpe5aRs66lsX/EjjdumfupwR7jIjtyq8DZOOdiD47m1ElBZbwJHYcO
ZJq1Q2X0EPbIwZNgRKCIalyIQ1QXd5pDP1rh7iyTE/wS5bCVZuHTfJAWtStR
4O4GeAV+MoTVj7j2KVbpaW9XPuCPlcpeYh6kLF3uVRURkW4jWrmcBfONDVVR
rIfKKLZapq2Jsv/roiau+jbqEFmE6SB/aU/Qgo2agen2yqCj5AUYvl3K6WM5
myjfutr8JOt1R54bICt+Gjb968pXkOz3YzvR6WyknpEu5UAUp8gUl/hZVdMi
y00sJbodESsZWO+OvjuWFC5bjWcpJBWM5ZG5B26oox6bgYlNUBPWqRcBz7DE
iQ974zQPwIQM8RqNyb68T6ppLuoBag5YfYQVPRFpjizDmibbluTLGc4Li2Fu
1TdSywf/X5rV26oVV2gOPBywVjK0sFls5CbEM5A7KBIz1lFM1SueA7gpxT5F
lAuPWWO5tjYSU3YaJlUYCefLcSnI2GNMdZv+iK8FtuHfK58JJy5K+F36tkov
QjZks0SajUrZNAl2kszJITeA3YOAfxKx76e7+uomFFfeMLjZFnXChydmd3Fs
pzhxysRM3ht8vKRHFywztXjkWq4MWj0wHpazXCMBx0G3bIr/XBUz9c784rNC
JzVNlICAzfmfkeGkxVJcqmB1i9oQ8wYmkvrOysxYocdmsAyUCv8Yjqta/t5e
ScQ2B40nN5gPv6GJkTUTiwQsNd94CMMxShCY7LB/UrmDs0Z6K+hFKzU/0eSD
VQvFSSIYqXBszlspVRwpT7Ryu3IeHPpjbaQSQChiFtfWUN49S5DGdroicU7o
NM4ZP0HDpbjqMBMC/Qs1vrza1/TfkteL971ai31HwxAwO6iVhfVSByVe3FoK
LPL2YTSB2mDHbUQs1M41wdMVYFJUY0qz3Lx3Om4F6NEqYMLeDTA9CpWwwvSO
EnjSQO41onJD0V7YAanOHUtmeNs7scwWhUPGMxwRbUowO2U7z5geaGeiIsF5
huwZLRcAm2o+kc9cTAawDeeiNJ8HYzgAl2NGQGhM/P1W8YvVFmA1b2u8Fefs
R4k0IzemE2c4PHexqf65eMiHuMqQ8uP+jkY8RUmCIew2lU9AIsIlFyPRn6SZ
waEl9o7WDYKeRNrBThFF+ltb7CcJakZZCclobg9e76nb0a/dl39zL69pTRgU
EOtjCGCYWhac2YTc2YADQVmUa6irhs0xB1gvg88CWpElElrB7BiXb7v0tlO4
z0h2Eo4aJQ7OkY+81LQN9IKwtemLfcyGxN0lFHdHxWW12AX6eTe3JWJA5uM6
46O/nW25JYBkJP2oyLS81x78qYkJvUlMFowLL0JKK1+3EnOr5uNqPtakqpGy
R1xHCnKPcRmcFebgmIBLWHK8Y8yQFEyGqkbeMGvhxYq5mijjAne3+ZJiF1ye
YC15xKmCkyhVcDQgx1ILiZUG0i3mEpWiB7Bm4MxTyz3XCatqpLJQJnkFiWQs
ctW7JZzMGaXa4ot8yuJcI3kMs5BVmBPQLMlvIWS9uyaHBC0rKU55lsazwTIp
1bQg/bbydeGit1XiDxAwuaTVpULwqVVxZZiwXid8K8VZDz8gZVOcGTrOODmh
e4YZx6lRoo1Q8I/aEbkwZ7mQSNHx7kWm1cuLMqHWYUigOtjD1pVado6Ikqw5
HjHRQG7rVpNOSqmg1nTo6GebPjse3xQhE01iyQUN5vN1hcBdUJqMMmQf5DyO
HIj3x4Nx+vTxY+A+4XCrMtkCxm1M1iYZnBdF0+/sbcjfyoo9rkewRqigvJXp
gqBXTrAq1XIUGEb1EJFbARs+cSm+3tXVvFhaioQ1/0QfZflzTBv1OydN/vpV
njacnMMkP3LA7xSEyVL5mIQq+bvjKAWoThLXcZ48shmml+j1da02M0YnmKOO
RLvagmJcMeJZTJ1t4BPqDAclJaPhfIftdRnWRtzrKHcDMvhc3kyLTkBvbZ3n
cQyor0pkhYiQiZiFKVLmJkwlinpQUgpRjbVIkxtn5rI9C8kgKlnA0sodbqMv
CVMVc3P0pYTVrVscDSdbIhmYspumWpLPEiDckhLqaEbxiR47V/2iqAQ9+kvR
1+LBqM0Lvg9So7J/vA97AKa/yTT2qAMlrKJeiclitgS4nm19Rqc9a205FfBL
7MZi8jkC90HZFRS+zYnWJdNLD+wXiEa9rKkXGL6OF+pDYzenkGdjwHVAX+Ga
fd/NkmNSCRrMqayr5I80R8moTiALjr5fFgZDNVXxzw7p2CR9GyI0ALpaOE42
AeicN2iFSyLjTNpPyEFTJgcsrDnEOW2juG62LjH65rzsJckKXlukWdrDAgng
ADg3klJIgyt/wd0upmj9lj8jlziXJzaeBd/NVjTjuu7EVVWTavObNUh6KPk7
8ZPqgDUrV6eAx6S0fMxzY/Eg0lRJdoYIsK1zvh3L7Zh3zc0P+uVVHo2xIPdC
Qm6rMiocba67Cu2kUSAOoszvUswzhkYJgaYwGSAHVpgvTgnQSXRYu5Et0WEq
JMIDWJO3ojSPglrD3lhWRNaCCExpzmPSN27aaLyJhJK+w5kiySK3Dbd6Lc6k
75V/CVAjNTGQp+P5cdo4AvZEDx3W06tHHSn4reoXxtTAHWBsjTUz5KoZ+HC6
Dda+ZcqjCLhoPgmDIqp51il0sSbXaq2bKIueSPzqqSWpBUzSgIiNipZX7jGV
K9m0WFCDNujR6cn3zX4azSocRmOjEatVSI9xbuS4SCpsyzor6ia9rRpJq+3k
TOB8SsRfEfbqAJTr2ZQVODdUtT06vXq/P5GoWTh1EBPgf++qRlJt4+GfdBBV
Z8d3gDK+mVKobEnKRYR+7n1tvaeP3lXv9v0lnKRvKk42Oi2aHPmJLIVvWNvI
3i2puweJK3cptrnAYfY8kCWuj8wpNJtwYZqcChijzTJMLyHGCA5Ar9+ngr1U
/JJl48sc2IS8QcYAJkIDEbVP7oU9TFsc+CAm/5/yrREhXrzfnwfF9Ho0EWhm
9FTLSPUf/sDkFLD6cJBghJ92BB36q7Trm2lT7xhhXa2TRCfh4/fkmZXhTrEO
t5uNVeAOzyQGNZqQxRWGZ1KhCedk/+QzeNatHQET7H0Gz/xnT335JWBC1GHg
X/JtQ1Ud9dKaIrnj+4FgoAnnszSUphXnCrnHVSiJiM7ujZlKJQNEsHt5zZd3
VAkpZueVFGBtnJLgk6hQSJd8s7X69QMZST8FbYs5o8QI4aK6VrRelTdVxj59
aopwucR+vji7tOehuKPfB7ZSN/FdZLelMJ1OsQaNB6B7jcl9Rzod5G07uZOu
vSue42puqzuz6AatNRYNdqlKVUWjAgtsX1FtGts+TjFjUQES72ZRhC5E0p65
pglCEal/uobRxmXBxXHRteM3+Fo/IufJF4eYoJXW/Ek66pksux3RBx/zm7Tb
2fOnh8+lqlbD5bE0ia1EGXBUrJQiJtBEwYQaFDWtSmwarNlWNR16aKjxlXgC
Lb1tOS/7I2rd7S/C6rSVTUJjmWwCXikK87g4eXuiqK3I1WtHBAsqJFbgGIWV
RIs29Pnxc7Q48oa8ePwYdtdVpZR8dRdtkAZwGiCI4Y0nqpdQlGVT+RSj4S7e
bJ0krfMmypSS9M380I4ZknwMt7TaBsGGMxoq10vKt1KdfYSZjcpA261PXe5P
cRQeGLloUu+OxmzZKI2cW4MKjKRyHQEOe4X1tqZR+j+m1ljV1ojzJDkznhPR
n10Pjre7raieRxWGCeFsOgLvnOCSdngTLUEt+4CELSTbA8pbWUC6qn5F7Kx4
GbbsmhXGIfPgyLsiUv13qscRqrOikrhB96jYIwUe4DCSRM3ylVDybHF0ZlAD
ojPkbNykX79D4zjqeGb+9Q17ZXJYqCWDDeZpCVobS9Ba0PaKBm8NgDpkw06l
ZM6SVJli8os8EzMXtkgkUTxPXaQRqx+ogVxwtsNQNQ6yk1K34VPtpOEPTUuk
15GVfo0PZ1NfAk49ByhllXHsmTnwsXsEETOL4nNz94Fanad8NhwrhcW+UYsc
Qs3Jp8Q80Ac8KYc6FOGStXFDAQQ+g5mEEMneWF4bdlHobg2iAo4UGisNEwMY
IE3hPeJgXHbuM0WCsrPmUjQcFNaYuQK1AhMzNqMjfdhkF4Xf9RUacnAIMbwS
KxB9qR5zFg+1tGMznIYg0Iv5IstU7Lq6O76r21UcEzXQVccbHc/uRDi3wUV2
q4t4fCQoX1ASHfBbgOXii3A95u+uFJM0ixTVZayKH4uWR90Qu9eNg0CUli3S
65/Onj0+6tZNNJ1nIQ7BJY65TNlNAWUa1lWRvaEmW7l5z5D/+8dbi/wduLEa
9CSK0fAFzqiNPaGKdtgLrOO5r1fduapGpxD55pALY2zEGTyumy0bxw/YTs1Y
b7NW6DTn1arujecwM3krWppK7KrZoV3W1j4BQ3JlJde4qaWcI4tGUe4aV4zK
crLkJgo8bt0Gt1pEZAj/sR/Q+U8aQoAJWvCnhFxZYAE9/KA5YuUxt+x8ihLW
d88mAGSPhtrsJ0NPcdR+2IHzUHKxCJrJClG+RUH4UArOSaXbw0aWZow7+0rq
PuK/P3KkGAjaIA9ibtuxIAnXYEfGXYxPG/iafKLS3zFWYkd/A2ESyY7O4mC4
bhIL8p9Iz8tZVTdiIkUi/68+WxoJHV+/Aw6kmEmZYHMmIBInzJnANeVGI37l
Ti6yZOmUDyJp1wmJCH1RljZJ68A6FcX/KNgc/KqO61QAZF8d3sWpI4hsqrwn
TOFRE4lmfiwVsNVaJJRaAqykQhFywdcDLVEezZfzQHeDtEpZF7YraF+L+CpG
b/ZII3euuGK6+j1lmuiUOKIzyq+engC23K5QoPQOHI/OTk5QmffAuH63QXfC
gGhERulBIYSfkw3DBWTY8QeXCHZCImE7awrDoYDiEEBClYfg4YGvLdUGdRSS
BBftpJtBg1RlQQuAFCQ6B81LYGVhqsCKd/vqZfGFdbELhBWoCYmesrqvWo1G
DkWJ4lHIgc/IB6LUUGqwNh+dUKMn0kN03X2Ck04EpVuqcLgNkMoE/lGzr/ag
6EAvS+MV2F/QaY/738vR/9vk6eOXXps8SfxH5PFBQNrbVrIcRrugJAXde8Sh
lLv//ITFd6nzeCGOWjCzUffoBRh600Jv6kprcXbvKNny+1njCUI6K17u/LKP
Mnbgg37YBh4krKC5NVNWvQm1ZPydsOgQz58DN+Fi/ld5VopjZfeEiV9jRCz1
vZv00YlFDYVqghG0jSaTyb74AwTpPy9n47yME2SEPNwg3aFKfcuGxWpNV3dE
ujmnZhDVGGuztqREG9rJ2OVgknxghCK6Awnu0N1SQ7qpFKTieJh5f8YT1sfG
B/OG0HqDm6apqEj8wDoSqnWgKBLG/4TV+uc7wWxUqq0b2KugiKGrGkKkmQHG
33iVcdBYLAoJsgBVbBCyY0JdD1yCRlxtVcvAUIVSuuocsXHBmedF/Yiz6jhb
RANhgRuCO1XBpRdz0VHH+CLUYBB/rRGpl0Lflpl8pdVgAbxV93djJTPY5VRo
/ccr0j1enPGmcNCaojuswcwpiDOu8Yv98+fpo0/FbN+juEnKjhKxKlS1mU8x
rpx6B1H9s6ARp5UKenEsprXOyzEpG1k/ofpfTOmLMetcN7ySLHaIIpFfQ24g
xHZGXIKjsFn6L2c/cziNGBi3EdTBKh+d/MuFYfg+IgxFBa6HrkvnTt6pMYzX
hrXVbNUUMUaHgedALpa4Qzzkn3nz3+nmN7J//PbrV/wx+Tf4e3JWZ/NW9ts0
ylfFAkYRNkWPwFTiwrp1Dxiw2ZenIId8ebphpIWboEpSknZr9h3FvwduB93A
uVB7DxsMXf29VKYuhnS7VjZWFiL2B3kly6sInbGf08DJWYEkj9NTU770N8ME
uqLkICK2FKRdcXMALWENgUVpZCfwdFUIY+d90uuI+iZvGKfDHgICID11TtwN
r5DgBlu/5VTm8YnUUVqD7igNAhI8m+AzBSTnTWzASgwoMWwt4WwSzcP4eB/Y
sbTrPVN2AsSljU+ald1UnwUry6ixf1xrfvcD8DpFeJ0KvOpeIjc0/okiGAld
RRSFqTgR/P7BUY4mVlILONX5OLgCxZhikvbMdRTE29UhFHEJ8/6GUejaXY44
uz9KGlOMqGIdCxFW2WP2OUORXfjgAWbJ3IIwSXu4U1xipsMucQiIPqEY2/6Q
6OUaj4pPN6WlAyb1s+YLwexgCE7sJ5VrjpO0ujEpxK07lLR3DwubZxBWpdjR
SFxy6C2DSsNxOOkl63TFzZW9RqjEHppz2cBBJxKnNrnLtmFNg0wVi6a2WKL6
lqSCqS6xonDA7e3WmUbiY5F+UOwg70OONRYRUWg514p0zOqmRb+PGzoq0xv7
XFPhhjHb0wPWoGhgUCdLzYKyRIr3MFZN6BI/VCATC40L6ZbOEfTnqitQ4fbL
eUshl8PktIP+WXxpXMFsQunDMkJclWZoAFekhs1JCKqsIQSgE51MZwquTb8a
Qqgp7qLRgnncAatCk3n4BoOXoDJmYojvlopdxPpJzbMHpPwjCVxVCQUmkyvz
kNXPueXSW9XiPEtZ9dTl2dVoLRyECPuOg0AMqy7TTfCRttpQhCqEXRfPRWWN
F9lGgjd4dVFGBmIBNXbVyzx8Z9DSr9WFLMwoGobuDmoKxFmI3KRW1UwTQNzB
sSzZ4wIZCmf3F7cRZeRKgD519Y+HkNzKXdcB6gF6z5ZRP7SSELAS1sTLsAwW
4uDMZJM9hb07icvXGjtDd8JzY2f13yOP86n4jNLG7IqXGo5bIkNq1TKXIsXe
mMFWv/kzYXz9gMHBQyJ5ObisEjGTbIxBntRQhsDCScoFDmQNCj1CCHM2eHDW
5mp1Q1kOyIcrLtdJee0UsUmxQDGcksZMvlBoUq4+zB2tA1+I1ZJAGlmcv1Nd
pGqO8EyPl5gLc5bHWSDwDQkwZg8f8VQEBjQxhk3WJY6K24V7biMBXceIHcQs
aybufHKvRejWU0O3y36q6Eg+J+8CMnKCdDIicgt/Ir01jrOSkuasdrMd0lDV
2awmN1txHP/AuldEMCExNAJXfBWktQXr+ESOEnLPYBgcg7CzkXRMjDoeCgYC
OLVO8NC/mA89H7m7He67qlTogGKCyiY0dqLRS4sVL132K8NIyjaFKcvmOBNh
1x6Nu6xuxR2DWqcUm+4cUy3zIsUEIVEmHb6AqsuNcqSaN/w6jUzvTjh5k61p
TieUveBcWj7s7ERnlY8554lkeThYZesGI9Xvea0wwrZBzZV5wslloV2G9Y0K
l8SVjG/3dDghR0G4MOiv3+ZRWxpI27KC9b65aSFT5GNrg/opZbpiko/KXHqr
tZFEGzMvqBAi2/4oe425qZDnirgBoQihZDJK44KogtLZ96bnAlEI4sjNlZXw
LmguaOJHFu14yqx0HWy0MYmOgOGKg4v/e1DA1v1BCJBX/9+cvnQGDRtGmSsB
ZU7E4TCAIcKdExIkfZOXuVS9s0hLEZG6nE20b+9Im4Ic9pX3v3vY/uUKS8RX
4vmvrbvInW/ywOPw3QncosfAzl695hCh5Z3l8BHlFKmg8I+o8oaSCc68wKky
3pycis+TeOzlM/MwmiTkb5RtLaEz9fn2w+vXPjsSd9tLSoSQbpemrFyLEfuQ
IYzQBOQvdSwrdSpSsCrFzk8ol4qxGcGzA7UpRhKRRmJCYY6S9tCK33EAzMCR
EKkV1q7VMg1sOzKR2SWVRjxhh2Zr7IX8Xd/mAVRaSz8SNoULhHBBOTVSioI8
hDRye++TwMU8kNHqsO6xbyDvcU0bLNHGwSnTMjr18Uu6zLbEf1m6AnXHpr6K
UBGTXtJlayz3fEUSZp41omXjZCvDN9LnbwgL5MhBv6soMFXLgQRwnbgaEQyC
cZQXH8UfkiL67raQrFluRwrZf1e1vu+arlZZ1850OZQIJEBQ/5qeaIKYJrlX
Z23gyHfZWil/Fzsm2FbxDM3aTIJPk2N0uzPHrIANNIcZCxst80XVFhlfzliR
IEgrAC1pQWxKAq+x0Yp4O/O4cW5xqskdDS6v46xVhLx6lnSlqfomMt1o9Em7
4ntKDo8wfttNSCv5k8QZFNnMjBVP5ptJe2xZ3RicTX0eRCu8a/D3bUFx2S0Z
cXUiXceSnuLzSjDn16/sb+K9FbK03Kxu8pprI7JFjhymXX7ibNiv45tGkCGr
3KCmirurMMVFpxBI5ORcS9S4lhnptN81nUUVsg2SoyIHbuv2eQVQb+eKVYGy
aluRz6fiDGOks+Zbuz+KZHg8xjvKJ1ZF5tueDVKEZme9/TOnycKNk13cPXHC
jCIIjiRWNGsGVZB0EqJA/1mzayTJr8QbUBQtZzQ0n3KJRWdhgxggtpyjGbdk
NkqVxwVncShbzaJIgdbkL8u5OsRLqVpGSdU71NJSwuBGhQQgeKWmt0VuaYZV
yQX/+zl8VX7TX8cnGTRugiLDmS5XOg6Bo0LNe003x95ffbUOYVVNpEheKhkQ
X8SEWlAa5hYBDxbr40I3NMI7ue7/pTE4ROfhg7ic2DLIdQdcbfsRbigtqkU3
WNxI7IdimfiqSB0h28ZGKQ4ePzOfhqQ3LmashKt8V1ofAMIYAMw6w055rq50
XGjteBWKRVGyQxFT1d0WdMP+/BE3rxEGUFXxAUVpLPjb8eGTiN+/zhbNIOsX
7MNd7YbTERAzCV2wK68lcWRJLTDC4vQdY5gd41DbFmbl3FWl85C44P3Pp+mL
Jy+PAo8Rmrlofp4fp9UWDb9WttiUpSpjNQ0j4UqX49/bkkNUWmwxEzd1NiS6
xB1vsrKYW6ZWS2Vr+syhe9LbEDRSq8u259iVB15Fg1hV6VwHcaAfASxxC4tK
nM+aTMdi2ZpSAa9N58000U+Dj1Ing5+vDQFMxKPUVT04tURCpKP6+p2Ks79b
RCScxxw2PSMOeKkCsoEttutG5okmTCLzyFGaYsdMF6ZxchIiod7Q9Ayvf6Q6
JfWtsJFkX4Avvm/VBxXBap+LkIv3njSm8AIJR4JZy+fk+A0NjI+kIWhSylOY
jr5bo0dUzS6tGQUM0D5iB3j0LvsTSLX4FLMQIbVy6a7QytIJo9Gvss+AWSkc
WsQczGBj5bVC6CNn8rJhSc3hxu7FSqodBU19izxeV1XHzjSWldFuqU4UWMk4
UoIMWDAA5eFAPXUIVZJsOaN4WpiFGgh1KEmvLp2aMzn30U56IlJ9Dq2XQaxz
Dncqx1EJbyfKy14HZbRE3GjlGq3KpPEQoqj1kXhuvQoyEvwtY/TX+MDbEGW7
792I5KOq5zn7vUynn93ca6O/hDwickltM60u6dXHizO4AHjLiBT7WajioCh9
LMtAUNNIbM0ZRrJIXT0DRjpEEojlcJ0PCbt4AXXouHi9ZPHGYhTF1y75ziGs
MwQwq1JZNOJksAkZfziGxCVj4+GeHWL458l6nQPx+JKewSaol9o74EVgQPX9
4JDYMBBgxCh3T0J50MZF6UrWTTV3Zs75rCT7NX7IubJDMq9Odqo4IZbLLhRQ
DsbI0CJePn75mPeIEIlCLq0aqKaIXwJGnaI15LRLqFPgBsYQqhXXMNKYS9oF
zdS/V5YT/t9ksgeT/FCSzoAzr4pRVSqDjDCdUWPJacmn5f0FTbB3KC+PX0qQ
MmezZTN9mI1gfEtnhj1FIS12EhSMcogphPaTxCep5TwAnXCMEQVd/Ahfxs+1
rtCkzhewtnTvLyfj/ycb//3x+OVvP4z/+sc9SYDASY2kbwoCgZ+j9D/x4Y8S
FsIfdLqDjv7fSdQPpkr6wWXd/U988GMobMRndtEx/gJM4iBiE/6dC404xk/P
HgvrDsL/+SRF5xXh2YnxS4IZj2mh5bJ2eIDGyRox+XG1VwpgGY8Nc/RC5+Ab
yu/mvrECM036FtOXFNMzVHJFbl0qhh0hBDokMYH+GD7GVU0bONwxmxguawS/
B3fc6Y5Ajr958vLFM/4Gjxa+cUNlen2CsZ28scyvHDmRCqsmjWdACdD+DJcj
CqShW4wwuHc4OZocPX08OdzbF3xA56GpN/YQWH7cMzRQlJxCSYzSls9JCBW7
PiBrpbmkCImrr6cvNJTVi4362RufNhd0b66IEg5aONaDPAAZXF8Tc5UkaOxj
RmuUhsIcQmcoZol4JnK0o4y1I9HlIzRkVPkGQ1UlbxFz15z6ilMJNhy/FIyl
bl2KPHpf2IJlb0pHWAl9F6yykpS3Xv/nk73HFZc1FvM6+DzK+DInf4h6WOxi
sCjQk9nSy2uWRM4NY/vNkCUPG1H3EiOHYeBlIb4GZDHBozExXI8HPYKEZcUt
6iITrvmjOQ5CzQBRHcUm6uBTVUm0ipWZkmw9lJgsY9JhmnrJwVkL487WAasQ
6kpRDLq59Jx1eONKmN8yKz/lbeynBPNmJxxeby9RBTGeNE1NLsaWTt4ApxCg
bxAwgCGvuhkvTDSw+sMTyxfB8n9DxkURoToWBNqZWYWbEXsrURQQOQ5W93j/
iM1yusyzGlg9lUkH1ksA2lVoToZzUQbfjU4f5OzBcx7wQJhQsj6LA9FcbsKl
WH458V7VPAmCJztJ0cyvLg+JbRV4DkKBpPlQ2wyga51NKaULZnxD83kndkSM
VvHyYuAhNbr5085VrDS1Jdt983A4M8vfZ4f4QflR5+Jh08QYhNWKc6Hw7qi8
MrI8AKr56nmXIWQRm+RTjwxUa5cq9HxVATwwIf6m7UyG1deN5hDHcU7d/kuB
4o6h+Z+cDbrbndO46zyOJ4dGZpnhU/QV1ngtal71hPD25IwPgdPBC4s7YKvG
5mKzNMMvOr4QGiK/QCDCuFKuIb9rtGC3TyN3DXFophzBw+t8glS7s9LdU/v2
OMX8vzVtpUH3TffJf2O6RuO607yq6lYcgmgdN1t1dn7AmfMnZCcGoZY6ok7P
xCkaswdMA0mPVnZlANc9hv7g0OVPWQNdAX9RzBArDW7S08mTPvQqa8hXzi/F
dk2XghQxnW3EA4+8RjC10wEzRuy7SzNIP1z/PH4R/EyYWEeKOVHli5MvPyGy
FRQWeVCp0FXuVLXPZuItz7rJouyoOUQZobqIr1+x59/gAv12+vEaoaOv91Gf
Y1F7jSwj7bpqc/XTl9wOlq+kCf7GQW8V86SaroP5NOJgaZaDLCzzzsAV/xgz
ypG42V2L27sN5fQhKV28TUVnFBVuVC10J4IS54Y83NDEjIDR3HRazAHFye9x
NFRAxeWTRYUN71xCHTGlc0Uk+k5dfweq0jpPQF/quztMtyZ1l5g0//8Qunfm
bqSMD4+ozkBI3Mg/SUo5SP+SHv2Tf/JX2BH3UwajeTXASqePDh9PJs+P90eS
/oEfvphMnh3vw0R2Z5Hc5MUszIF+4QgwnP3No3V3Wcc9mkyOj/fTeODnk8mT
J/v37MCjBrtvwsjyW8Z2v2B0zr4RMm/YzJLf7xmBGlX5yq+Pf66xhKn8XeR5
bj+A/5pVqwQmED78AVkxfUBf03aE32OElJHrboy5N35MOg8sMwft0JOk00E/
x4d8eaxj8+T86PwkGl8e+Rm4R/EcDp8lvX52TuPo+B4oks22Wn2f2TQZ9r33
hk4P9nnwheVqkYevUjp6TqvyJ8mUAQ//oI34CWZQuR8abDQQw/PlwPT4eW9y
4fG9d+GYrsKO7C/4j8Pa9ObAHTm6946kzd0YAzDCROkG7N93re76m++e6fW6
e8h+f2O703v2mxGcZWRmN3I3o/g5Z6lNk2To+Q/ppgSxEDOqIDkaziWL+Wq/
+YkeJ6A232OU39W/sQS0mH+287k16H+epkc/Gui44aWBvvFpZJ/ciynJUjXG
EiZhB+HX8j44ABJ8s1mMUZjdOCwbPdXkwP2HP6SAfPMSzVG7thMNEA94PaaY
SZr8t74EWXeVlWxZ/cannKYQsJZvBAsJkx76Jwcgn8D+PwYabesY/idt9Cto
dOga+dXtbuS+kjzFg2ve3d59JRmM79+JXgeDX+3dg6iif8f3sTKP1GElAJk9
EWwT/TZyjuUsyPEFWR8Sw3k+GC00+OJPwVem/wYzQGbT7e42492fYOQjJYzu
vmjWqIzpPQ4FYODVfyr3agMuaH4b5BqAPbFldk9XX3g8gLAV1t9toC9cCwQm
25VuA30RYRpsoDvRayAvuomwB/YwHmHsWmJKbN3R3gjywg+QPoMGvNNpvwG9
iD5P0+fQIJxBp4G9cI1e4BoWeRr/0zUs8k7/afryXojfrOnMA9PMAstu5ohQ
dwMLcfg7SDf3ofFqVlFegQcP9n/ae9Puto0sYfg7fgUOe57HUg9JE+DuTHIO
tTlyvMWS46T7SfuAJCjBpgiGICUrjt/f/t61qrBQojtJT88c63THEoDabt26
dff7JSv8v0lW+Hs40ek8jZx7+e8g3eAjEfaQ+bR/KneGT97q+laP3Oo49j1I
9mvUUb6lvh+xCVBIE33glBlwv7mTef6cwjz3LNz4sNnO7CNlvPNPEAD/ab5q
sMvUz/YreWLgRPV8FmtqC2wrHZm6n3vFLbg67X/8h+lonE5vRZzaejcWPye5
6hsGX8UbWLhw/fTnRjNYTtLsJpmW2pAM9rAi3+MunZ+9Pj1/e7wA1jkFOO7c
dbZJ1o0ppRxMruOGJLhrTGO07ccLIvfB8L6NzW7UD9GVPMwz3drCI95b56HZ
3dKzf35/na7sDt+xwcXveYtF3ql8ee8uV02hcjPulAbFdTpPN/Sx0A6fgOw+
cqQ7Y/FscF6MR45gza6tgAGPHGDk2pgvqF9uxQM9yoMw18qZSl0pke0J5Vtq
TRInQHhbW1hG7tUC7tTVZrFV2itPBI0OrPZH5fnu7WZcS+/OBsxhm7wrd35L
mQYi9/vCqnVp/CN3TNUX5tLB2/COtVZ1kftCbsqqZd8xC/7C3nx4ixYA4f5I
F/kvCrwX3bAl+BS7KH/hdEO37x14C52gVePOLcIdTVZXJMHf9+H7eLWI7+8P
4+4AXBeIHdtvF/7hw9mYJ+Ps/n4ZFr7n4ar0xzDocwcyiCVmWfYjfcRfIh7I
ktye+JF21ia2yizIclXyiL7DvXRXoiy9fSTigi7BGU4eyXgoItxFGqXetKWL
H1FbTLaAb5xK1p+ANNq/vna9VB/mjTMP/a1F7nEiW18qrTWxfP4jxyyANg7K
9szRfLiyR64kQDfMl7Ta/6PSaqtZhlHP+VFtU7R+S18gKgeocXIsLhXf41tz
ZMMuCceuqaTUgN9Kk7CLwrFr9Cg3oLc6RNhF4bhSL26F9ht6LOShO3QbFJTN
2gAf65R6uOiyEjO3hngi2jFqQCqysv7SaTAdX+ArbdAmvUlOD1VYtL6lFmGv
w2KhI9QUG2hlUxmhS/vgUpnyPtBbbUAkq1L/7a6anlMTOKGIG65qoYwb9Fbg
yg2KqoV8A3ybqQKFG1SoB5wG8Bae50ZwJdXylOitIhM3yBstSmC6wZe5EUo2
i0IDeYltuEFRhsw3MG9tg5JsUhhB30ILbZBntYsN5G3N1wYFRU2hgb519sFz
XLLJvf5MQ4TYKG7M40hr6QO+mb4G+cQ+YrKtd5bzxpB0fod355ZWX6OjReHa
uOvr8iWT67wwsHRfuqvubFF9u+W9DL5mqLnP2O+0kf+MbgGqzkIPGqfkzuBC
lBks+6D8iXS8rYPc3bAFcuxRf0cXdP15BT/9O5HCdmiQwhmDM6NlujflNwjo
J7A1+R2p/m63DaG2+Q0pPVJ+gRjxR34NZlADzK0hLOgXGIoNE+x+YlgKZ6qV
LHF5hxz4VDWoYmaQWbizowqOQetqUCAk1ZcrZvWk4GKJKMr782BWQ+54z4n2
2ldPq1emUJ0nvlK5ioOUF1XLFjhZcLnyAA7mBA5KbXvnUXkULG2HK2jCV01+
a0Kq6PkT53ldyiNLru3nKUVfuwX2bj2bGhzj/OZumqe8j1AxmYItIUHeXG7F
vhFlEbup6oqSyPyyYRuY9Su+ozMTdukfAksTTTB/CroEViWikwzKF5tkSuEP
uAW0Onyfn1HdySZIdTIkE83Y1pPWlKYEV897hkk21cPXDIG/a+1t2IVJLvfH
RNCMvX4XMj+djFMnTcOCiayUIn9KNTH9F6tE/co9U79tvEK/vIsUA9MoxcPo
3ITVi8aQo/HcvpJYAhq0wuIN+bFfAPdI8V5OiF0dFbybWUSBhZSGdB1PLhfp
PL24tSWTyOmMAtg4gnl9STVWkgvSYnCBRZqunSh7/Y1NlceGFkLNZQ6pdKfH
5WmNXw5ywz2HPQUaxCZBWoKtSUg76iZTyWTfOI1tZLNO2UrasqiCI6OsgPIJ
FDZM0+W54bUTdc2Mr7J4fo1HGf1FybHbKZVCOcViN1h7S9FNZx7zdIZO9jgb
ClqBiSNir930E4Qcc01RwImRVvFsMy94hNrqtJG7vYt4sxbsaHpnyCqhEc9k
X8XEBu6omspcck6arTKhj2X4kHRNeEMpQ7ZBXzKZsAMoLXkVo2AruZj4mOlU
5EC9WGr0wZmkGgYondvFPefFGQperh5rE+yuNXCRnH2dmHEMjzHjaIkLCnN0
widyIcRXMMMEc5Yyul4mF5eSzLHYUcaAcWq7x5S+JT+AUp0to3DOwBjOBDkF
bxnDfC5DcIgWbokJDhfH12YRXhLOcwfMcvDyz964kTSUImeFSYuvrjj4aXGx
AVbidw8DB2BJndvssSYvl19KcH3rDvNO/L45PJbsFpmp0/rtG59lX3Nh2FCt
zUJzc5m65lF1E5OOlT4Yo6tx/CGhoncLM3l01Lab71JhCTQj9xYOWAOZXCqc
u4Wmi7c3xcHRqrl355ximvZxHC9K13+OBtDBOtOS6k8Jbc05eoZhGC7NpWSV
1zFfSbaqlMlLzvSPwuRYDWHTVubyaHC2VIIP5gbjT4/nTqE0wPIVpQOfSiAr
rzLTmxuaGRIieS5U3jZFEDEldnrTMAXj7Urc3E10XkvflLOLw3HkvbxKxxSQ
xfQM4ywUEgwXTuqORQtKOO/gOy7S4VCkqJap8eXkhrnV1CBI5Tkxqbmn5lLZ
goPW04Xx9+NUrhQ6bg+MRu3Z2Sww0bFToVxwzcnb4oR35woc5iDrnH/lfgwf
fvwB8/5zVL4Rld4UgqcmOTBRBNAcGL6pLcBFUYw2wrGeK34j+XK1jDW631Ny
AVufQFAz/rDE9PCYJGmz5oxghrFk3tGkY+ESW6v0Os6qQhs56U3Mi9P0S040
pHPqokUhW0eZEWDYar5IyWppYrVspEFUEGuktSn+oykWq+IWp6kbSoOhhXPM
9baKTCFTBaVJNDnbMt2smHLbJFui/KhUfHmdmhSed/BBSGqLeZukEnJlkZmp
f/jqaanaWZQ1kqyidiyhwgpD5RblTbQ0WwqkXSPJmK2ifBYUgx+Sjgf57601
cHh6TvauJcxvjamQNC0RiZIcrsqMtuHasLWcmaXT0MgUhczPhv44vHyOGEUS
QkLLLPdo6SUd6VLdP0w6SrGYOEpKl5aUZInWVYNTXW5lZW3uUktQEWO4dD3R
4IoZKQ9Ke4LpPDO+DelCScfXFB4qAba0E5iz4lJy4s1s3e/iTtcVrioc5YiK
gsM5cRrG5Yrtun5apM18XxHiHE2nWSEa59qUQ8TntbxKQi6JmpHmc8kHNO2K
pFnRwCTS4zhqjbyK4bbmVfXBqVua/jFWTcbEP3hgMXcyh9RrUgkSoPMCvL/H
8faepoghS4vmoicJkeKwmWg7F9uMRWM3Pjb3DqRnzZVQ04RwGM+3FBtC7ZBz
Hh1yxfZ5vKoRDGpnOZjrhgAURVFzpQUCbQ0inbuGuqHk7uoonEl8F9/KOPw3
FQDhrDJ72T4PYgo8225u6TDlesIUCZTyIcrrlIot6ybpyhPnqXRllEi2u3xt
pXVpwEVFX7ZEEtP2Y1KajDKkuITOmP3tGJAgXT0yIWUJZiTgpLQSPu8WhbW8
BKdKVm1LDv89/TqysqYtV0ARcE79DrfStKEMmN+cZhuZ2aKGKkvrhaOGFaKo
ZIozNZAt02tTi6zAUOvciLMljnkP78jYJEV+SEkLFvulCVClkZXWRudTGoQt
kxjH9shtoL9rW8DTOQiSK7kMatVT2ej/N5RHeE2paq3gLWGyyN5MOMOU5gqD
VZa61VLfNtmWkbtwaxjn8iiXmQNjzofNFFQelqn9FIuK+Y1Wj1ggBt7cpF28
cQOcTSo9vV5p5SglVDXj9FVSElmqkwEzw93g2Sg2YvhnjvSlWiVzFCl7Ha2N
Y3y3dUXIi+qPzRVV6dSx7XQwRtlC7pH/HEmleeaQN/sqD+xHfo0N2f7edoq6
b3qEvXhEti4HbwnP/KBlv7IUDAjYI5dPwk+KRPaRf3p89hiDwivJLHXx8eOL
Zbw4PYJWcH7XhykmVa37b9/mUPbtW8/7v4txtvyqCBcsmFYNFsSF14uEYl7n
/jFnn6CPS4AiKz724qLmFnCE3d6fCY+dF36GK8+ql34WXyU2dsTXL0vrFmeE
nVfe37ryq2j5p6/4W1UDvDh+tm3T3W+2bDY7VNyB+Ga5g102msP4KXPPHwYB
/14QPEMXj2oQ0KtiyVgTTFcBEHUY2YEWhN3hvxT57weEpNW9BxvkK5Pdmvaq
AhDqu7ALKHrb6SIl8/jzgSA6r4M0XVev/7SqBhLpB/ECZO1aJV0QB588GMJe
uG3BMIV5HC3+dBJwRCrNM9Kb3rNkUa6iNYEagYiJchxaZytWrB5KxRW3t61Y
k3WhcuNfQ/CfCvOw/ba7iLXOnwnqq1qrca7aCcs7/600X+qN3b3XtsqopknS
5CxVy0cXP3UX2wkC3a0QwOSAgAAv+Db6c697m4xOMt1sxwMVRiRxZj6XXTUf
wM5wO4FjO/vzxyIEipnnZMQaqeCj+q+946IQBW2fvzj38zLX2skp3/RN1Rnk
2B07nBgTqCDLrYge+3eSXGPlqN4C65vwqyOAxVatzsUKTMETStEn27OFGrPj
YWl7/vXECV1xtrLi5O9YDRPzrsx7s5fkzmvbLAQZdJF/+tHD+xWL00+3UCGb
cj7iy3VyO6neSePgufNqKUzpT1/hqWpxX2f3klqj8XWSLgPprVquuKf+G6Dt
Vn7i6YvRFkbCVjknw4ckIaR0r0fJRbIGmfIpaYqJxxgt0coTzSt5C3K63RkK
fyzzuJWQvaFftl8i6Per+wsfrzaLhZMgmpM5VlIr9hjeebn/Ci7i7M3dcgKu
V1h/XPLnLXerzPDfvGJT42KLmGiqU4j+TDNyQtNkkWGhB2tS3r5+677974fg
Ws5jCwDiKNto2k+D6HX/Kr5K0ZzkeoGx0ZGc/u5HCOOe/u8HEV4zcUxSoHn7
gdDCP2jRR5dVUnZAH1cu3KhisWYiZb10NVDUBf+/DSamxBmd8jPKiVQ0y61d
s5z/8S+qMJUjzomUPnkeuc2SVVjZTYKDev6QRyezy0I/aqbEDFbjyU9C6sLX
yga7wxQrNUi6wtjtNeNSatSLpHeK/KDdmOLN5B9v0HCJLCY6bYA49Jzzpn78
yBWGsEfKK4t/sMktS6no1kJK5ZDbKVeshHuu0A1cz5zEWhP9Ugb0cYTK9Gks
Ku/C7CSZ4ejs8PSUQ/3ylQ84FTPNh9aQ1a1/DZVz44J2yxXyCGIdum9MysNJ
mnXHTA+D5HT6mM3XihErlJCKRbkvZaepkBEnz3TM5bDz6VjqEzgvaF7sRvf4
LIAd/A15qPiD/1tx+/GIwNM8Nv/mQ4Mueb7/5sNWImByP7/5+RIjv2mR7OPT
I5BLn++I2agA3qwW9+J03jyGmAgiC5cIUBQ/Ov6BBj6TF44pekOZwWuSUDhf
Yq7W9DkZNVW4aFMeWli79ALrdAhTOSygCJRXhhjx39ATLpH/KFsDrJK01FMR
vL9xzkN6V9Sv39Hvtn1COoAyqsY1OMUeyezFia8FfuLPT9GOWO0ILSSV+yWY
TfKsU9ABq28QKmKv/snhyZmfLaMJILc5F+qLaz0DCde9vFeCofW0R7gGggf5
ZZ2S46ivABKjYsUmYcuDo14rhA+5grID9gp4mOKXv3HUxkssiTq5LQRuAFIv
+cUk9xxQG1n5SBKxi91WfH80B+saBPb3nG71ZsEJxqU6Drvce+TzhvbVeskl
SlQJOion1JlyVTKaT4Ngu7pGgUYrd2m2jrUyFI5Y5biaoSeX7x+r3+INjuRJ
hRzyj8EM7EI+86XoMo05eZDJjGil3mYRbaBnKlqDSIPTxpoLEl1B5INqotFv
W0GNR2EbuEfcCxWo4CLkVJSpBIymP1rcakr2QhyCR3ZbEboyU4CefVKxionE
ZxBWR64/r2yauAF56vqMtxtHL0jdJKlwb46F1LPXHSfVELf1GDswQS/cMxuq
aMFOSLxXWbLeCGBo4ddJOkdR2btIgSwsuGqarh8P9WbOmcuxBgtnRy51FHFX
uApPnAHd8nITwWjY2ekGKxmiizH69d9kplY8+hvoqMbjJmb/sBWMLS4UplIs
OTZHmRryGUzGGxHdEDyZldWtrYAX5PzAwE+c6bYTO3Hf3vs53z9x/fPI22EW
39A5YoDZ6gMLBQufHjK+iZs/7hjW1sKzSg/YOcG4FzMLtZICHVJXnBJPAY2N
nQAShyhka3ElUxxabtYe2VLtCeHrj2D1SLO0CxIxV6BVkmA+eGEkfFwN1uFe
GL9Slikcn0cc4SGN0/Sl3NUtb9WKy6AiAlwt17SbpnSg/cDDig4TmBus4WIV
c7Vl3887AeqLzFaiB64OHUXH0eI9Ei06DitY5IqwlN35YDLJxeXauGtNENlV
KRS5U1e42EemeI06AudOMHnXf1gX/PThe498AH32bLXtx1wgOBcV1Sxshkv0
mInLB1HhEhVZMnKMXKG2x3PmTO7Lph6EM7P8wAXwOkN5PBSHhZFTsLjgsK0W
X2FtbrXh0OkxVUbW5IKIi/Dsg9yUKyaZX+MYnYkyityIMJw+ncXFWDIiOcIR
UIp4GSe3m7bOp+Ownxla48sp58vIOWOmIopnAktKpwkrVvGY4mBYgTSIL551
whF0qdsSHYjGHNyTk9abvvH21/PnXSfAysr5y4FC3dxhUA7LWsT2cmTiQvTB
u5inY9qqjeECo8kqzbKcmCDXq9rwtl+seotvu1wfl218OBcSyKREkhNpCODM
Ui4HqA4BRMySBftg4y3kVRlGDDczj26Mp5ncW0BW6WJThRHs8CJTyuYyIjaM
S68d8fklvQGXaMnUn5ue3zMZLq9l+gcAA0EibtVad/NuxnEptimPE3eUoymI
gXThS9jG8pJkUia+lo7PuLK3goLuIfHKy+S+ysGmKcHGVMH6pa3HixBRBEFR
Dd9vwwfkaWnFmR/iCbxC/8erGM1YSSZcILtwS6Vsp+7vHl0XmUbweUYDwA1q
pkZ2bR9zTCN/sE4evlsn4uOmbsSOGy+Qv/Pid54WEX1IhTepOlQSY6lupCFy
pWltZroPpAKkSJbk7c4lx+CJuF97QqF1O4l9E4/yZGHjTXWfqTG6bK8T4gd4
nq4DMnxBETAeBeiwokXLjyozo4OiL+gaY7r20s2aCi7k7vB97r5U0BrJF97v
QK7QQqjRptfxrXNSG3JSb1n/bA6qFuFMFtEUDs6a46bRYf2WpQfmKen64aWC
gAd3txVY0pWYOFOqIo67ZFaY9wSOCKEXHN2UpROCmb0aBM5Sug4dWDeLtTdP
L5IFLl0Kgq21vgTMRnw7KR6gvZo2lnTdrLnOB31i1zlR06wyYgoQ3uh0s5rE
XuqOgbWrFjqPyhnzdzLhRMpHyfe0TL1cKEwGN9li9j4zq+kKXuDuRddYZ0Li
AGHvKPabAi6Yy13F84hLcdg12Rqq7jGiytm2FHRdLlI6HZnnxnsx2jH9iwDZ
51IJxARTZyoKrVebWAj2nIm9VCKQ4klC8NIVQ03qs3gMVlwGf05F76UYFpW9
Jmb4Ko614OjqAn4VkpqroIUUp0RrkNRZ43np1lPT+ISJ2rlrLc+TPCvMOjV/
BrZIj60rqy+DwMvXeaSg2Fsp3IvdYKSdm2kBt62O7MqS89DNbxkDbL1MzzlT
5WsqpyxjIv9dTBTeJLH1PCLwwEi9J8eDNQU0lSQQCpxeTB/iRbQg7lApIhYy
9gqfO4iLdYb4OTH1kmkg3xWTi9OFR2yckgzRvObD+13ixjSE8kToUJ5ZQBaj
6zyRRgl14iXrl3apecsabEE8nwlVhrFnG2dsxFIZW8kVVnobzzXOCWRgllNo
R2U7MHqPAtu54HJmykljd8sq6I9jSq5KHtmCushDrRK6Q/OZkresx9Prxq4n
ySTcnUPmOBSMOaViB9EC2gMtgE3cy1Qp2uG6U5SGIBeeX5Nva/t19eUrsmKl
WRrBU8fJCRhMYDwOVKXQKoQRgiKdpHMu0YkXFeqEheix7rAMTLz0Ca+0hrDE
8mZwYlCKhHH5jt7jgCkE+j7Lcw5aYPwx1jjLNCL0vLBAPFfPdEjvFeWqoO0p
fPcZQKh7Jaghxi8jIogseKM0QGaQldRmvIqnSWQCgFbC9Lnrd/muGvZOaesw
n/W+8kAmgIUDGXJrYITSL2ETsF/AzhhrhK0AJ0le5AgpRDdk7Ty8OnCqKPlt
4FTh1QqTXDE5w2XOIwp2Q7GpHNiLFdeuAK5YUBOZlmVKh6gKrwSCPApds0pl
gOPBKD46rWxaxfv0GcAnNbkbuJmeW1w2NilTF856jIGGRmvHWKUbyfUUE/Zv
lVw2xM8Au4jxQCKTbmlk86PwOSe1kSIdzUhvMM8bZRxZf+c9VPdruatMIMcR
W3NUc26WiJ8LOUaKITkh5vDF2XENQHaWXCWiHnHzFeUuMxI5MlHfE88NDfMx
7mhGBXopWpAJsh/LtUc6G+ZFmNLhTPzoAjVYa7nOaQ74hdBZwUUF8/jWszpz
w9pTagwO5LR8Oll2EBgGsAZEUebJvEgt7SjC64WTpuNrWT/SCK+S6UXsoWVy
szC+O1qdzSF0wnnTGLCuEUKL9RMS1+S9Oj588ezZ8fOj4yNejanTa+Yml6AA
rm7kISFec1IzXjicJJzKFIgTcaW4rUVBzV7MclV7enNrjHlszAKeV40QlrsR
uVSq3DJGPCGMGM2xdPzFJVt4XLdE4n904owiJs702M5u78mb4/1cYiyYzQUc
LzxX8PJsPx/OmtVdnUmuBCqmJcGbmmfqqcBH8OLj90y1RVqglOwVhVDgeqE0
Mdl6dKMqMIXSGnuaLshBDEcB4Fhe1ObiVAc2lhNSrkv5PUzegKyZfUsb6zZz
ghH5IME4WPDQasVsW87ZJbMuRVezlYqPBuEscKVIalmGI+qNpatyMqQSceSJ
UL/mHALgBHMV4f3cMTKnqGKa5sqQxKESaG6k0Dxr7CYbWdhrghVB7NvJ9YTX
lw5MxIvXH+W3VUxERlGwB7JiumY/PcTuGn9ASY6kHfJL05i5aWT9pYplXZNH
4bNMsZluVI8EVeIATD4Zyl62zqVzSsWak9/7GFUJ7Iy/V5umN1hgN46u7Fe1
fYeyMr13KYEGtEv8qSd6rfK6qjZNZ2emS9mJbr2KeeguGrIV6UWpDCBf7Hi6
kCB6XB5bSXgDbgiqzcvUBFCyGTf986dn+3XPplkBEG6u7G4ZBjLmuHxFjQRT
qsAsVhNShJNZh9HVWYzUrK5ais1kZ4taEhvmRc5JZXFjUXUNuVeGhTROo2oH
NXSWa4uZzFqkZnqOC4duMINavbo1X75mWroRIumaixl29ZcNGyQFfGtNrcJ9
sbTZaDT8cTR5jxK3oV8f/6LJb0C8fobKYpMMJ2KejzV/pOuO3FTbjg5gTAk/
nJqvkan6Wsekk0j3Zps1kxen3CsbbHgM0vbcED026WFMn4mtYOtoRFi5TZc/
MXEUns3KM+wTHyA1V5PlFWVtSdYU88YOOviZ0yvenciau/mA3B7YNpylHLIN
X78ZvXp++vzxI1HqmXY0/4izenAmWY0IRmy4jdc2ZhtOreQO9Jw6vro/kkKJ
tAr++fGxBAdIUj8nJQZ/4RY+J+TBJiwa8z2VsTMSeWYamdnuHTuWSXI2ip0m
6EAvDzKTYEmKvnoPfTO+1CKXXiSJB3fgzA66afoPPY/ThT8U7H3ouIAErUf+
5YNhZzAbDHqtadCOOr12/KAuDfJ5mOFB2Ase+e26voobpfKB5g2XrsNHYS98
RNow7dbNUU2fhL32Iz/EbrfXv3tI2gjyk9UVhH1o9ve78vzf+ZIAEAY47GE6
ekmejcixo5F3RG/vqyHAPzgzoA6bJfE7G2Bf5vTbzs0pnYSgJ2XRYKyAnbu3
qWIEhic0JA5W0rD7uy3hYQEZyax7wc4ejIq79GGSgaEOl4mFOgHimdxpHtgo
5+1OEWTMribIBO7Qx0dA6Fo7Cjul2mT6yf19AFI88oMt7Xftw4eDUhtNrhiC
L86K89lpHm1cTDNoblnNTvOAtfz9Y7s8mzZ0HoBgvFMn+LOtk/DTzzv20nvk
f7zrk11nEvS3drRzH/gTdh5h8b6r+O06jt+2m/GHuPY5fXy645Od+rijgx37
uLuHHfq4fOBHvVar12m3e0E7bHdak1bQCnrjHWhXJ+i1e9NeN2x1O51uB/7t
zLrtFjxpt8O4HezQBXzWaYWDMAqDQTDrjYtd7tIFjRoMQph2VTe7LMRMnroJ
W70oCAL4/yAY9OLeLgvh8bqzfqfXxX8RAr1uf9DrPriz9c9b3/7sfaJ3mipb
eIBRkXmwah8immdvJEsoXGLEwpFrKhtN0xjr4tCFQ3RWCTxGW6Cw5ZLsOeW7
JMP9Qkgx8Rn4g30wdweXnnRCnEbQHg7CcNgOenvKdLxmZlkmi9caPrdkWj4D
7k2rGdgzyoRY+Qq5YqhKgqUFRZpU/Nrt1CWo8p1oG1yy4DPR3OXytoVYtKf8
7MxPmXY6LVfpPLZ/FVsinRYA0Van20pAFn4+7VSn9l+0gtDdks9bxn0f/axb
qeeiNIHeo9wym80moXPpO7pXcsPxx1kVSKoujz9kPZ+8T/tOPQMn3hx5w4MU
hCk6oOzEn5cNVGxHOStTnaMNOUdB40IyIxpNFJ3maJxuWC+MyW3r/tgMk5KL
5lxcDZql6WLrf/7nIc1cfNxcaYp54pL7AKXeNX9h68OXr9nKLoGCxmPuxZl6
KN5oBl1jkCWeFFsvXR08SZ3lFW6f+e9fN8OZHEqnMXtlFBNKsypVF9/U1i/j
1WW01NzGZOHSnPen6Tl3XL2WP2bm6uIjYxt1HCW6Jk8MFXft0rh19QJdrwxJ
Dr1WADWdsX/fzL+NOceAg+CyEOeUAI1aPBD3itsl6b24tThbuAlyfTfvmd7B
r0bnZz7pzNB6s1kxpmpEB9sGjcqIXJySafm0Np2Zf7YMP7BSPHlL5vjebg+b
tILhYNZtRZ3ZrDdpdQe9YKI99NqDODIdfPtGsjhpL2F3gB0MYNCw/QAF6NNj
vBRen2oOW/3e9sDZkLSPsDvEHrqd4XQSTyaD8XDQn/Tb/XGnE3das/6k1+5O
4sHdvBP1HGVUAIJwhtInMWvz0Jn8Dzm+IuwBwP5eC5ptkqsClF7EtBGt1gvU
BAIaG7ZBupEwbQvHsG8uRIftOCuN1kdeApiObrPLo/1ONQlpX0zIU0MUJr6Z
qK3wvQe0cx8bwm4H3bDX7YSwYzvrdnxHt/PizKp3OEUJNShcrCOLvHjTXKbo
rkSRBayXdy6ZZDXZJGs5hZYPqNGDmv/IL13EeSQUDByO49mgP+jH4yhox+Fk
MOvF/cm4Mw5mnV4wVBTO9eIgomBhHA9as27U602C2XjY74TD4TAazKbReNhu
DYbt+7CwjI28LgGFi4+5mTiYIkgZNlsR1hT9GZVKBZT8z2wzmyUfHGgBh3cP
9EuAz9/mLuT5ya6g7wUgKiKuvDx+LonA7Te7rLTTwh669J8e1rPEJUvgqdCQ
vTGQUNisfXfJUp3wk9YPQhYJdaEv+SInEuzobG3msYN5iqr4siY1l3Kf1eVL
p7MI5z/GxrlVIe/ABVEa400yFxtIzmb5Qn1oXOdWTmuTaR/kP4EClsv7iMl4
gbEXwrWsqO6l3JETPFN2HmVnDJOnH+0AMkKDKuRpMQfHC4T6YE+RyJ/BLbTf
9Dt9qcvMmcTJeEM5NfcGnF5ODO1Bj/+kPvCe2f99CufffVVRRkK3B8bWTtgh
9bL6+h2jDWO5wtTxEkv98E6ySKhuoMqvjInq9yq+2znFtyHt81v3+ryuuMNI
lsVLxcfDgwH7xG4Vr7KHcFpMua2/iA/kQ/rv2Rpt9TkbxxdTwxdTQ2XTL6aG
fB9fTA3FeXwxNVT2gT9fTA1fTA28kC+mhi+mBvfni6nhi6nBfvzF1PDF1PAn
rfuLqeGLqeGLqeGLqcH/YmrAny+mhi+mhi+mhi+mBvPzxdTwx5oa/glLQymc
gsvcUYSzxnTi7xl1pkiZzwPJvKAEzjL7zemJkH9tEj/pdlHRgRafNfuTrpKY
st2C4DXZFPKfYgduxXRNvOAcEVtD/sVZnUPRhBAon0pKjfzUNFGvFKe4Q1b4
fayqzkCTbNEtWtiIilVQfJLlXB5yqkbEx//r1DvfZCoY5UKZ7O0hwUe0Cyw4
YW5FG70mB8DIJQY+FlxmCfT8QVbcTpu6gFLYgDjqXFLfPsXFZKkvM8CZSpJB
E2m63klO+0N2YWRQHdMFcakHZw8ouZWTQQ9fUWgUzpd3AZOdOMtVmGEKRoqh
IrBxTUQnfWRkz4KGwDP1ouy0PlnIWL+XmNC0y9slRlmuRWjRJZg8XZRvEuPD
6CRrkV4Tw1gJ1D8IlXmemYRlAxhGi+kKcwUhJRrlbs5yB/+bjJhJzop5vxGT
fv5+j6lyR2Ojf4e58nO62GKy3KmLywdkcRi0+z2Aarvd7rTx995Oo7cmrVYr
6A077V7Qh+Y94Ph7Q9S6t6a99k42B7I6hK24FbTE7tAHORS66fS7IIJ2+uFO
nfSGvaA3CVudAJp1YB5TmFEHnsKM0Iyw23LCHYSL7TYC8wNUaowpM4WlFa5N
d8XfaWMeVpQV5iyF+sEuffgqKoN0fBitxukiWZNZ7XP7QJkB+giaYa34wc59
HLKm+VHFB7v1AT+108V0gwQCc/1v1imrTe83FBpJP/6wTKRQhpKtDkjkPcB7
YEv7xFuGrTBoBK1G0D0PBo+6/Ufdzt8MzTBJkZCF5z560kHQbw1axQ56j4Dp
bbX+Vj3BxgBOUAvkvNosweLQVDWgVmksoE8DH62tD83V3mgAycEw/LdIuIvi
Hs/4vWNSCYQqHh/CP/Ecc9VPfKCumFsG8e0DMCe3FVOFXhKrzA+Rxrd7vX4X
jlxvNgTC0Zu0Z91g1gVq3x8POyCvPSiv4qEMRf00dC78DA7LywZIGJWDf2hM
0nRFE2jQ4L1uPI26URB2+/1JOI7iQQhUqD+L2+1BvxVEu5z3oBVFUbvfjYPx
uDvuTuOgNZjGnfZw0hp0u0H1Am6dmbRxJkHcDeMpUJ1WAEgw68+Gcac1nc6G
s3YnGLenu8xkMhxHcFtGs37cmkR9+F88jOPJtNUadKbBcFIgS6pqcPU/8hP2
eoQhd41aQ5auJojEPXDhVZd/dbeh6p6/56Y3LasvfLo8N4vSXZ9vdseVbz7c
coXfCQD6+V90h9tbvN9u93ccs9dt99ud3rg/aA/kHh/s2LQDtzJcrEOQ5I2T
wY5Nu2E7DONOh678Nl/5OzYNTogzOLacQW+461oreINdmxoWAriD+7FqJ/7g
bgZhlx3fyh3g5bpbBy5rcESsPxIFfrl7B8IXvAqbR+Fn8RV3MwW7drCVIbi3
gzu3aatZ+JOXe4W/u8ocU7bKlurCCkXpubEPl/JjSPYRykFGSerHMWsvQcLF
hmLppcQkmjBDEEU0s1emUJZTG4zT8smHrK6p8koUWZYnQUI1pVmm9CfwbppE
F4s0Qx4BByuk2XC9XpNMZu1MWksfGdWNqzMRzxdXuWt8V4ymJXL0IFoWAvuH
62mPHBTZ94Xsy7p2Z3y1eaKcbYpIqxIXRtrnabFqxAwkpWgztziJHZiboNcF
gUoqjGW+2CTtBCkB5Ua8dnKFyAToZsScjP2/x0O4WvtLhspuNLWGykP4irJZ
m5b/vOLZN3xRni0qmseqfmrCFDlWnBJAuStlXCvZlwqIVkB1C2T9HaErA5n6
fe5K+50d/aV2+gh//gi/bDvr3+Wfbbv5p/20pb2lxFWEcVdvcbMBjr82qlPl
/Y69YK2L2FBvImjoFEVPdu/FJVKfxzeC8NoTj9N2tzXZlSEDkac3dbw7w3AK
DBrIgPDvbFeG0HFRZf9T0QKF2PGuTBqN34GT2W/Tb8DfoRYK2cSdWdN+yG6r
rTb6mw7aURs9TvtBjxa4M1fdhal3kTme9Tvw76xvfE+DXXnOIGq1Op1xuzNs
9QdhK+jCf1rQ17gd9ie7qbJgOe1xJxiG42k4aceTsDOIwmEYBt04Gne6u6n3
kHEOxrN+BDJCHHYnAcym0x8OW12Gzc67A6w67AXAogu/tfH3MO6DoNZrfxZM
WpP2YBxYmEyCTjgeRuNo105CkHQ64/Fg0oddCnpRpz0ZDrtwNww7k2gnnQH8
jEHgH3b7wazb7Q3H4/50Agg/Gw4+DyZwY5EkMkXxAjBkAhgTBh1cZrgr2ren
7bGFRtSLhtPJdDZuDwadabQr2gMr0Yk7cRAP4kEvBHAMJuF0POm34CLZeXc6
7WgYtOH4TuNhu90ex73d3DTuF5bu/mK7/+Yna2dVX+1FkVobb21l8diD6FUD
qGgDuQHHm1u5O/7kAGv3qOGx5u9Rwt1ZghmRN+zOnVEphrVmRsyEV60s5Ovv
peJuJza8SHqGd/uactkX/wLx/Pxc/25A8LDTvd/DOyR2UZfWwLsIuWEqv7dB
Q71lHO92ATdQ/MOcwO/1jrZe0fn9udc5+vPduj+Z2ZY5MOxwFydn9HDejQfb
2Q/acYRevU3S9ds0I1/oor8TdJBhvl3fL3UAyNLpttATqKIRMioVjfydV2J+
iKM8+3a0ReV75w9IAuY25Gvu89rDKgvX4ue212tU78fPbV+8T3d1avN30y/t
Gm/wuYgFAg/VXsmaq2zymUg1aLWGfzJO/U6ksuwE8wmfu6lFvuKzkVL4EGUw
Prd9kSH5H4JUXJu7OU/Gn4lRYRswqv3vTKb+SZbM/BR5s89tn+flOrvylebn
n2Pq6GdHjPrd/J8JzyEFrOts+opqJJC6jTL/s7rUVcHi44ZoUXPh+0YTS166
m/VyIz46P1BO+1hqVkq69HhqRG93fJMg/IrqQHChIVT7N2UOTl1O0y/WtUNH
T66ZapywbJ5lzhLtVnrFVO+iqqTSugXHMOOQqgVhxOepUIMUtZpmFqTa5Knw
p1qp/AcsNWdVosLOTpGHxer16YKjMLgCns5wchlzxeorUWMjyKsqm3I1XwzF
uIkpU/gKp270pTcr2VEu3+fVzlebDDVnPziVBrKa+gW6weumECwNwZUJJM7I
nXqOP1dtN5OzGnCFb0kji0rC2vy0cfrT8+Peq3fKuNYA7gRxel/StzpfoR6P
XLutOrA2HV8g3tDjWoXeT5un8VXCLvnwR/L6jXmBVa7lOfDAf3sXHL5/G96c
XF7e0jx/stO8QcDwp5WcOnwhHDp+lKeXwqqbZz+bJrI35SZlgrtl38qXSy2a
z6seU0GMhuziNB/oZ+jFz3m3dDrramk7J3sHmSfONhLgs223c5vde5GDt4L7
SRncvYuvvy7uefWW53bccTjW1gl/gz/FwBGLc9Uo58tX7CVQc4WSmjr8jZZL
/yRNK2INcr27xnoLcTfooXbG9pVjdi31jxmdCwiEjuuFPa2FR+2zy+MXl6Oz
6OLN4yg9fJ+8fte5vGidLx+/vHx/MDoZHVy9fP3d+dvx6M3jb0/pzbt3vzz+
/vjw8Wx1C/+eHBy8Pzi4fv230feTI/j7+OLq2a9P3x0fwO/fpW+ev371+s3h
0+Diojtp/PD27Ly3/vDq8fSw/cO71y+jzo/v5j82vut+v3y8/O7V4eHbwZN3
by7WP33/Mvr+9ubF6d/ajasn3z1v/zicPf0A01xkVwdR49n18ttXv764afx0
s2j0+uPrJ/N3GwDPr6OXR50g670drfvPx2c/tH+5eTL/cLr55fHsJu4EcfZ1
7vxY+D1NFpsP6ohZK5orPns3NmMpefikVnKIqD15c17chfj2SSv+cZS8SJ58
90PwffL08Mnl+PEE/z59/etp8Dx5MmzCR8tJ+xl99PT1SWv6+Idf4f+3p8lN
Er05aZ2+Sz88f/f6w/NfJ60XRz91oJN5/C10etUNxo9vstOrk+Bvh6e90+Q0
O108D35K8Hfo+OLdTWdx8uzy6fLJ683LH6+fvfz1u+Dxs3eXt09+Ca/f/HgR
dILej99lv95874CPV5WLQPFPsDwCn/B8zYKDKEsmVNFKnleYY48Pj85GWtoF
PlX2gKNRyx75XIyh+KFaPoFE3WrPzGDMm+ij5YTZwi5uOCoRC3nhjanGTy6a
KWW40MMLyxYFpNr3esGeHwz25HBdPhgFrSDsPbgjTYr/0KkTeBlHUyz9IBzt
x093N4yvllhwb1HuQPzNYAJh66DTa4WdUe+gNewPjo5bo84QvUpaYavd6rS6
rV6r3xrwFJ3wcGk/PBgehCfd404f/eFOetDf4WDUCbr9g26/1z457HQPjvtd
5YCHo26bclV0g36/NzgMg9HJycGg0x11e6ODbrd/DM2HfWV4Ry3gf/vtYRB2
2qP+8LDTH3R74RE07wXhcTgMD3thGPRUDTA6CNvt/qD/4A6oWOiY+jsIjZ/9
fd8NGD+K1xHwP1ws5WCzmCLWnUptEaxDQkhgys+WYp1ckznFPTGnNtVunZCB
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
X1uRAgA=

-->

</rfc>
