<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.0.4) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.6 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="16"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT
claims registry.
This claim is also to be registered in the IANA JWT claims registry.
While there is already a nonce claim registered for JWT, it doesn't allow multiple nonces.</t>
        <t>For CBOR the byte string nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure.
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses.
The receiver of an EAT MUST be able to process a 64 byte nonce.</t>
        <t>In JSON the nonce is a text string.
Working off the assumption that only characters represented by the lower 7 bits will be used, it is recommended that a text string nonce be one seventh larger than a byte string nonce to achive equivalent entropy.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="swresults">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>1 -- all:</dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>2 -- firmware:</dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>3 -- kernel:</dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>4 -- privileged:</dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>5 -- system-libs:</dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>6 -- partial:</dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>1 -- verification-not-run:</dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>2 -- verification-indeterminite:</dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>3 -- verification-failed:</dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>4 -- fully-verified:</dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>5 -- partially-verified:</dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwvers",     260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "profile",    265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
swresults-label        = JC< "swresults" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "lI-IYNE6Rj4",
    "seclevel" : "secure-restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "secure-restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PbWJYg+B2/AqGsiLS6SMqS5WdPZo1SUmYp27Y8ltzu
2dqKDIgEKZRJgA2Allme7N8+533PBUBZXb0TsRG7jopKEbi4z3PP+zEej5Om
zcrZb9myKvNXaVtv8qRY1/RX0x49fvzy8VEyzdpXadPOkmRWTctsBQ1ndTZv
x0Xezsd11jbjPGvHy6zNmzZJ7hav0vcn11fpx6r+VJSL9Je62qyT79JpVTZ5
2WyaV+n327z5Hh41m5tV0TRFVbbbNfR7cX79c7IuXiVp2lZTbUc/Zvm6vYUn
x/i7qeq2zudNaNFsV/GDabVaZ9PWtdjchGdlhY/q+TSfNe12mWuztmjxx/Vt
np6X8GObnrS4rKyFOabX1ae8TB+dn1zvJ9nNTZ1/fpXCjySr8wwmX7Z5XeZt
8ukO9qtYlLj4zH0+valqWPQMNupVevT48Mn48HGSbdrbqn6VjNOihOm/nqSv
N+XsZpnNcpghb/frbFPn5TSPXlU1bPRVPt3UOE2YcVVv09evT+FVvsqK5at0
uVj+90YatPR+AjugI/0ySd/A2W+zlY3zS1EXs9usdi9olP+xyZbw5Sq9zqe3
ZbWsFkXewHqnE9xXOIkc9vTp8+dP0zdVnd9WmyZPz+riM05zCoPDPLMyPSvy
RYW7ni9gN16lp9mymFd1WWR0XJuyraHlh6sT+Lm+JYDc++Nh+uLpi/TZ08P0
OYDjXljciqf43/+9LSb/LvPzy/t1kl5+f1aV1eJ2E3by17zOV9v4zcOXePT8
ZfpzVpdwjtVmcZu+r7KZLdG9oPXMcEM/HB6nz19fRQssizafpf8C0DGrVmGt
fzw+Tg+Pnh6lT549OXzxMqz0b9WMJttfalJW9Qpg63OON+b9z6dHh4cv5c/n
h0/tz6eHT8Ofz+TPFy+PrQEMGxo8D39agxePH+tnh0fWw+HzY/3zyUvt4cWz
Q2v7/Fg7e/LyRfjMRnsJCAb/xH/wn4+/XL045t9tVi9wy/du23bdvDo4yLO6
vR0X5byalItssiqWB+vb9cGsuiuXcAwT+PGnebHMf5hWVT0b3y2aF8d73BXf
6Y+X71+fpb+cX56dX1+cplf/8+r6/E16+PLF8Sh9+8vJ5Or67dnk8eMnz347
nDyePP6NJkMd6BXFv8cMLm/pRmfL9Je8atbwI1uO8f4vl8WCbuoJ/mebPoKe
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
ZXLAwppDnNM2iutm6xKjb87LXpKs4LVFmqU9LJAADoBzIymFNLjyF9ztYorW
b/kzcolzeWLjWfDdbEUzrutOXFU1qTa/WYOkh5K/Ez+pDlizcnUKeExKy8c8
NxYPIk2VZGeIANs659ux3I5519z8oF9e5dEYC3IvJOS2KqPC0ea6q9BOGgXi
IMr8LsU8Y2iUEGgKkwFyYIX54pQAnUSHtRvZEh2mQiI8gDV5K0rzKKg17I1l
RWQtiMCU5jwmfeOmjcabSCjpO5wpkixy23Cr1+JM+l75lwA1UhMDeTqeH6eN
I2BP9NBhPb161JGC36p+YUwN3AHG1lgzQ66agQ+n22DtW6Y8ioCL5pMwKKKa
Z51CF2tyrda6ibLoicSvnlqSWsAkDYjYqGh55R5TuZJNiwU1aIMenZ583+yn
0azCYTQ2GrFahfQY50aOi6TCtqyzom7S26qRtNpOzgTOp0T8FWGvDkC5nk1Z
gXNDVduj06v3+xOJmoVTBzEB/veuaiTVNh7+SQdRdXZ8ByjjmymFypakXETo
597X1nv66F31bt9fwkn6puJko9OiyZGfyFJow9pG9m5J3T1IXLlLsc0FDrPn
gSxxfWROodmEC9PkVMAYbZZhegkxRnAAev0+Feyl4pcsG1/mwCbkDTIGMBEa
iKh9ci/sYdriwAcx+f+Ub40I8eL9/jwoptejiUAzo6daRqr/8Acmp4DVh4ME
I/y0I+jQX6VdbaZNvWOEdbVOEp2Ej9+TZ1aGO8U63G42VoE7PJMY1GhCFlcY
nkmFJpyT/ZNm8KxbOwIm2GsGz3yzp778EjAh6jDwL/m2oaqOemlNkdzx/UAw
0ITzWRpK04pzhdzjKpRERGf3xkylkgEi2L285ss7qoQUs/NKCrA2TknwSVQo
pEu+2Vr9+oGMpJ+CtsWcUWKEcFFdK1qvypsqY58+NUW4XGI/X5xd2vNQ3NHv
A1upm/gusttSmE6nWIPGA9C9xuS+I50O8rad3EnX3hXPcTW31Z1ZdIPWGosG
u1SlqqJRgQW2r6g2jW0fp5ixqACJd7MoQhciac/cpwlCEal/uobRxmXBxXHR
teM3aK2NyHnyxSEmaKU1f5KOeibLbkfU4GN+k3Y7e/708LlU1Wq4PJYmsZUo
A46KlVLEBJoomNAHRU2rEpsGa7ZVTYceGmp8JZ5AS29bzsv+iFp3+4uwOm1l
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
f+9aSQbj+3ei18Fgq717EFX07/g+VuaROqwEILMngm2i30bOsZwFOb4g60Ni
OM8Ho4UGX/wp+Mr032AGyGy63f3NeHcTjHykhNHdF80alTG9x6EADLz6D+Ve
bcAFzW+DXAOwJ7bM7unqC48HELbC+rsf6Av3BQKT7Ur3A30RYRr8QHei94G8
6CbCHtjDeISx+xJTYuuO9kaQF36A9Bl8wDud9j+gF1HzNH0OH4Qz6HxgL9xH
L3ANizyN/+kaFnmn/zR9eS/Eb9Z05oFpZoFlN3NEqLuBhTj8HaSb+9B4Naso
r8CDB/v/s8L/vyQr/Dc40dnyf7f3pd1tG8mi3/ErcDj3XUtzSZoAd+cm51Cb
I8dbLDlOZl7GByRBCTZFMAQpWXH8fvurtbuxUKInydzlWGcmlgD0Vl1dXXul
kXMv/x2kG3wkwh4yn/ZP5c7wyVtd3+qRWx3HvgfJfo06yrfU9yM2AQppog+c
MgPuN3cyz59TmOeehRsfNtuZfaSMd/4JAuA/zFcNdpn62X4lTwycqJ7PYk1t
gW2lI1P3c6+4BVen/bd/Mx2N0+mtiFNb78bi5yRXfcPgq3gDCxeun/7caAbL
SZrdJNNSG5LBHlbke9yl87PXp+dvjxfAOqcAx527zjbJujGllIPJddyQBHeN
aYy2/XhB5D4Y3rex2Y36IbqSh3mmW1t4xHvrPDS7W3r2z++v05Xd4Ts2uPg9
b7HIO5Uv793lqilUbsad0qC4Tufphj4W2uETkN1HjnRnLJ4NzovxyBGs2bUV
MOCRA4xcG/MF9cuteKBHeRDmWjlTqSslsj2hfEutSeIECG9rC8vIvVrAnbra
LLZKe+WJoNGB1f6oPN+93Yxr6d3ZgDlsk3flzm8p00Dkfl9YtS6Nf+SOqfrC
XDp4G96x1qoucl/ITVm17DtmwV/Ymw9v0QIg3B/pIv9FgfeiG7YEn2IX5S+c
buj2vQNvoRO0aty5RbijyeqKJPj7Pnwfrxbx/f1h3B2A6wKxY/vtwj98OBvz
ZJzd3y/Dwvc8XJX+GAZ97kAGscQsy36kj/hLxANZktsTP9LO2sRWmQVZrkoe
0Xe4l+5KlKW3j0Rc0CU4w8kjGQ9FhLtIo9SbtnTxI2qLyRbwjVPJ+hOQRvvX
166X6sO8ceahv7XIPU5k60ultSaWz3/kmAXQxkHZnjmaD1f2yJUE6Ib5klb7
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
TA4ICPCCb6M/97q3yegk0812PFBhRBJn5nPZVfMB7Ay3Ezi2sz9/LEKgmHlO
RqyRCj6q/9o7LgpR0Pb5i3M/L3OtnZzyTd9UnUGO3bHDiTGBCrLciuixfyfJ
NVaO6i2wvgm/OgJYbNXqXKzAFDyhFH2yPVuoMTselrbnX0+c0BVnKytO/o7V
MDHvyrw3e0nuvLbNQpBBF/mnHz28X7E4/XQLFbIp5yO+XCe3k+qdNA6eO6+W
wpT+9BWeqhb3dXYvqTUaXyfpMpDequWKe+p/A7Tdyk88fTHawkjYKudk+JAk
hJTu9Si5SNYgUz4lTTHxGKMlWnmieSVvQU63O0Phj2UetxKyN/TL9ksE/X51
f+Hj1WaxcBJEczLHSmrFHsM7L/dfwUWcvblbTsD1CuuPS/685W6VGf6LV2xq
XGwRE011CtGfaUZOaJosMiz0YE3K29dv3bf/+yG4lvPYAoA4yjaa9tMget2/
iq9SNCe5XmBsdCSnv/sRwrin//eDCK+ZOCYp0Lz9QGjhH7Too8sqKTugjysX
blSxWDORsl66Gijqgv9fBhNT4oxO+RnlRCqa5dauWc7/+BdVmMoR50RKnzyP
3GbJKqzsJsFBPX/Io5PZZaEfNVNiBqvx5CchdeFrZYPdYYqVGiRdYez2mnEp
NepF0jtFftBuTPFm8o83aLhEFhOdNkAces55Uz9+5ApD2CPllcU/2OSWpVR0
ayGlcsjtlCtWwj1X6AauZ05irYl+KQP6OEJl+jQWlXdhdpLMcHR2eHrKoX75
ygecipnmQ2vI6ta/hsq5cUG75Qp5BLEO3Tcm5eEkzbpjpodBcjp9zOZrxYgV
SkjFotyXstNUyIiTZzrmctj5dCz1CZwXNC92o3t8FsAO/oY8VPzB/624/XhE
4Gkem3/zoUGXPN9/82ErETC5n9/8fImR37RI9vHpEcilz3fEbFQAb1aLe3E6
bx5DTASRhUsEKIofHf9AA5/JC8cUvaHM4DVJKJwvMVdr+pyMmipctCkPLaxd
eoF1OoSpHBZQBMorQ4z4b+gJl8h/lK0BVkla6qkI3t845yG9K+rX7+h32z4h
HUAZVeManGKPZPbixNcCP/Hnp2hHrHaEFpLK/RLMJnnWKeiA1TcIFbFX/+Tw
5MzPltEEkNucC/XFtZ6BhOte3ivB0HraI1wDwYP8sk7JcdRXAIlRsWKTsOXB
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
wdKCIk0qfu126hJU+U60DS5Z8Jlo7nJ520Is2lN+duanTDudlqt0Htu/ii2R
TguAaKvTbSUgCz+fdqpT+y9aQehuyect476Pftat1HNRmkDvUW6ZzWaT0Ln0
Hd0rueH446wKJFWXxx+ynk/ep32nnoETb4684UEKwhQdUHbiz8sGKrajnJWp
ztGGnKOgcSGZEY0mik5zNE43rBfG5LZ1f2yGSclFcy6uBs3SdLH1P//zkGYu
Pm6uNMU8ccl9gFLvmr+w9eHL12xll0BB4zH34kw9FG80g64xyBJPiq2Xrg6e
pM7yCrfP/Pevm+FMDqXTmL0yigmlWZWqi29q65fx6jJaam5jsnBpzvvT9Jw7
rl7LHzNzdfGRsY06jhJdkyeGirt2ady6eoGuV4Ykh14rgJrO2L9v5t/GnGPA
QXBZiHNKgEYtHoh7xe2S9F7cWpwt3AS5vpv3TO/gV6PzM590Zmi92awYUzWi
g22DRmVELk7JtHxam87MP1uGH1gpnrwlc3xvt4dNWsFwMOu2os5s1pu0uoNe
MNEeeu1BHJkOvn0jWZy0l7A7wA4GMGjYfoAC9OkxXgqvTzWHrX5ve+BsSNpH
2B1iD93OcDqJJ5PBeDjoT/rt/rjTiTutWX/Sa3cn8eBu3ol6jjIqAEE4Q+mT
mLV56Ez+hxxfEfYAYH+vBc02yVUBSi9i2ohW6wVqAgGNDdsg3UiYtoVj2DcX
osN2nJVG6yMvAUxHt9nl0X6nmoS0LybkqSEKE99M1Fb43gPauY8NYbeDbtjr
dkLYsZ11O76j23lxZtU7nKKEGhQu1pFFXrxpLlN0V6LIAtbLO5dMsppskrWc
QssH1OhBzX/kly7iPBIKBg7H8WzQH/TjcRS043AymPXi/mTcGQezTi8YKgrn
enEQUbAwjgetWTfq9SbBbDzsd8LhcBgNZtNoPGy3BsP2fVhYxkZel4DCxcfc
TBxMEaQMm60Ia4r+jEqlAkr+R7aZzZIPDrSAw7sH+iXA529zF/L8ZFfQ9wIQ
FRFXXh4/l0Tg9ptdVtppYQ9d+k8P61nikiXwVGjI3hhIKGzWvrtkqU74SesH
IYuEutCXfJETCXZ0tjbz2ME8RVV8WZOaS7nP6vKl01mE8x9j49yqkHfggiiN
8SaZiw0kZ7N8oT40rnMrp7XJtA/yn0ABy+V9xGS8wNgL4VpWVPdS7sgJnik7
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

-->

</rfc>
