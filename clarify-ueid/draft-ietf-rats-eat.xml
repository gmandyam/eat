<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="April" day="07"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
          <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
          <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
          <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
          <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="nested-token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
              <t>The following two sections describe how to encode and decode a nested token.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string.
The text string MUST contain a JSON-encoded array of two items.
The first item is a string identifying the type of the token.
The second item is the JSON-encoded token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"UJCS":  </dt>
                  <dd>
                    <t>The second item MUST be a UJCS-Message as defined in this document.</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>The definition of additional types requires a standards action.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two in the same format as described in the section above.</t>
                <t>A CBOR-encoded token nested inside a JSON-encoded MUST use the same array of two, but with the type as follows:</t>
                <dl>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                  </dd>
                </dl>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
          <section anchor="cddl-for-submods" numbered="true" toc="default">
            <name>CDDL for submods</name>
            <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (odometer-label => uint)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 256
sueids-label = 257
oemid-label = 258
hardware-model-label = 259
hardware-version-label = 260
secure-boot-label = 262
debug-status-label = 263
location-label = 264
profile-label = 265
submods-label = 266


security-level-label = <TBD>
uptime-label = <TBD>
boot-seed-label = <TB>
odometer-label = <TBD>
intended-use-label = <TBD>
dloas-label = <TBD>
sw-name-label = <TBD>
sw-version-label = <TBD>
manifests-label = <TBD>
swevidence-label = <TBD>
swresults-label = <TBD>


]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

nonce-label /= "nonce"

ueid-label /= "ueid"
sueids-label /= "sueids"
oemid-label /= "oemid"
hardware-model-label /= "hwmodel"
hardware-version-label /= "hwversion"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
profile-label /= "eat-profile"
uptime-label /= "uptime"
boot-seed-label /= "bootseed"
odometer-label /= "odometer"
intended-use-label /= "intuse"
dloas-label /= "dloas"
sw-name-label /= "swname"
sw-version-label /= "swversion"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
swresults-label /= "swresults"
submods-label /= "submods"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11-1" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIALEbT2IAA+y9a3PjWHYg+B2/AqFybKW6SSol5dtT9qgkVbXK+ZqU0unZ
jo4KiAQpdJIADYBS0jnp377nfc8FQKXaPROxsbFtR6UIXNznuef9GI/HSdNm
5ez3bFmV+au0rTd5Uqxr+qtpjx4/fvn4KJlm7au0aWdJMqumZbaChrM6m7fj
Im/n4zprm3GeteNl1uZNmyR3i1fph5Ory/RTVX8uykX6a11t1skP6bQqm7xs
Ns2r9Mdt3vwIj5rN9apomqIq2+0a+r04v/olWRevkjRtq6m2ox+zfN3ewJMn
+Lup6rbO501o0WxX8YNptVpn09a12FyHZ2WFj+r5NJ817XaZa7O2aPHH1U2e
npfwY5uetLisrIU5plfV57xMH52fXO0n2fV1nd++SuFHktV5BpMv27wu8zb5
fAf7VSxKXHzmPp9eVzUsegYb9So9enx4PD58nGSb9qaqXyXjtChh+q8n6etN
ObteZrMcZsjb/Trb1Hk5zaNXVQ0bfZlPNzVOE2Zc1dv09etTeJWvsmL5Kl0u
lv+9kQYtvZ/ADuhIv07SN3D222xl4/xa1MXsJqvdCxrlf2yyJXy5Sq/y6U1Z
LatFkTew3ukE9xVOIoc9ffr8+dP0TVXnN9WmydOzurjFaU5hcJhnVqZnRb6o
cNfzBezGq/Q0Wxbzqi6LjI5rU7Y1tPx4eQI/1zcEkHt/PExfPH2RPnt6mD4H
cNwLi1vxFP/7v7fF5N9lfn55v03Sdz+eVWW1uNmEnfwtr/PVNn7z8CUePX+Z
/pLVJZxjtVncpB+qbGZLdC9oPTPc0I+HT9Lnry+jBZZFm8/SfwHomFWrsNY/
PnmSHh49PUqPnx0fvngZVvrXakaT7S81Kat6BbB1m+ON+fDL6dHh4Uv58/nh
U/vz6eHT8Ocz+fPFyyeuwfPwpz198fixtj08ss8Onz/RP49fHumfzw6t7fMn
2tnxyxfhs6fa9iVgFfwT/wf/fPr18sUT/t1m9QL3ee+mbdfNq4ODPKvbm3FR
zqtJucgmq2J5sL5ZH8yqu3IJez+BH/88L5b5T9Oqqmfju0Xz4sked8UX+dO7
D6/P0l/P352dX12cppf/8/Lq/E16+PLFk1H69teTyeXV27PJ48fHz34/nDye
PP6dJkMd6L3Ev8cMI2/pGmfL9Ne8atbwI1uO8dIvl8WCrucJ/rNNH0HP+/Sh
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
hKrLfllkYUA2J6isGZlmmzh2NOtKB4u1PFDdvIw06qAhAAUHhtWdEM0Wkp6r
ehCL2jLKhNIq1mLrL+Ln715WSF7I5l7lNYR0mApbTrjYVAfRy2zHbkrPLLdJ
MZ3azQ/N82f9+yD0v1QvwBq5pfrtGGPB8A5gSkrSkyjaTmvjt3XN3AYvOpui
BHLp5E+gyxeEUaJwFWhmtUQvL7GkK3RHDJGGjB5QiGPTUiT6ZFf3cZDvmirr
kda8QOUZI/zUkME1NTIdFGPC4GO57IbYULLZJyQZaZoWRoITdK8VwWfpyX3L
I920fjXjqCBUrDuCFWfJAKHZbu1HIz3gb02iXLJQhm1v1H5yLFB8vVF0Segm
0XDWfCEv1NK1NT3b8rPghw3cGkUXw10jqitDUr7b8TlTMTKCAC9YhomUxEzL
94UBXTTgOWafs14iSy2HP9IgeGEhIptPhHawsS3FNA6zrAr3yHo+Ve2nYfA1
nBWCBNFGky4KeMJzoWVep9sG+qBxWehzGxDqRXXU3BgvkqdesLobUABb7qGP
IqjE/0rv9DvyN3DPJRv9JD+VjzjWSF/MHRZToSROtG2gc4o+pfKbTZdh/vvg
qhblnEi+uCKlxK7ywU1NWZ4ZQmT7OZwmZzlLXExnhpU5p0mQbZ85rtAV57UK
hJ4mYYZceF6XEIxH87YU5n9kTyfe1vQozayHhLDlIX2lkwwM5YraJq627KHK
s2ZpqTExBpDig6qRbZl9chQsJYXa6gbNFhrzCe+RqYNwfIrU181ppQIAWN8a
4aqs0m6v41AAfInyDpX3yfOWBQtBkR2rXW1+Kp9D+hGohzsA63nDW5OtWL2Z
CzKFgY5QKyvFGn+ox+twdhcPjcy54pTL3YJx68PDIlQ/K9JemLBbnRFUIOm8
tQOJ+hymyTmMHtte0XK2EupeE9gLZYJUUhZm1V7oll95Sfo/D6wv8yq5pQhY
HLRNMsUOFYXJy+6P/Q3Iyezbvjqc6eZ77ln8mkWluxaIN3+r2NnP7LgnPjks
UU9diTQWz5iINpy3mGdxt+Of8hKMBNizUE/iR8pC9ll8cX75O04trBWzKOKH
H97cppuLF/QWrd/d84wh4Jrxd98Vpux330XRv25m+e1vy/3CPDH13cJz4cOG
049zBmeWHGY8XOkoOQD7TXFqHuiO3nD0a/bH0Q2/5Jbn9U2/TG9WPrw/ticr
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

-->

</rfc>
