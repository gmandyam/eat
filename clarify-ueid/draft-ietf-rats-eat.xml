<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="April" day="06"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship-between-attestation-evidence-and-attestation-results" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>Many claims in Attestation Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the entity by the Verifier just through normal verification of the Attester's signature.
The UEID, <xref target="UEID" format="default"/>, and Location, <xref target="location" format="default"/>, are examples of claims that may be passed through.</t>
          <t>Some claims in Attestation Evidence will be verified by the Verifier by comparison to Reference Values.
These claims will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence" format="default"/>, compares it to Reference Values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults" format="default"/>.</t>
          <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location" format="default"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the Relying Party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="UEID" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It MUST never change for a given entity.</t>
        <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
            </tr>
          </tbody>
        </table>
        <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the Relying Party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
        </ul>
        <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>Hardware OEM Identification (oemid)</name>
        <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
        <section anchor="random-number-based-oemid" numbered="true" toc="default">
          <name>Random Number Based OEMID</name>
          <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
          <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
          <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
          <t>In JSON format tokens this MUST be base64url encoded.</t>
        </section>
        <section anchor="ieee-based-oemid" numbered="true" toc="default">
          <name>IEEE Based OEMID</name>
          <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
          <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
          <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
          <t>This format is always 3 bytes in size in CBOR.</t>
          <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
        </section>
        <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
          <name>IANA Private Enterprise Number Based OEMID</name>
          <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
          <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
          <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
          <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
        <name>Hardware Model Claim (hardware-model)</name>
        <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
        <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
        <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
        <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
        <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
        <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
        <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
      </section>
      <section anchor="software-name-claim" numbered="true" toc="default">
        <name>Software Name Claim</name>
        <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
      </section>
      <section anchor="software-version-claim" numbered="true" toc="default">
        <name>Software Version Claim</name>
        <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
        <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
        <dl>
          <dt>
1 - Unrestricted:  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2 - Restricted:  </dt>
          <dd>
            <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
          </dd>
          <dt>
3 - Secure-Restricted:  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
          </dd>
          <dt>
4 - Hardware:  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
      </section>
      <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
        <name>The Boot Odometer Claim (odometer)</name>
        <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (odometer-label => uint)
]]></sourcecode>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
        <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic:  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration:  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning:  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance  </dt>
          <dd>
            <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession:  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
        <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
      </section>
      <section anchor="dloas" numbered="true" toc="default">
        <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
        <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
        <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
        <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
        <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
        <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
      </section>
      <section anchor="swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
      </section>
      <section anchor="swresults" numbered="true" toc="default">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
        <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported. TODO: defined objective</t>
        <section anchor="scheme" numbered="true" toc="default">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective" numbered="true" toc="default">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>
1 -- all:  </dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>
2 -- firmware:  </dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>
3 -- kernel:  </dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>
4 -- privileged:  </dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>
5 -- system-libs:  </dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>
6 -- partial:  </dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results" numbered="true" toc="default">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
          <dl>
            <dt>
1 -- verification-not-run:  </dt>
            <dd>
              <t>Indicates that no attempt was made to run the verification</t>
            </dd>
            <dt>
2 -- verification-indeterminite:  </dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>
3 -- verification-failed:  </dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
            </dd>
            <dt>
4 -- fully-verified:  </dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
            </dd>
            <dt>
5 -- partially-verified:  </dt>
            <dd>
              <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name" numbered="true" toc="default">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
        </section>
      </section>
      <section anchor="submods" numbered="true" toc="default">
        <name>Submodules (submods)</name>
        <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
        <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
        <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
        <section anchor="submodule-types" numbered="true" toc="default">
          <name>Submodule Types</name>
          <t>The following sections define the three types of submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
            <li>The digest of a detached Claims-Set</li>
          </ul>
          <section anchor="submodule-claims-set" numbered="true" toc="default">
            <name>Submodule Claims-Set</name>
            <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
            <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
            <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
          </section>
          <section anchor="nested-token" numbered="true" toc="default">
            <name>Nested Token</name>
            <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
            <t>The following two sections describe how to encode and decode a nested token.</t>
            <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR-Encoded</name>
              <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
              <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
              <t>If the nested token is JSON-encoded, then the data item MUST be a text string.
The text string MUST contain a JSON-encoded array of two items.
The first item is a string identifying the type of the token.
The second item is the JSON-encoded token.</t>
              <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
              <dl>
                <dt>
"JWT":  </dt>
                <dd>
                  <t>The second item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                </dd>
                <dt>
"UJCS":  </dt>
                <dd>
                  <t>The second item MUST be a UJCS-Message as defined in this document.</t>
                </dd>
                <dt>
"DEB":  </dt>
                <dd>
                  <t>The second item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                </dd>
              </dl>
              <t>The definition of additional types requires a standards action.</t>
              <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
              <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
            </section>
            <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is JSON-Encoded</name>
              <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
              <t>The nested token MUST be an array of two in the same format as described in the section above.</t>
              <t>A CBOR-encoded token nested inside a JSON-encoded MUST use the same array of two, but with the type as follows:</t>
              <dl>
                <dt>
"CBOR":  </dt>
                <dd>
                  <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                </dd>
              </dl>
              <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
              <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
            </section>
          </section>
          <section anchor="detached-submodule-digest" numbered="true" toc="default">
            <name>Detached Submodule Digest</name>
            <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
            <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
            <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
            <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
            <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
            <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
            <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
            <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
            <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="cddl-for-submods" numbered="true" toc="default">
          <name>CDDL for submods</name>
          <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (odometer-label => uint)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 256
sueids-label = 257
oemid-label = 258
hardware-model-label = 259
hardware-version-label = 260
secure-boot-label = 262
debug-status-label = 263
location-label = 264
profile-label = 265
submods-label = 266


security-level-label = <TBD>
uptime-label = <TBD>
boot-seed-label = <TB>
odometer-label = <TBD>
intended-use-label = <TBD>
dloas-label = <TBD>
sw-name-label = <TBD>
sw-version-label = <TBD>
manifests-label = <TBD>
swevidence-label = <TBD>
swresults-label = <TBD>


]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

nonce-label /= "nonce"

ueid-label /= "ueid"
sueids-label /= "sueids"
oemid-label /= "oemid"
hardware-model-label /= "hwmodel"
hardware-version-label /= "hwversion"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
profile-label /= "eat-profile"
uptime-label /= "uptime"
boot-seed-label /= "bootseed"
odometer-label /= "odometer"
intended-use-label /= "intuse"
dloas-label /= "dloas"
sw-name-label /= "swname"
sw-version-label /= "swversion"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
swresults-label /= "swresults"
submods-label /= "submods"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAGYMTmIAA+y9aXPj2JUg+h2/AqFyvErZJJVacu2u7lFJqrKqc5uU0tnz
/BwVIAlScJIAGwClVOeUf/uc/Z4LQIvbMxEvXjx3R6UIXNz13LMv4/E4adqs
nP+araoyf5229TZPik1NfzXtwdOnr54eJLOsfZ027TxJ5tWszNbQcF5ni3Zc
5O1iXGdtM86zdrzK2rxpk+Rm+Tr9eHx5kX6u6i9FuUx/rqvtJvkunVVlk5fN
tnmdfn+bN9/Do2Y7XRdNU1Rle7uBfs/PLn9KNsXrJE3baqbt6Mc837RX8OQI
fzdV3db5ogktmtt1/GBWrTfZrHUtttPwrKzwUb2Y5fOmvV3l2qwtWvxxeZWn
ZyX8uE2PW1xW1sIc08vqS16mT86OL3eTbDqt8+vXKfxIsjrPYPJlm9dl3iZf
bmC/imWJi8/c57NpVcOi57BRr9ODp/uH4/2nSbZtr6r6dTJOixKm/2aSvtmW
8+kqm+cwQ97uN9m2zstZHr2qatjoi3y2rXGaMOOqvk3fvDmBV/k6K1av09Vy
9d8aadDS+wnsgI708yR9C2d/m61tnJ+LuphfZbV7QaP89222gi/X6WU+uyqr
VbUs8gbWO5vgvsJJ5LCnz168eJa+rer8qto2eXpaF9c4zRkMDvPMyvS0yJcV
7nq+hN14nZ5kq2JR1WWR0XFty7aGlp8ujuHn5ooAcucP++nLZy/T58/20xcA
jjthcWue4n/7j7aY/IfMzy/vl0n6/vvTqqyWV9uwk7/kdb6+jd88fokHL16l
P2V1CedYbZdX6ccqm9sS3Qtazxw39NP+UfrizUW0wLJo83n6bwAd82od1vqH
o6N0/+DZQXr4/HD/5auw0r9Wc5psf6lJWdVrgK3rHG/Mx59ODvb3X8mfL/af
2Z/P9p+FP5/Lny9fHbkGL8Kf9vTl06fadv/APtt/caR/Hr460D+f71vbF0fa
2eGrl+GzZ9r2FWAV/BP/B/98/vni5RH/brN6ifu8c9W2m+b13l6e1e3VuCgX
1aRcZpN1sdrbXG325tVNuYK9n8CPf10Uq/yHWVXV8/HNsnl5tMNd8UX+/P7j
m9P057P3p2eX5yfpxf+4uDx7m+6/enk0St/9fDy5uHx3Onn69PD5r/uTp5On
v9JkqAO9l/j3mGHkHV3jbJX+nFfNBn5kqzFe+tWqWNL1PMZ/btMn0PMufWhX
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
/sNTd2xByuUbOHt6mxo/qZ2lDV0PNZAqP7HwQA0FtJ4HDTAfK45qjorHLtyp
olNpFx+uXTVlT3+xWnmDLzgxTgrTnGvwmG8dJ/HvNbq6AOasA+4qDA9p/7Ny
NerdvRxUNkjmPqjsBT0ltNjhveFf52mOnQ1RNCGO8ao21IAIIm4qAypFmZFX
u9XXjGjNqB4Y2fjI0dWKHAx62NNR/1hbIbwdrlMOx+lhOn9YK4LMGPil9Pcj
S8GNSuo0GC9rBHHzN8eXEq7Vo73ZJZOJzj1DTYfpDdqzY20RspaH8+Cqq9ud
k21Cxwf67+JYWyjIn5G7N/UMdFHwsfYJ198nQR31+F9k2sAvAQvpaKts1JU7
vHYPt3HjXtLDfdyoI/dxRxuUA2r6AHbhYtSn/y5GLjGmc6y51Una7X5/2utP
2qNxt93BbXGbypr2uqPZMQ4O7k5v2u9MutN5d9ZLZ93+OOlOut3OIE2m/cEx
7h7uTqczXYwSMo/T7mDWodb0R5NJeyBjc/TskJVKc0FjMaB/9fDvbjoiG3/Y
e9KYtGe98bTjx2TW6Xenk2SaHH0TQ0Z+fzodz0Y0S51h0u/NJpMBqUo66yZH
HTfpb0pnxclgRMfkwXAynY7mMxL4xWT8tDEhBc5G+ByWNUnIjCSm2+mjm91j
xb437039aCTDZDKfzRfT3pgOnMmxYk87az/tp510nI6HXRqO8aw7n85GbdKr
R89Ov5dMOj1avvN00uv1punwl189Hf7FX0pZAtm6rJJdCpmZMxLX/K5JqrKJ
fS9IMTNTRh75CmCfdk3TiE8YoWOxRCDNXnLMcsZu21kqtRpDd7XMH/FJFt6B
m1FI31x/ODWMlljDHjUf5alJZyS73f7g8bSzLhtG1rUmNhxYfozXvccdtDeR
Hs5Lc6P4q2WmPZqy5VO1ivPzaMbW03PNfnatrdoaKPCYzCukXR1nkhydnBVk
Z21/WGa7H7KcE7TKUdhUQA6AjrgSytUlYekP2ohPrnmJ4zuqL8VH98T9dZ5+
v+7+yOZ1G53sYE97n3pZ2vGe+r7tkLb1PfX98lZ5bKh9/JhGtL/jkiCfKlhk
2jNYY97a5rMnCtW43Z78xjL1C4XKWwpiAjx1Ussmw5OFUk0Msx2e+n7Z1vj/
RKiEzKe1Wk6fKFHdHklU7x9ZTf2V1pb7K5tdT32/aKb1jzUZ3d/T7TX3d6RE
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
7B7bfrIDRvGAzsLLdtZ9EF8T/T9UWBNiNEcCAA==

-->

</rfc>
