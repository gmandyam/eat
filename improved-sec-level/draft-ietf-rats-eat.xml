<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.0.4) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.6 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="16"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a very broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>An entity should claim the highest security level it achieves and no higher.</t>
          <t>This set is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give more specific information than this claim about security level.
For example, FIDO defines several levels of security certification in the domain of user authentication that could be the basis for an alternate claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides certification information about the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="swresults">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>1 -- all:</dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>2 -- firmware:</dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>3 -- kernel:</dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>4 -- privileged:</dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>5 -- system-libs:</dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>6 -- partial:</dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>1 -- verification-not-run:</dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>2 -- verification-indeterminite:</dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>3 -- verification-failed:</dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>4 -- fully-verified:</dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>5 -- partially-verified:</dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "nonce",      10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwvers",     260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "profile",    265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
swresults-label        = JC< "swresults" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "nonce" :    "lI-IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "nonce":    "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "secure-restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"

; The nonce was added to JWT in the IANA registry after the publication of
; RFC 7519
; TODO: what about multiple nonces in JSON?
; TODO: add reference to IANA and OpenID (or such document that defines nonce)
$$Claims-Set-Claims //=
    (nonce-label => nonce-type / [ 2* nonce-type ])
nonce-type = text


; TODO: nonce-label for JSON should probably be here
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPbWJYg+h2/AqHMiLS6SMqy5LUns0YpyVnKsi2PJbe7
X72KDIiEKJRJgA2Aklme7N8+Z7/nAqCs6p6JmIj3HBWVInBx13PPvozH46Rp
s3L2W7aoyvxV2tbrPClWNf3VtE8eP375+EkyzdpXadPOkmRWTctsCQ1ndXbd
jou8vR7XWduM86wdL7I2b9okuZu/Sj8cXV6kn6r6c1HO01/qar1KvkunVdnk
ZbNuXqU/bPLmB3jUrK+WRdMUVdluVtDv2enl62RVvErStK2m2o5+zPJVewNP
DvF3U9VtnV83oUWzWcYPptVylU1b12J9FZ6VFT6qr6f5rGk3i1ybtUWLPy5v
8vS0hB+b9KjFZWUtzDG9rD7nZfro9OhyN8murur89lUKP5KszjOYfNnmdZm3
yec72K9iXuLiM/f59KqqYdEz2KhX6ZPH+wfj/cdJtm5vqvpVMk6LEqb/ZpK+
WZezq0U2y2GGvN1vsnWdl9M8elXVsNEX+XRd4zRhxlW9Sd+8OYZX+TIrFq/S
xXzx3xtp0NL7CeyAjvTLJH0LZ7/JljbOL0VdzG6y2r2gUf7HOlvAl8v0Mp/e
lNWimhd5A+udTnBf4SRy2NOnz58/Td9WdX5TrZs8PamLW5zmFAaHeWZlelLk
8wp3PZ/DbrxKj7NFcV3VZZHRca3LtoaWHy+O4OfqhgBy5w/76YunL9JnT/fT
5wCOO2FxS57if//3tpj8u8zPL+/XSXr+w0lVVvObddjJX/M6X27iNw9f4pPn
L9PXWV3COVbr+U36ocpmtkT3gtYzww39uH+YPn9zES2wLNp8lv4ZoGNWLcNa
/3B4mO4/efokPXh2sP/iZVjp36oZTba/1KSs6iXA1m2ON+bD6+Mn+/sv5c/n
+0/tz6f7T8Ofz+TPFy8PrQEMGxo8D39agxePH+tn+0+sh/3nh/rnwUvt4cWz
fWv7/FA7O3j5Inxmo70EBIN/4j/4z6dfLl4c8u82q+e45Ts3bbtqXu3t5Vnd
3oyL8rqalPNssiwWe6ub1d6suisXcAwT+PHH62KR/zitqno2vps3Lw53uCu+
05/OP7w5SX85PT85vTw7Ti/+7eLy9G26//LF4Sh998vR5OLy3cnk8eODZ7/t
Tx5PHv9Gk6EO9Iri32MGl3d0o7NF+kteNSv4kS3GeP8Xi2JON/UI/7NJH0HP
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
BKKOjmrYVmW2+YKKIqGafs5NDULmybVYsP3Gxts2SdhFrGPC0Il27DDi8xqH
t7wLDqvkfhaMy2z68faUd2S0HNM9ZKNKETxeTRvuXGDNCC3CljdE8oqGzJDO
tzM2IvnxGSUS+ems1SkEGz45vFLwRZnfdXaTPdPpG5aTWWdP3l2xB4i4qzmj
rSAAVprbeST/Af9wLnjpxnjPZbo/pt9/Hx5l87ktZM+/+QiYxL1Lkq1f/YgH
qc/eMu67rzXciW7rZPvA0r09HRig/wUO0fsCN6SzLYj2OtsSHo1f8+Ho7Ppv
cCgA3s6chtvdMyWkLQg4nJtFTJpy1YPzEwJNx8O4Y00T5tek5mw2Cwo5lkU7
uW/UbSG8+9W/885ihXObUbeM2Dvrhjz6SF+KwgFqMrzZVz2fkS9BKGYbPztm
YCa0ucqwJHxytys2EqqQ2SrOFf9L7DHBoF3kp8Vp36TNND21Rt4gm5lheI7J
YMho//WrfgarRrc2+TUKN5oaww1f1yW7zZpECAPXhehfiI6i+Lsn4inI5kT4
wlSC8uKGpjIgclvcEYfXROI3iu00tFJxceM3FxFSc7AanHsgU78K3jAZ7+6z
/Ws/n9ADagrIpIJW6Hdka+QXj8jwuMvOi4S/qUty9VSrJGnC0CyMIu9qYckX
oMO3aAdbEbNRmr1TsD9aFadkVsCAWpBPoSlA/DwXU6IL4GAj2opRLVIkE1TJ
G3VWNNM1Jb4jBaG7OWYRJZ2gelUcIUD17OrbxHDmEByl5VXzqfd8/7pmIQkU
NbvQJNXgIzTaAzS5YCq8Tr5zoWpJtgD+d7aRPlD0tqAfbEwngnihTRfAJ7fp
C5CA0NDx6NlhelW0zW5K9xDA8jq/A8jht3gW6xKdrBabhDELB/1N0oHOsSv6
DNXCsqEw9zn6F1Qc+ygEDvjwTZLRmcGmMLmMVfyoFpFBRGdbO57FlqMqZNbD
ArjJHHhm6iNS/D2n4KZcvSEwxFkZFNm5cdi5sMkjYN5I6y02Beatkjb06lyP
SasRpAnBcoHqfP994NXGIsXtAXmggHG+RONFdgVCxo8/8fBjcpzbS/+SPvkn
/+Svu5iJzn7+mGLkdzqhGT16MZk8O9xNhMCgAxwPdRI8HMi/kKSMKKyzw7EY
uvJmAACVfHFNjNFmsIFqc0jPWk0BWO4zbQ42MP04M5aR6ZUZy/g2I/UZ0tSw
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
o3EoLtH5rm42DVkGUC+D5oyafhllk2aejkismNx90kGxWnpVtRwSJJ8DrFBe
OSKK0sa5cCOvkYD4gKFJS9IvtJO0f3rv3/LhxWVfmqjgjuqsJHhSQFXxf7ju
KJVPb4r81vwmBahDJLQpwj0ZrHjPgz8M0ytXcyLW7/TRG+vJOwn1icSNLFoj
SprrMliEPH5kqbIsQD6VjWBI4xk470h3DpH9ha6ZhrdqnHdIJBGC02IKxYhY
LMxMq+uoup/GrU8Vn5PtiBwAxKGxs2Cs+ZNLmmVse/Lm/Mh4H5TcZosqazjt
houPjUonmgmwO9tutp8AhA+RzjiKM405R8fRxs+Jh91Nk2To+Y8x1t/borV4
QBPlS5Ik6pH/kb4k3fFvdkb8av+npNfcPug3T9MnP5mM6YaXD/RNaJ6mBz9Z
gOp3emF/ruAyeQ4c+Cl4JKoUcWi8Rk8NQ2W5ViFNsSUFUJR4xWYT7VSeJy4n
mTRhciqG9KWVf6yUdiRWcouioGfsvd/W1cJU11vdmb1BQaydzoW5mzffbAzH
0v+AR78VHfJzJf2J0Tqp+BTqrVD2dcnH8+H87Uh+RT5GHHzpKkjORqyMvCpK
C+4ix627yoV5PEy0C4cYbgL8Wuy6wz/Jr9ZzjBTDzLpy+jN8NuZsuyp9aW0x
rMZAezy+w9w4XgznJ/QxuqqiMFaYe2viI3J/vTz6RcoKZPOyQt+jwN9frQtK
FNxWCVUKJWO5G54zRYmg3htNa/mgchgWPkp6B0SFK4vbYpGje471xCruBVXH
ooa8HImWB2qyYtZnRNGWounl5LuhRBCKZTKMdUwrRuSbLCmoJLilmozW5VSF
WquzTXeNWkxGLhJGkiJ5ph+cBnaDyugpRpNSpULS/tl7TnJrXtDYCBNkcdXx
suJ+JSmwMtsUJKU1l1FalBF8W6ycxmnZWDEek5rCQhNnDERCi2Ftc8oaEgZI
ME+UzY+nLmNcWR50g5drpNC0bAQXdkBSkpN4r9/goasm9OxzLjlFMLZzjWGo
EeUVZj/hsI2W8iteDyyMtKLiW4V5oDG5K238xgVzJeRBM0UtAzFF4iSRWdkZ
tu9lV413t+TDZ65IrJ+UoMjXlsBUnFTIhDxtOWXxrcvdyvPkNGxii2RcySBB
hVOBj44cT4d4qyyqZZBpxvF7uSueP+MSMm9Fls1O2gmlEo3nkDQRbTbDhHNt
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
C0daC4/b55cnzy9H59HFm0dRevQ+ef2uc3nRerV89OLy/eHodHR49eL1d6/e
jkdvHn17Rm/evfvl0fcnR49mq1v49/Tw8P3h4fXrv42+nxzD3ycXV09/ffLu
5BB+/y598+z1y9dvjp4EFxfdSeOHt+eveusPLx9Nj9o/vHv9Iur8+G7+Y+O7
7vfLR8vvXh4dvR08fvfmYv3T9y+i729vnp/9rd24evzds/aPw9mTDzDNRXZ1
GDWeXi+/ffnr85vGTzeLRq8/vn48f7eB7fl19OK4E2S9t6N1/9n4/If2LzeP
5x/ONr88mt3EnSDOvs5dH7t/T5LF5oP6YdaK1orPPo3NWCoePq6V/CFqj9+8
Kp5CfPu4Ff84Sp4nj7/7Ifg+eXL0+HL8aIJ/n73+9Sx4ljweNuGj5aT9lD56
8vq0NX30w6/w/9uz5CaJ3py2zt6lH569e/3h2a+T1vPjnzrQyTz+Fjq96gbj
RzfZ2dVp8Lejs95ZcpadLZ4FPyX4O3R88e6mszh9evlk+fj15sWP109f/Ppd
8Ojpu8vbx7+E129+vAg6Qe/H77Jfb753to9XlQtA8U+xOgJf8HzJgsMoSyZU
0EqeV1hjT46Oz0da2QU+Ve6Ag1HLDvlci6H4oRo+AUPdas/MX8yb6KLlRNnC
KW44KBHreCHBVNsn18yUKlzo4IVViwLS7Hu9YM8PBntyuS4fjIJWEPYe3JEl
xT9wygRextEUKz8IQ/vx090N46sl1ttblDsQdzOYQNg67PRaYWfUO2wN+4Pj
k9aoM0SnklbYarc6rW6r1+q3BjxFJzpc2g8Ph4fhafek00d3uNMe9Hc0GHWC
bv+w2++1T4863cOTflcZ4OGo26ZUFd2g3+8NjsJgdHp6OOh0R93e6LDb7Z9A
82Ff+d1RC9jffnsYhJ32qD886vQH3V54DM17QXgC8v9RLwyDnmoBRodhu90f
9B/csSt2d0z5HdyNn/19340XP47XEbA/XCvlcLOYItSdSWkRLENCQGCqz5ZC
nVyLOYU9MaM21W6diIFSc7JRMyc2x1BZU1h7YovgOWU8bJEV5lHVzD1NLsi9
iiqP2uGw51kcTwVQ+SvtVoO0mrTYCEvUIOOqHLFVcfLKik4AJsbLqeWiRU/X
l5tMLyiX455sVuWmTe9cPPJj54QmKZXxxocyYROCYsqS5LeU/SF4jCZXe8Vj
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
PwF1YAnSkAIA

-->

</rfc>
