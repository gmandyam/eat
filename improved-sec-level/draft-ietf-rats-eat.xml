<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.0.4) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.6 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="16"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a very broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>An entity should claim the highest security level it achieves and no higher.</t>
          <t>This set is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give more specific information than this claim about security level.
For example, FIDO defines several levels of security certification in the domain of user authentication that could be the basis for an alternate claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides certification information about the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    hardware: 3
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "hardware"
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="the-software-manifests-claim-manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
          <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
          <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
          <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
          <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
        </section>
        <section anchor="swresults">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>1 -- all:</dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>2 -- firmware:</dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>3 -- kernel:</dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>4 -- privileged:</dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>5 -- system-libs:</dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>6 -- partial:</dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>1 -- verification-not-run:</dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>2 -- verification-indeterminite:</dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>3 -- verification-failed:</dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>4 -- fully-verified:</dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>5 -- partially-verified:</dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
          </section>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="nested-token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
              <t>The following two sections describe how to encode and decode a nested token.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string.
The text string MUST contain a JSON-encoded array of two items.
The first item is a string identifying the type of the token.
The second item is the JSON-encoded token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"UJCS":</dt>
                  <dd>
                    <t>The second item MUST be a UJCS-Message as defined in this document.</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>The definition of additional types requires a standards action.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two in the same format as described in the section above.</t>
                <t>A CBOR-encoded token nested inside a JSON-encoded MUST use the same array of two, but with the type as follows:</t>
                <dl>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                  </dd>
                </dl>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
          <section anchor="cddl-for-submods">
            <name>CDDL for submods</name>
            <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090"/> and the URI according to <xref target="RFC8949"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="UJCS">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    hardware: 3
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (odometer-label => uint)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 256
sueids-label = 257
oemid-label = 258
hardware-model-label = 259
hardware-version-label = 260
secure-boot-label = 262
debug-status-label = 263
location-label = 264
profile-label = 265
submods-label = 266


security-level-label = <TBD>
uptime-label = <TBD>
boot-seed-label = <TB>
odometer-label = <TBD>
intended-use-label = <TBD>
dloas-label = <TBD>
sw-name-label = <TBD>
sw-version-label = <TBD>
manifests-label = <TBD>
swevidence-label = <TBD>
swresults-label = <TBD>


]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

nonce-label /= "nonce"

ueid-label /= "ueid"
sueids-label /= "sueids"
oemid-label /= "oemid"
hardware-model-label /= "hwmodel"
hardware-version-label /= "hwversion"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
profile-label /= "eat-profile"
uptime-label /= "uptime"
boot-seed-label /= "bootseed"
odometer-label /= "odometer"
intended-use-label /= "intuse"
dloas-label /= "dloas"
sw-name-label /= "swname"
sw-version-label /= "swversion"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
swresults-label /= "swresults"
submods-label /= "submods"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device">
        <name>Submodules for Board and Device</name>
        <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
        <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation">
        <name>Key / Key Store Attestation</name>
        <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11-1">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPj2JUg+h2/AqFyTKVskkpJufdU96gkVVnl3CaldHY/
h6MCIkEKThJgA6CU7Jzq3z5nv+cCoFJuz3x5Me6OShG4uOu5Z1/G43HStFk5
+zVbVmX+Km3rTZ4U65r+atqjx49fPj5Kpln7Km3aWZLMqmmZraDhrM7m7bjI
2/m4ztpmnGfteJm1edMmyd3iVfrh5Ooy/VTVn4tykf5cV5t18l06rcomL5tN
8yr9fps338OjZnO9KpqmqMp2u4Z+L86vfkrWxaskTdtqqu3oxyxftzfw5An+
bqq6rfN5E1o021X8YFqt1tm0dS021+FZWeGjej7NZ027XebarC1a/HF1k6fn
JfzYpictLitrYY7pVfU5L9NH5ydX+0l2fV3nt69S+JFkdZ7B5Ms2r8u8TT7f
wX4VixIXn7nPp9dVDYuewUa9So8eHx6PDx8n2aa9qepXyTgtSpj+60n6elPO
rpfZLIcZ8na/zjZ1Xk7z6FVVw0Zf5tNNjdOEGVf1Nn39+hRe5ausWL5Kl4vl
/2ikQUvvJ7ADOtLPk/QNnP02W9k4Pxd1MbvJaveCRvmfm2wJX67Sq3x6U1bL
alHkDax3OsF9hZPIYU+fPn/+NH1T1flNtWny9KwubnGaUxgc5pmV6VmRLyrc
9XwBu/EqPc2WxbyqyyKj49qUbQ0tP16ewM/1DQHk3h8O0xdPX6TPnh6mzwEc
98LiVjzF//HvbTH5d5mfX94vk/Td92dVWS1uNmEnf8nrfLWN3zx8iUfPX6Y/
ZXUJ51htFjfphyqb2RLdC1rPDDf04+GT9Pnry2iBZdHms/RPAB2zahXW+ocn
T9LDo6dH6fGz48MXL8NK/1bNaLL9pSZlVa8Atm5zvDEffjo9Ojx8KX8+P3xq
fz49fBr+fCZ/vnj5xDV4Hv60py8eP9a2h0f22eHzJ/rn8csj/fPZobV9/kQ7
O375Inz2VNu+BKyCf+L/4J9PP1++eMK/26xe4D7v3bTtunl1cJBndXszLsp5
NSkX2WRVLA/WN+uDWXVXLmHvJ/DjX+bFMv9hWlX1bHy3aF482eOu+CJ/evfh
9Vn68/m7s/Ori9P08t8ur87fpIcvXzwZpW9/PplcXr09mzx+fPzs18PJ48nj
X2ky1IHeS/x7zDDylq5xtkx/zqtmDT+y5Rgv/XJZLOh6nuA/2/QR9LxPH9pV
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
+jj+yH495xXz7wpml9a6kl0tp1SyNDBnSStlUSs2HKQ3s/4UbEgT4qwTsX8t
WASkCRaId+PCMnKrqKaabstQpD5NNHdWaFE1DsFGNn6bEEeQxHYKw+TuOugT
jeKNz4rDqkdEzlFwQrZitpM4PZ7dDXkAIEf6HutLi1S0aVb9b5O7dZYsmgYe
xddym83YUSMYqtAAHJ4M0Mt2BTinTE9zimOfsitBgvFPGovsM1MupsmNf6px
GkhWkfehJLCEds0/jdSvVW1X3aBZ7Vx1gU50F9XUw0bRia3ENkpTAGVj59XF
AjESwlQT4S3aIcDWKNKEpmQ7bcfvX16eNiMPs0JduL/xo+UUyFTy8m1qrBhS
hWqxncMRjmMdma5BY5TFtK4pHsnOZSCLGhYlwUoVc2NTtw2FW4bvaa5G3Qha
6qzQJzlkLbiZXnPDqRhGUGvWvy2br6uWDYRaum5jplH9y14OJLX7dgatImWJ
tdlqteJZMv+eLW4nv374FwO/EfM6D9BwAI0jzgmGXG7y98UPiHxW2m6vNhnD
7EGwMTwq7VuAR+VQGZKjBePZFSvoat7yLOxumvSLnGgFG+Rv+7dVF8PskPUp
3cQqTfQ+YyASTdu+cySNcMcAMMLphyhUayuOLckhYLDaZoA5YMhod0yeQusM
HCni6OA+LTTa6ua0UdjZIm+KleXdNoo+nr17ffH6d8/iUr/jlC+RvhHsTMsn
5q65S3c+45vqpciDvCFewvsQvz8/1yQCBf8LoDPkiZAyFxXiV8SElv0sl6Al
RHA62zpxjZAANAVxQ4412kilPMkdEJNSyUdPY/99dLvMUAB9yMtBzaiIdvw0
ihj/WyDtn+osfxqEinQ7z+LrJ9PBZDmZjDqLbj8ZjPrpk6a+UESOpQu9UZfZ
IOxW2vKMZgr16+4gUB/f6o16z+A1s2JDOFk80hv1mXOCb1Xpt1zB7LVAPK21
oDem1/6rBmG48OO7jWP9W5pUqrj6+sjDZRRHDGekQput43VMGQ5Zix2isplY
RB1P0aPqwS8VQseRjiW634o1qgfLuH4SL5JhfzgeTAeDZNTpjAb9/qjb7/UH
nXmn2+mOZg8VQT+D7qg/WoyGvc5wMBgO6N/Bctjv0JV+v5f2u0cUQY8NOr1J
L+l1J93laFYu8pgi8NXupEfVrivmmIa4yqOYXmeUdLtd+v+kOxmlo2MaIt8b
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
XzsfDUYwiv4vUEE3KrBMAgA=

-->

</rfc>
