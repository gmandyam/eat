<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.0.4) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.6 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="19"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr, 
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr, 
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwvers",     260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "lI-IYNE6Rj4",
    "seclevel" : "secure-restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "secure-restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPcVpYg+h2/AkE7wmJVZlJctPbYNTRJu+iWRI1Itbtf
vQoHmAkmUcoEsgEkqSyN+7fP2e+5AJJidc9ETMR7iooyE8Ddzz37Mh6Pk6bN
ytlv2aIq89dpW6/zpFjV9FfTHjx9+urpQTLN2tdp086SZFZNy2wJH87q7KYd
F3l7M66zthnnWTteZG3etElyP3+dfji+ukx/repPRTlPf66r9Sr5Jp1WZZOX
zbp5nX63yZvv4FGzvl4WTVNUZbtZQb/nZ1c/JavidZKmbTXV7+jHLF+1t/Dk
CH83Vd3W+U0Tvmg2y/jBtFqusmnrvlhfh2dlhY/qm2k+a9rNItfP2qLFH1e3
eXpWwo9NetzisrIW5pheVZ/yMn1ydny1m2TX13V+9zqFH0lW5xlMvmzzuszb
5NM97FcxL3HxmWs+va5qWPQMNup1evB0/3C8/zTJ1u1tVb9OxmlRwvTfTNI3
63J2vchmOcyQt/tNtq7zcppHr6oaNvoyn65rnCbMuKo36Zs3J/AqX2bF4nW6
mC/+eyMftPR+AjugI/08Sd/C2W+ypY3zc1EXs9usdi9olP+xzhbQcple5dPb
slpU8yJvYL3TCe4rnEQOe/rsxYtn6duqzm+rdZOnp3Vxh9OcwuAwz6xMT4t8
XuGu53PYjdfpSbYobqq6LDI6rnXZ1vDlx8tj+Lm6JYDc+eN++vLZy/T5s/30
BYDjTljckqf43/+9LSb/LvPzy/tlkl58d1qV1fx2HXbyl7zOl5v4zeOXePDi
VfpTVpdwjtV6fpt+qLKZLdG9oPXMcEM/7h+lL95cRgssizafpf8M0DGrlmGt
fzw6SvcPnh2kh88P91++Civ9WzWjyfaXmpRVvQTYusvxxnz46eRgf/+V/Pli
/5n9+Wz/Wfjzufz58tWRfQDDhg9ehD/tg5dPn2qz/QPrYf/Fkf55+Ep7ePl8
3759caSdHb56GZrZaK8AweCf+A/+8+vPly+P+Heb1XPc8p3btl01r/f28qxu
b8dFeVNNynk2WRaLvdXtam9W3ZcLOIYJ/PjTTbHIv59WVT0b38+bl0c73BXf
6V8vPrw5TX8+uzg9uzo/SS//7fLq7G26/+rl0Sh99/Px5PLq3enk6dPD57/t
T55Onv5Gk6EO9Iri32MGl3d0o7NF+nNeNSv4kS3GeP8Xi2JON/UY/7NJn0DP
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
MqnMYklcyfj2QIdczwYuDPrrt3nUlgbStqxgfWhuWgIS+djaoH5Kma6Y5KMy
l97KHVFtzE1B1dLZ9kfZa0LdtJrAg9yAUIRQMhmlcUFUQense9NzgSgEceTm
ykp4FzQXNPEji3Y8YVa6DjbamERHwHDJwcX/NShg6/4gBMir/z2nL51Bw4ZR
5lJAmRNxOAxgiHDrhARJX+clfDBFr3qLtBQRqcvZRPv2nrQpyGFfev+7x+1f
rrBEfCWe/8q6i9z5Jo88Dt+dwC16DGzt1WsOEVreWw4fUU6RCgr/iCpvKJng
zAucKuPt8Yn4PInHXj4zD6NJQv5G2cYSOlOf7z6+eeOzI3G3vaRECOl2acrK
tRixDxnCCE1A/lLHslKnkrqSXMeUS8XYjODZgdoUI4lIIzGhMEdJe2jF7zgA
ZuBIiNQKa9dqmQa2HZnI7JJKI56wQ7M19kL+rm7zACqtpR8Jm8IFQvLWiu4V
jSrIQ0gjt/c+CVzMAxmtDuse+wbyHte0wRJtHJwyLaNTH7+ki2xD/JelK1B3
bOqLLLp8+eglXbbGcs9XJGHmWSNaNk62Mnwjff6GsECOHPS7igITl0/rJIDr
xNWIYBCMo7z4KP6QFNH3t4VkzXI7Usj+u3rffdd0tcq6dqbLoUQgAYL61/RY
E8Q0yYM6awNHvsvWSvm72DHBtopnaNZmEnyaHKPbnTlmCWygOcxY2GiZz6u2
kGp5sSJBkFYAWtKC2JQEXmOjFfF25nHj3OJUkzsaXF7HWasIefUs6UpT9U1k
utHok3bJ95QcHmH8tpuQVvIniTMospkZK57MN5P22LK6MTib+jyIVnjX4O/b
guKyWzLi6kS6jiU9xeelYM4vX9jfxHsrZGm5Xl5zqT61yJHDtMtPnA37dXzV
CDJklRvUVHF3Faa46BQCiZyca4ka1zIjnfbbpjOvQrZBclTkwG3dPq8A6u1c
sSxQVm0r8vlUnGGMdNZ8bfdHkQyPx3hP+cSqyHzbs0GK0Oyst3/mNFm4cbKL
2ydOmFEEwZHEimbNoAqSTkIU6D9pdo0k+YV4A4qi5YyG5lMusegsbBADxJZz
NOOWzEap8rjgLA5lq1kUKdCa/GU5V4d4KVWLKKl6h1paShjcqJAABK/U9LbI
Lc2wKrngfz+Fr8qv+uv4JIPGTVBkONPlSschcFSo+aDp5tj7q6/WIayqiRTJ
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
aBarhQGs2xv9f0XJLEBgjAIA

-->

</rfc>
