<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="April" day="30"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb" numbered="true" toc="default">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT" format="default"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.
These definitions are in <xref target="CDDL_for_CWT" format="default"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition" numbered="true" toc="default">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB" format="default"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT" format="default"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token" format="default"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token makes use of the CDDL defined in this section.
When new token formats are defined, there means for identification as a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

EAT-JSON-Token-Formats /= JWT-Message
EAT-JSON-Token-Formats /= DEB-Messages
]]></sourcecode>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>

]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
          <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
          <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
          <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
          <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>
"UJCS":  </dt>
                  <dd>
                    <t>The second array item MUST be a UJCS-Message as defined in this document.</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  UJCS-Message
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl" numbered="true" toc="default">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT" format="default"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT" format="default"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>


$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => ~uri / ~oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "nonce",      10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwvers",     260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "profile",    265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
swresults-label        = JC< "swresults" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl" numbered="true" toc="default">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl" numbered="true" toc="default">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

EAT-JSON-Token-Formats /= JWT-Message
EAT-JSON-Token-Formats /= DEB-Messages


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  UJCS-Message
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>TODO: describe cddl validation</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples" numbered="true" toc="default">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation" numbered="true" toc="default">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
}
    

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
          <name>Submodules for Board and Device</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation" numbered="true" toc="default">
          <name>Key / Key Store Attestation</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
}
    

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1" numbered="true" toc="default">
          <name>Submodules for Board and Device</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1" numbered="true" toc="default">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1" numbered="true" toc="default">
          <name>Key / Key Store Attestation</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
}

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
          <name>Attestation Results in JSON format</name>
          <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples" numbered="true" toc="default">
        <name>Full Token Examples</name>
        <section anchor="detached-eat-bundle" numbered="true" toc="default">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT" numbered="true" toc="default">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392" format="default"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp \
    "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>Use JC&lt;&gt; Generic for most of the CDDL that varies between CBOR and JSON</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIABmJbGIAA+y9a3PbWHYo+h2/AqWeqrYyJGXJ8jPpzlFL6h51bMvHktPJ
nZrqgkiQwpgEGAC0zPFxfvtd7702AMpK5py658N1UtMisLGfa6/3YzweJ02b
lbPfs2VV5q/Stt7kSbGu6a+mPXr8+OXjo2Sata/Spp0lyayaltkKGs7qbN6O
i7ydj+usbcZ51o6XWZs3bZLcLV6l70+ur9LfqvpjUS7SX+pqs06+S6dV2eRl
s2lepd9v8+Z7eNRsblZF0xRV2W7X0O/F+fXPybp4laRpW021Hf2Y5ev2Fp4c
4++mqts6nzehRbNdxQ+m1WqdTVvXYnMTnpUVPqrn03zWtNtlrs3aosUf17d5
el7Cj2160uKyshbmmF5XH/MyfXR+cr2fZDc3df7pVQo/kqzOM5h82eZ1mbfJ
xzvYr2JR4uIz9/n0pqph0TPYqFfp0ePDJ+PDx0m2aW+r+lUyTosSpv96kr7e
lLObZTbLYYa83a+zTZ2X0zx6VdWw0Vf5dFPjNGHGVb1NX78+hVf5KiuWr9Ll
Yvk/GmnQ0vsJ7ICO9MskfQNnv81WNs4vRV3MbrPavaBR/ucmW8KXq/Q6n96W
1bJaFHkD651OcF/hJHLY06fPnz9N31R1flttmjw9q4tPOM0pDA7zzMr0rMgX
Fe56voDdeJWeZstiXtVlkdFxbcq2hpYfrk7g5/qWAHLvj4fpi6cv0mdPD9Pn
AI57YXErnuL/+I+2mPyHzM8v79dJevn9WVVWi9tN2Mlf8zpfbeM3D1/i0fOX
6c9ZXcI5VpvFbfq+yma2RPeC1jPDDf1weJw+f30VLbAs2nyW/gtAx6xahbX+
8fg4PTx6epQ+efbk8MXLsNK/VjOabH+pSVnVK4CtTznemPc/nx4dHr6UP58f
PrU/nx4+DX8+kz9fvDx2DZ6HP+3pi8ePte3hkX12+PxY/3zy8kj/fHZobZ8f
a2dPXr4Inz3Vti8Bq+Cf+A/+89svVy+O+Xeb1Qvc573btl03rw4O8qxub8dF
Oa8m5SKbrIrlwfp2fTCr7sol7P0EfvzzvFjmP0yrqp6N7xbNi+M97oov8m+X
71+fpb+cX56dX1+cplf/fnV9/iY9fPnieJS+/eVkcnX99mzy+PGTZ78fTh5P
Hv9Ok6EO9F7i32OGkbd0jbNl+kteNWv4kS3HeOmXy2JB1/ME/7NNH0HP+/Sh
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
nJG1251TKes8jieHRmaZDVP0FdZ4LXpMNfV7g2nGh8Dp2UWFPmCMxc/FKGeW
TfTsIDREjm9AhHGlXGB+12jBMJ1G/gjisUs5e4fX+QSpdmelu6f27XGK+d81
baVB9033yd8xXaNx3WleVXUrHi+0jputevM+4My5CRlCQWqjjqjTM/H6xfD4
aSDp0cquDOC6x9AfHLr8KWugK+AvihlipcFNejp50odeZQ35yvml2K7pUpAi
prONuJiRWwTmLjpgxoidU2kG6Yfrn8cvgiMFE+tI8yS6avFi5SdEtoJEnged
AV3lTsn7bCbu4Kx8K8qOHC/StgrbX75gz7/DBfodZHeEjr5iQ51qRa8zsiSr
66rN1RFdkhdYQo4mONQGxUzMk2o+CubTiIOlWQ6ysMw7A1f8Y8woR0Jgdy1u
7zaUtIbEUnGnFKVIVIBR1aydEEGcG/JwQxMzAkZz02kxBxQno8fRUMMS11YW
HS28cxljxFYcUvyab+tAyVrn6ubrgHeH6Ras7hKT5v9LUXh3ysBNXsxCpkD6
hfAFs7G/B+eSThpgZ9NHh0eTyfHxfjqSJAP89Plk8uTJ/o/3jNtg900YWX7L
2O4XjM6pFkKaBZtZ8vWeEeijKl/59fHPNVbjlL+LPM/tB/Ais2qVwARCwx+Q
LdEH1Jq2I/weoxZh5LobY6KFH5POA0vDQDv0JOl00E/oIC2PdWyenB+dn0Tj
yyM/A/consPhs6TXz85pHME8du61bLaVlfvEdqiw7703dHqwz4MvLDGHPHyV
0tFzDg1OigCP/qCf8BNMlnE/LNhYIJDmy4HJ8fPe1MLje2/CMV2EHYk+8B9H
MOm9gRtydO8NSZu7Mfrah4kS/O/fd6nu+lvvnunluvv7dzu9Z7vpw0eWe5cd
ht2E4uecjzRNkqHnP6SbEuQjzJ2BeHk4ayhmJv1mE1bujx/QUs8dMKAfm/9J
zk//xpKSYk7STvM0ZCalN6E1/Dv6MenPSj/ovcFEpT8aULr5ygf6JkpZ+uM9
l/aRDIF1O8LpwK/lfSAGdO5msxijxLhx6Dt6qilm+w9/SAGr5yUaNXYdAKq1
H/B6TJF3NPlvtQSBcpWVbJ/7RlNOdgfo0H8ECwmTHvonJyBN4AAepz8mto7h
f/KNtoKPDt1HfnW7P3KtJNvt4Jp3f+9aSR7c+3ei18Fgq717cGD0DzPq7oY0
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
aXMZ9Lsn3d5gfDLsDvV4G+5ZtEfHFZ05I9IO3dX0nkX7nW6nk/Z6fBZ25Szc
s2j7Oz4yz/yRORjtO9aaY3Pfou503evoxM+Nx+deV3c3HJ84ffauIzw+H7HI
iI0jL+9Uhx6fLzvNR507Hb9BHfXH5x3q2Hl63lrHjzd9sPNe8XNUeIXfQ2uA
wzTwOA5IX5+9cheMleBIDU3lBBWcwXQsKMxQkVBQrwo5atWiJZVu1LR35VAU
AuAIydmiH4q+X+ePo8qQdIK1Ms7Bx7Gx9G46Ty6WWY4DFY2VYixDp6h5rr0O
Om158Z3uHyrd6joRWged84NT1ZNAkbacwaifePkhu+aI8wRfUNrYg/bt0gyK
mkMYNCsgtXQk3RLd2jWkOGV5mLnaNyxFcG3PU6XwE3msl1q+g5ydaKtuHwWU
Cp1012JBSfvf40BWbz7km65+MvU3XQ/pK0516Er+/ZbL2AkRRRmifL9S93Og
EkRwDVCZUKnKpLzas75mRmtmdcfMxnvOrjbkwF3CkZ709hUWAtNkLXfYjxGT
AmK9CNz1YJTS93vWgmzAqWNhvKvhWsJP9q8l3Kl7FqrITKT4DNRHr9tvTfYV
RkhcHkwDf7hOZ0rCCekP9O9sX2EocOoTjz01DXRQ8b4CCrffI0I96fJvJNvA
MAERaW+x7KQjjn6tLjz0ht2kCx+9k/aAB7i3RNmnrvchGM5OevTv7MR567X3
lbfaSavV6427vVHrZNhptfv0nxbVNe52Tib7WDh4ON1xrz3qjKedSTeddHrD
pDPqdNr9NBn3+vvYe3g47fZ4dpKQfJx2+pM29aZ3Mhq1+jI3e68Oiam0FjQX
ffqti9876QkJ+YPuneakNekOx20/J5N2rzMeJeNk30o6JOX3xuPh5IRWqT1I
et3JaNQnVknKbrKXvkk/Y1IWR/0T0pP7g9F4fDKdEMHPRsO7zQkxcJbCpxCt
iUImRDGddg/D7OxL9t1pd+xnIxkko+lkOht3h6RxJvuSPZ2svbSXttNhOhx0
aDqGk850PDlpEV/de3V63WTU7tL2naajbrc7Tge36wk3CqQ3eLp99jdS5tW6
LHNk59dqsoz4WrxsEKds4NgL/F5NjJFPvkUGc7uiOYgPOe3YbI68cFtxfM05
Ie3G8sPkKpTVwpnFh5k6JultR2Koo+dvjizxXKw3seojd1dPWCLdTq9/uy9s
h+UiG1oD5w3EPgYh2eJK00tINzvLuln8xdxlb/Uj9f6jxfW51Y307g6wn11v
q6IGKtzHHRS+oPtJJHt7jAYuo+u382zzNsvZa7TsGUIV5Mg6FseVCohYev0W
fCZqCkEYqSkU7z0S98N2ofPvT3cYAm/8IZHXnXNygN2tPI2ydODdtbwdkHby
3bV8+aTc1/0nvo0h2s9+ntl3JSyS7DkDdd5c55M7EtWw1Rr9yjT1M4nKCwoi
Adx1UcsSw52JUiUMEx3uWr4savwPISpBKGwu5uM7UlSnSxTV/VdmU3+nsOV+
ylLXXcsXpbTevhKj+7m7uOZ+9qSony3/uUAGtjSGbnmKnQq7Euc/FbtgaGt8
/cPDczMX1hkc2Ztxu1lt1Zfhj5zXM1XcHk0ZmU6dch227pIkXnEuXEm2DmN3
U3sQYBO5eoHtAYc4wY1yzio+l5xkygvRrpDuUi1yDC9WcqBxjnuWFFt9Q0o4
TDDeuV44oFHDYDK0RsFAddKyCrNTSLBA8MyW4q0uKCDWw8llKqh9V2qtxYTX
oTsJohlc1j+knC1xja47s6CB0yqESXTwar3NYSD6Y5BtNT8w/6kwOtGBYXET
kp1V4zHCrhekc1smphEQzFR8bziLNuip4a4rSmkYJz4NI/L0qinYjMTCHA/Y
iAm72sHi8e8f/+ezs8HLv/a+VgZ4QIvIy8cfVGyUwVewfeEjb0E7mI4vQINc
tMZSZoXZDMkfzV+/cU9hYuSHp3/6a/vhu/udD99dXl5z//6z59qVq8iiVbDY
50pnd3f4Dp2WSgS6PN6hZ+g3pmTguyLLV23DPfuxUM4QkCvFqufGDgKsnpEH
yWJR95izGzeUHKfFyC7H9n4M/ZDj75AA8xWzqmLWyd0IpYCUPftWDIcO7KXi
fRzeQbAnsvCEqVUbEHmlOFv9ZdMvEL3icKwmPud8kBXT5zQVdmgXB9P5Bd/u
MtCHbw41z9J0qrtXvrJqzW+6yYNNkBEWPNKYr9elZWTlaxXndh2kTjWMkc3l
NrdMx4J+Ndmuq0Wb0bk6yaU+H7Hg7AmH0Q47r1CX5bM4pXLDJG0olDSWTREF
NOk9Mfv0CnsDvSBtHATI/LcmzadfO5DEWEBaD6nOI6i5bAWOBq3O4Z/Nw+C7
+TpXzz2BfwKtcQJbphq+tQpPGk2WvixeUDRjTlzrklwD7mBeSGkahBC4nKZW
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

-->

</rfc>
