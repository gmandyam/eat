<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="05"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb" numbered="true" toc="default">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT" format="default"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.
These definitions are in <xref target="CDDL_for_CWT" format="default"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition" numbered="true" toc="default">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB" format="default"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT" format="default"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token" format="default"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

EAT-JSON-Token-Formats /= JWT-Message
EAT-JSON-Token-Formats /= DEB-Messages
]]></sourcecode>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>

]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
          <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
          <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
          <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
          <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl" numbered="true" toc="default">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT" format="default"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT" format="default"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>


$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => ~uri / ~oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "nonce",      10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwvers",     260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "profile",    265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
swresults-label        = JC< "swresults" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl" numbered="true" toc="default">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl" numbered="true" toc="default">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

EAT-JSON-Token-Formats /= JWT-Message
EAT-JSON-Token-Formats /= DEB-Messages


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>TODO: describe cddl validation</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples" numbered="true" toc="default">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation" numbered="true" toc="default">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
}
    

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
          <name>Submodules for Board and Device</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation" numbered="true" toc="default">
          <name>Key / Key Store Attestation</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
}
    

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1" numbered="true" toc="default">
          <name>Submodules for Board and Device</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1" numbered="true" toc="default">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1" numbered="true" toc="default">
          <name>Key / Key Store Attestation</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
}

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples" numbered="true" toc="default">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example" numbered="true" toc="default">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle" numbered="true" toc="default">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT" numbered="true" toc="default">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392" format="default"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp \
    "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>Use JC&lt;&gt; Generic for most of the CDDL that varies between CBOR and JSON</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAB4rdGIAA+y9a3PbWHYo+h2/AqXuqrYyJGXZ8jPpzlFL6h712JaPJY+T
OzXVBZEghTEJMABomePj/Pa73nttAJSVzDl1z4frpKZFYGM/117vx3g8Tpo2
K2e/Z8uqzF+mbb3Jk2Jd019N++jhwxcPHyXTrH2ZNu0sSWbVtMxW0HBWZ/N2
XOTtfFxnbTPOs3a8zNq8aZPkdvEyfXd8dZl+qOqPRblIf62rzTr5Lp1WZZOX
zaZ5mf6wzZsf4FGzuV4VTVNUZbtdQ7/nZ1e/JOviZZKmbTXVdvRjlq/bG3hy
hL+bqm7rfN6EFs12FT+YVqt1Nm1di811eFZW+KieT/NZ026XuTZrixZ/XN3k
6VkJP7bpcYvLylqYY3pVfczL9MHZ8dV+kl1f1/mnlyn8SLI6z2DyZZvXZd4m
H29hv4pFiYvP3OfT66qGRc9go16mjx4ePh4fPkyyTXtT1S+TcVqUMP1Xk/TV
ppxdL7NZDjPk7X6Vbeq8nObRq6qGjb7Mp5sapwkzrupt+urVCbzKV1mxfJku
F8v/0UiDlt5PYAd0pF8n6Ws4+222snF+LepidpPV7gWN8j832RK+XKVX+fSm
rJbVosgbWO90gvsKJ5HDnj559uxJ+rqq85tq0+TpaV18wmlOYXCYZ1amp0W+
qHDX8wXsxsv0JFsW86oui4yOa1O2NbR8f3kMP9c3BJB7fzhMnz95nj59cpg+
A3DcC4tb8RT/x3+0xeQ/ZH5+eb9N0osfTquyWtxswk7+ltf5ahu/uf8SHz17
kf6S1SWcY7VZ3KTvqmxmS3QvaD0z3ND3h0fps1eX0QLLos1n6Z8AOmbVKqz1
D0dH6eGjJ4/Sx08fHz5/EVb6t2pGk+0vNSmregWw9SnHG/Pul5NHh4cv5M9n
h0/szyeHT8KfT+XP5y+OXINn4U97+vzhQ217+Mg+O3x2pH8+fvFI/3x6aG2f
HWlnj188D5890bYvAKvgn/gP/vPh18vnR/y7zeoF7vPeTduum5cHB3lWtzfj
opxXk3KRTVbF8mB9sz6YVbflEvZ+Aj/+dV4s8x+nVVXPxreL5vnRHnfFF/nD
xbtXp+mvZxenZ1fnJ+nlv19enb1OD188Pxqlb349nlxevTmdPHz4+Onvh5OH
k4e/02SoA72X+PeYYeQNXeNsmf6aV80afmTLMV765bJY0PU8xv9s0wfQ8z59
aFf9aPzw2fjh8wSenh+/OZ6cfLianCyzYtXEK8eFw7pvb28nRVZmExj3IGsQ
mazysm0OpretX97Jzxfv0g/5tWIm6HY/5X79IlK/ChzfTW6eLZvc5vVbZ17R
xJq7ZvY3mZlO7bfLizd+ar91phbPrTe57uyubuAK/vr27eT89dl5f89wamsg
Ctly8nixXtPsZnnzsa3Wq2q2WebNweU6nxbzYkqH2Pl5mrdw1ZpJ1qw//2vj
35zPfnz26IXf88f1DACgzGtG6m8BROFHc1Os07d19bd82v4zIxHoYZlGwzAp
TE8ASaZv8vYWCGQKaAya16sCAKv55/TNZnWd14AbRmk2m9U57DBSEWhUzGCf
ratdMPoY9igGvRcp7t8v56cXk+N3F2cv/VrwaXoMvWDX0HFVp8fLZXUL+Okd
kK26mCKquljTYmEeZ+Wnoq74xNNXRdMOHsS8mFUZXIoM7gSdBO5oQ4/HSo/G
df4fmwKQMQEPvcr8PMYZzwPa6TzGlc5jnLt5jJcwj/Gnw8mj8Xw2fvQQlnz4
8NHkpl0td20SkndeuszS7dib6lOOR5BiT7hzZ8dvxoePh0EOb8OiOeRFIieV
1bPm4DqrEf03gL7K8WY99TvOTIIikuMalrvM5dRhejDYwfu3J6l2sWsFv14e
dk4Zp3pSXX44P4VBxqcTYs6abLoaT6vmtpjhezjI8vz0pCpLgFKEwuFVwT6X
xWwCrIycHD+AjuhD+G+djw9/fxj2WBbH/acyAMM54FUgyPAJXE8GoryGP7K0
ydv0cGjjnxPCHMJf881yyXT8zQRYio/FalNnvXdA+X+us9ky3/ZevZ6kvwGx
bXovfp6kszx9nc9ygKv+65MJcjZtsYIVJUS1Tl9dHA/v3mJZXWfLNbDDwNys
CDRu17h3LUDrwWaNhKs5gCU+OTh8dPDr25PfT4tFAZjrVQ68Yn0xP16v6+pT
tvz9E9Kk9Wzut1japtw4reapNh+G4cMnCZ7827M3O5BmXgZ8Dj8O3uYl9LgU
NDNZZ4vcj/8W2DoYA7njvF7XRWPA+wDG2Ae08R8bEgOUoiDTO26zRRMhHnzF
1OsKXsFXC7jE9XbnJRsmhtp1+GvymWAS/iHTEDNHR4ePlAU5Ogp/Ojbo8JEx
MUdHT41deQwN8G8QaibH9fQG+LdpCxy5u2gkBWXuHX7wcwHcyyzbggiRTT9G
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
Hhldr5LLK0l+V+woY8A4tbBjSneRH0Cpzo5ROMdaDGeCfEx3jGE+lyE44ge3
xATTih9lswgviQ65B2Y5ePkX79zADEopssYkr9fXHEuzvNyCKPHFw8ABWFHn
NtumyWPklxIC37nD/CRuxBThm6LqxwkXKFj1+3c+69eGYdjIn+1ScxmZOtBR
dROTvpI+mKDnavwxoSJhSzN59Pu1m+9SYYlbIkcOjn8CvV8qQruFeYvcm8Kq
aNXcu3NOMa31JI6XJfafowF0sC60BPUzQltzjp5rGXiluZTc7yZmlmSr8Jg8
zkz/KOqKTR02zV8u7wBnlyT4YC4l/nS8cApLAZavKX3yTOIitRq8cG5oZkiI
5AXIFbBnT3ogqbcNU2DbrsTNdUPntfRNORszHEfey+t0QvE9Wn7ehNkIXDgJ
NiZ5L+G8g++4SEdCkSJEpiaSk0vjTlMpIJXnRI6GTy2kEgAH/aZLW8meKBDV
x7EHRoPA7GyWmBjWqegsuObkuXBieHMF4XKQdc6/Sj9GDh9/xDzpHMVs1KN3
hVicaQ5MFFCyAIFvZgsWUVCcDZir54qFSH5RLfuL3twUjG3zuWtZ9Y8rTKeN
SWW2G86gZARLlh1N+gouSbROb+KsKlKOk4TEvDhNV+ME1zmnLloWshuUBQGG
rebXkyyAJvTHOq5HBbVGWptiKZqSrioMbpa6kRkYqbbA3FjryBR+VFCaxHzz
HdPNiimKTXIayidJxWo3qUl5eI8chKS2mOdGKsdWFuWY+Sevn5WqQ0VZI8kq
am0SKqwx8mpZ3kRLs6Wg1A2SjPk6ymeNMPgh6UtQ/t5ZM4Sn52Q7WsH8Npg6
RtO4kCrJ0Y8saBupDVvLmVk5DY1OUciUa+iPI8vniFEkEQm0zHKPll7SkS7V
ScMkjRTaR9XYiWlJCYtoUzU41TFWUdbmerQEFTGGS30TDa6YkcqgtCeY/jBj
bkgMJZ3cULShxGvSTmBigivJITa3dZKLO11XuKpylCMqCg7nxGlUkKu26/pp
kTZTeEXEbDSTYuVWqb0x5ePweS1vkhAmUTPafC6WXdNUSFoKjXMhO45j1sib
GO5qXlUfnOqi6Y+xyiwmSsEDi7lmOUJbcxSQAp1X4P0DDt/2NKUGGdU0dzdp
iBTWy0TbYWxzVo3dcMvcO9CeNfS+pgm0MDxsJfcUtRPOEXPCFa4X8bpGMKhd
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
P5/fX25XegIA

-->

</rfc>
