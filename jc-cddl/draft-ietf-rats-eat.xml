<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="08"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb" numbered="true" toc="default">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT" format="default"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.
These definitions are in <xref target="CDDL_for_CWT" format="default"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition" numbered="true" toc="default">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB" format="default"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT" format="default"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token" format="default"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>

]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => general-time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252" format="default"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID" format="default"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
general-time-int = JC<int, #6.1(int)>

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC<text, bstr>

general-uri = text 
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl" numbered="true" toc="default">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT" format="default"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT" format="default"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
general-time-int = JC<int, #6.1(int)>

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC<text, bstr>

general-uri = text 

$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>


$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => general-time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "nonce",      10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwvers",     260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "profile",    265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
swresults-label        = JC< "swresults" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl" numbered="true" toc="default">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl" numbered="true" toc="default">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples" numbered="true" toc="default">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation" numbered="true" toc="default">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
          <name>Submodules for Board and Device</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation" numbered="true" toc="default">
          <name>Key / Key Store Attestation</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1" numbered="true" toc="default">
          <name>Submodules for Board and Device</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1" numbered="true" toc="default">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1" numbered="true" toc="default">
          <name>Key / Key Store Attestation</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" :    "lI-IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules" numbered="true" toc="default">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce":    "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "secure-restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples" numbered="true" toc="default">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example" numbered="true" toc="default">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle" numbered="true" toc="default">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle" numbered="true" toc="default">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "CS1": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "CS2": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT" numbered="true" toc="default">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392" format="default"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

; TODO: see if there a way to use ~time
general-time =  integer; JC<integer, ~time>

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => general-time )
$$Claims-Set-Claims //= ( nbf-claim-label => general-time )
$$Claims-Set-Claims //= ( iat-claim-label => general-time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"

; The nonce was added to JWT in the IANA registry after the publication of
; RFC 7519
; TODO: what about multiple nonces in JSON?
; TODO: add reference to IANA and OpenID (or such document that defines nonce)
$$Claims-Set-Claims //=
    (nonce-label => nonce-type / [ 2* nonce-type ])
nonce-type = text


; TODO: nonce-label for JSON should probably be here
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>Use JC&lt;&gt; Generic for most of the CDDL that varies between CBOR and JSON</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAJoyeGIAA+y9a3PbSJYg+h2/AiFXRFnTJGXZssv2bFWvSlJVq9q2vJbc
nrkdHRUQCVJokwAHAC2zvd7ffs87TwKgrJ7ZjdgbcT0TXSKQyOfJ836Mx+Ok
abNy9nu2rMr8ZdrWmzwp1jX91bSPHz168ehxMs3al2nTzpJkVk3LbAUNZ3U2
b8dF3s7HddY24zxrx8uszZs2SW4XL9N3x1eX6Yeq/liUi/TXutqskwfptCqb
vGw2zcv0+23efA+Pms31qmiaoirb7Rr6PT+7+iVZFy+TNG2rqbajH7N83d7A
kyP83VR1W+fzJrRotqv4wbRarbNp61psrsOzssJH9Xyaz5p2u8y1WVu0+OPq
Jk/PSvixTY9bXFbWwhzTq+pjXqYPz46v9pPs+rrOP71M4UeS1XkGky/bvC7z
Nvl4C/tVLEpcfOY+n15XNSx6Bhv1Mn386PDJ+PBRkm3am6p+mYzTooTpv5qk
rzbl7HqZzXKYIW/3q2xT5+U0j15VNWz0ZT7d1DhNmHFVb9NXr07gVb7KiuXL
dLlY/vdGGrT0fgI7oCP9Oklfw9lvs5WN82tRF7ObrHYvaJT/scmW8OUqvcqn
N2W1rBZF3sB6pxPcVziJHPb06Q8/PE1fV3V+U22aPD2ti084zSkMDvPMyvS0
yBcV7nq+gN14mZ5ky2Je1WWR0XFtyraGlu8vj+Hn+oYAcu8Ph+nzp8/TZ08P
0x8AHPfC4lY8xf/+H20x+Q+Zn1/eb5P04vvTqqwWN5uwk7/ldb7axm/uv8TH
P7xIf8nqEs6x2ixu0ndVNrMluhe0nhlu6PvDo/SHV5fRAsuizWfpnwE6ZtUq
rPUPR0fp4eOnj9Mnz54cPn8RVvr3akaT7S81Kat6BbD1Kccb8+6Xk8eHhy/k
zx8On9qfTw+fhj+fyZ/PXxxZAxg2NPgh/GkNnj96pJ8dPrYeDn840j+fvNAe
nj87tLY/HGlnT148D5/ZaC8AweCf+A/+8+HXy+dH/LvN6gVu+d5N266blwcH
eVa3N+OinFeTcpFNVsXyYH2zPphVt+USjmECP/44L5b5j9Oqqmfj20Xz/GiP
u+I7/eHi3avT9Nezi9Ozq/OT9PLfL6/OXqeHL54fjdI3vx5PLq/enE4ePXry
7PfDyaPJo99pMtSBXlH8e8zg8oZudLZMf82rZg0/suUY7/9yWSzoph7jf7bp
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
nV4hx4BqD+Jk8jWddsU4z+ZBwMK0N2dYAW6OdyATBY9QsWuCyJYu6Xadg5w8
WUxG6evz12f0YJ8+rWgJ3W/bG/b/EqGVVkgmxwgxzIvP+SwoHdJsWgM/Qbo2
E12GYZnODW82GpkdNSIOj2ZHVxxdVaY3TCTTnzflDCjbQ8An+yO4xfBfusGI
YEheb+sNsVJ4i4C2zxDBwCGIHgGWMdPuAt7hKyl7yaDd5ChXt3gSpuULmgls
nnnFhVNViDJgRShYWGpRcg7BCGzNq6xpRwM3iE8l7AZRePESmSQXc6/Gwa02
xiV8wouxFcBxRdNGWjakbkHxFs4vklRI2cSijknhrLCudAD6Lcj/9PTViBes
uqKuQKOcJoh0U7Sq/1yUyIWKRuldvgbEauz4Q+xqv6+Py4DuAbJat/rdm0q/
wDH3vbIuKPwIFZZ8cxD5Cygg1WYS9fr95RUt3Th7+zb/PM1hOFZ45J/RcaBo
kZDpwYhmofdG5GPh+OSMmD8kgbSYA7+LG6NDTZjVksm5DvFGk9BHS25ElG4Q
XzaBHcfpD3XLCiRRgALvT25Ou+gNiWt6QqfoxXIaYPRVVi42iKQf4nHr6Tw7
fAR7TYuN6SpzsSZnCfDVcM4tY0jsBbdkisuG/8q1oVe9q0MbdF4KI8UoCt+O
0D8EsGbxOT3DZ35SpPLSczoOFLIm1g4ZqQUwUST8ffnyd5A4hGrBp3zermtU
VAFpm8NWFSTD4GRWVdMKHuUPbFlk3sNFkHZLz4SOgtaUcTPyswPih144IHf9
dvLfftpTi4yCltLnGc8Tv/sduv8diIjpjJ3Gt8sl3JLGiAyBSHzyOWJfGvwW
6donoMTZ9ZKF/FnBKnyEJWwySIQLAKMNmbW4mxiL0ZbAf28RLotIVHV8GsB6
sSpIjzRi2rdjDNvMb/WrKvQrYq8cGKbMMPd2jrF6TRxPai7HjM6CQ+BrUq5g
0570niQfbgoUu1omja3ykTO+lIhYVL9iKnvqZUh74874F9R45emhrK3rlfP1
K0l1OUIuDQQT8Hocx/SNOhoS+NvUdBlQ+1KmSpNAUEJpdYWs+j/QflYGzQZz
M/BjUEMEt2tIb4T0y/P7skrcV9R4VpvmTlPnjl6JCaQ7wspc1OOrBQyV7EYD
ze5j5in6abOjVrPNVHCBkcpJzwwTIL6sStYcEPvFJHuVA6lEBKZ0cQ6k7AYQ
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
T4FgiCgcUy47w2GIaY5w1Y6Fwp58UEoeQpRdRh8cKJII0LNsi/FThpdE+sm1
Hg0/vz9DZpMJTFl4pKG38RNkzP5grQRY/xZaKfgq/yZ5zOjbl/AbFSejNHrF
X7wkndt331lH19VsK8lddtrsus0py8tPwNYlg29g4RImTz83WtJuWjW3xaz3
DWWEOeilhLlf55fvz69+PyvZ8n//rptN0Y45QTewSGNh0cbqbkMK1sMXHc2T
ca1WmUj93G8VNpBrDb/uwbaO4F41LfmGhWpHvgpuL/CZmMX8M341wN/u5Oj6
iUcoUrJtQg68DrNntUA6nDF/iOk2kRO1ustGqzFmsh8YbfMfmHOchc/luKGr
Z6ZZlyVumAeNdlsqukeJCQwVCNa9Aw10brskYYlRwyUMqfUbXaIU6dyZyCQ/
Y4+FCePDfnsymv4iTAWt1iVGCyhWDhIlxCAn/RNiYgBTH09tzxQvdR4xYnIP
DTX1nv3nkZPrKqCnO7BTtz3jp5QR1ODLb6KooSkMYpIOiviQvg6X1yqMGZ6Q
yt6MJuRHhCUa0ynjaYNkNK1C8gNX1pqcUR2esDTxPQmSgqPhRnerXZtfs/gV
ol/nFC88hjSHkTCZd7HU9HEyeO3Sa0dKues8rp3eE+NILB8W4brW9amy0qxT
4Z2UnbA+ZVah1kwbIU07xeAF3t+H7iIskYirJxN5OkQuCDdyMzWoH/kQEgU0
uJmq6Kg5mnPnh5edZWcYMuv9CnzPrp8Yo0rVeJT0Li6l7ss2fN+rc24qOf4C
eSROOZXFJS/V8dlF54wCj6VHolmbLICg5yahdaCbog75kMyZVfvRWX3M61L0
ZOQW6yrneXVZk8PBo9cESv88JjnR2q5c/52pOyPRUO66O9/06uL04mWo7q3f
iSfeJWcz8Z6znWwlPj9JVG80hApJXgkO9+YEzKLx9h9MIt/3ag7PC58EF1Vc
EkaNfUpNOZekjIx8MhsOrMhr6kKykWmJefUyvLC10vIo5VYnq4nkc6pQI73o
p2HxKChkCeELhVlSmjUbVquex1UALurQFSCce817cNKUD8RWRjNypbBtFhKm
zV+xApxKCh6m4zF2jBHe55EbarQgM3/yweAI8+iGdj9QIfnbS6OUEGML/utP
hJz6Z6HArraksP+xXAz87J25w7udwrRB44GYtGgB1PJVUW4+S3cU/j52sWw7
+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
FBrIS2zDDYoyZL6BeWsblGSTwgj6FlpogzyrXWwgb2u+NigoagoN9K1zDp7j
RU2FJM419IW9J4xFG3EtfcCU6SuQT+wjRttKs5w3BqXzO6SdW1p9hb4RBbJx
19dlIpPrvDCwdF+iVXe2qKZueceAr3jX3GfsKtrIf0ZUgKqO0IPGGXkguDvK
DJZ9UP5EOt7WQY42bNk5doK/owsif9tZHLbZuaQGtdOpEaMPQBQM/+Y++Wlf
SZMwva4LwKDZ7HX2c0BI87sLCO0CDBA6a+IMY5nCQvkNHuxjAIU8BFR/txsA
UNs8AJQeKX9Ce/DQr8EMarBZNdx7+gWGYnsIe6gYFsaZaiULXoYIZ3+qGlQx
T8ic3NlRBYei9SkooJDqtBWzY1KQrkTm5F1+MDsgd7znRE3tqzPWS1PwzRN3
qlzlPsovqun/nWyynMEfB3MC8KTAvfOoPAqWiMMVNOGrJr81oUn0/LHzvC5l
hiVn9bOUopjdQnW3nk2xjfFyczddUt6NqJiUwJZiIIcvt/LdiLJx3VR1RclY
ft6w6c26Ht/RmQlf9I+AhYommIcEvQarErpJJuKLTTKlCAk8Alodvs/PqO5k
5aN6E5LRZWzrMmtqUNpXz3uKySrVCdgMgb9rDWs4hUkuh8ZEwIwdgxcyP52M
U29Mw2sJrZSCg0q1Jf3nq0Rdzz1TB228Qte9ixQDvihVwuiVCU8XDSVHtbl9
JbHEPGilwhtydb8AbpWCvZxQtToqlDeziAL0KJ3nOp5cLtJ5enFrSw+RXxoV
S+JI4PUl1SpJLkhrwoUKabp2ouwYODbVEhtaUDSXgaPS4x6Xp7VyOcgQzxzO
FHAQWyJpCba2H52om5Qkk3PjdLCRzd5kK1LLogq+jrICissvHJimnXPDVCfq
vRlfZfH8Gq8yupSS77dTcoRyc8Vu0POW4pXOPObpDP3wcTYU1wITR8Beu2kc
CDjmGurPCYZW8WwzLziN2iqvkXu8i3izFuhoeufImqHR0GQxxQQB7qiaElxy
N5qjMiGF5f0haZ7ghlJvbNt9yQjCPqK05FWMgrTkNOJrplORC/V8qQEK55Ky
F3bplV3cM16cweDlKqw2Ue1aoxbJH9iJvcYIGjOOloqgGEcnwiIXinsFM0ww
9yeD62VycSlJEYsdZbwxTo30mNKg5AdQrLNlFM69F8OdIL/hLWOYz2UIjuLC
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

-->

</rfc>
