<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="09"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb" numbered="true" toc="default">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT" format="default"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.
These definitions are in <xref target="CDDL_for_CWT" format="default"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition" numbered="true" toc="default">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB" format="default"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT" format="default"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token" format="default"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>

]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => general-time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252" format="default"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID" format="default"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types" format="default"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090" format="default"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
general-time-int = JC<int, #6.1(int)>

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = text 
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl" numbered="true" toc="default">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT" format="default"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT" format="default"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
general-time-int = JC<int, #6.1(int)>

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = text 

$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>


$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => general-time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "nonce",      10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwvers",     260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "profile",    265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
swresults-label        = JC< "swresults" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl" numbered="true" toc="default">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl" numbered="true" toc="default">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples" numbered="true" toc="default">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation" numbered="true" toc="default">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
          <name>Submodules for Board and Device</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation" numbered="true" toc="default">
          <name>Key / Key Store Attestation</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1" numbered="true" toc="default">
          <name>Submodules for Board and Device</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1" numbered="true" toc="default">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1" numbered="true" toc="default">
          <name>Key / Key Store Attestation</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" :    "lI-IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules" numbered="true" toc="default">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce":    "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "secure-restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples" numbered="true" toc="default">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example" numbered="true" toc="default">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle" numbered="true" toc="default">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle" numbered="true" toc="default">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT" numbered="true" toc="default">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392" format="default"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

; TODO: see if there a way to use ~time
general-time =  integer; JC<integer, ~time>

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => general-time )
$$Claims-Set-Claims //= ( nbf-claim-label => general-time )
$$Claims-Set-Claims //= ( iat-claim-label => general-time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"

; The nonce was added to JWT in the IANA registry after the publication of
; RFC 7519
; TODO: what about multiple nonces in JSON?
; TODO: add reference to IANA and OpenID (or such document that defines nonce)
$$Claims-Set-Claims //=
    (nonce-label => nonce-type / [ 2* nonce-type ])
nonce-type = text


; TODO: nonce-label for JSON should probably be here
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>Use JC&lt;&gt; Generic for most of the CDDL that varies between CBOR and JSON</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAMajeGIAA+y9+3PbVpYg/Dv+CpScqljTJGXZsmN7NulVJCWttG15LXk8
s/11pSASpNAmAQ4AWmZ7vX/7nvc9FwBl9cxu1Vbt5+rqiMDFfZ573o/xeJw0
bVbOfs+WVZm/TNt6kyfFuqa/mvbxo0cvHj1Opln7Mm3aWZLMqmmZraDhrM7m
7bjI2/m4ztpmnGfteJm1edMmye3iZfru+Ooy/VDVH4tykf5aV5t18iCdVmWT
l82meZl+v82b7+FRs7leFU1TVGW7XUO/52dXvyTr4mWSpm011Xb0Y5av2xt4
coS/m6pu63zehBbNdhU/mFardTZtXYvNdXhWVvionk/zWdNul7k2a4sWf1zd
5OlZCT+26XGLy8pamGN6VX3My/Th2fHVfpJdX9f5p5cp/EiyOs9g8mWb12Xe
Jh9vYb+KRYmLz9zn0+uqhkXPYKNepo8fHT4ZHz5Ksk17U9Uvk3FalDD9V5P0
1aacXS+zWQ4z5O1+lW3qvJzm0auqho2+zKebGqcJM67qbfrq1Qm8yldZsXyZ
LhfL/9pIg5beT2AHdKRfJ+lrOPtttrJxfi3qYnaT1e4FjfLfNtkSvlylV/n0
pqyW1aLIG1jvdIL7CieRw54+/eGHp+nrqs5vqk2Tp6d18QmnOYXBYZ5ZmZ4W
+aLCXc8XsBsv05NsWcyruiwyOq5N2dbQ8v3lMfxc3xBA7v3hMH3+9Hn67Olh
+gOA415Y3Iqn+F//vS0m/y7z88v7bZJefH9aldXiZhN28re8zlfb+M39l/j4
hxfpL1ldwjlWm8VN+q7KZrZE94LWM8MNfX94lP7w6jJaYFm0+Sz9M0DHrFqF
tf7h6Cg9fPz0cfrk2ZPD5y/CSv9WzWiy/aUmZVWvALY+5Xhj3v1y8vjw8IX8
+cPhU/vz6eHT8Ocz+fP5iyNrAMOGBj+EP63B80eP9LPDx9bD4Q9H+ueTF9rD
82eH1vaHI+3syYvn4TMb7QUgGPwT/8F/Pvx6+fyIf7dZvcAt37tp23Xz8uAg
z+r2ZlyU82pSLrLJqlgerG/WB7PqtlzCMUzgxx/nxTL/cVpV9Wx8u2ieH+1x
V3ynP1y8e3Wa/np2cXp2dX6SXv7b5dXZ6/TwxfOjUfrm1+PJ5dWb08mjR0+e
/X44eTR59DtNhjrQK4p/jxlc3tCNzpbpr3nVrOFHthzj/V8uiwXd1GP8zzZ9
CD3v04d264/Gj34YP3qewNPz4zfHk5MPV5OTZVasmnjluHBY9+3t7aTIymwC
4x5kDeKVVV62zcH0tvXLO/n54l36Ib9WJAXd7qfcr19E6leB47vJzbNlk9u8
fuvMK5pYc9fM/iYz06n9dnnxxk/tt87U4rn1Jted3dUN3MZf376dnL8+O+/v
GU5tDfQhW06eLNZrmt0sbz621XpVzTbLvDm4XOfTYl5M6RA7P0/zFm5dM8ma
9ec/Nv7N+ezHHx6/8Hv+pJ4BAJR5zfj9LYAo/GhuinX6tq7+lk/bf2Z8Aj0s
02gYporpCeDL9E3e3gKtTAGjQfN6VQBgNf+cvtmsrvMa0MQozWazOocdRoIC
jYoZ7LN1tQtGn8AexaD3IsX9++X89GJy/O7i7KVfCz5Nj6EX7Bo6rur0eLms
bgFVvQMKVhdTxFoXa1oszOOs/FTUFZ94+qpo2sGDmBezKoNLkcGdoJPAHW3o
8VhJ07jO/31TAF4m4KFXmZ/HOON5QDudx7jSeYxzN4/xEuYx/nQ4eTyez8aP
H8GSDx89nty0q+WuTUJKz0uXWbode1N9yvEIUuwJd+7s+M348MkwyOFtWDSH
vEhkqrJ61hxcZzVSggbQVznerKd+x5lfUERyXMNyl7mcOkwPBjt4//Yk1S52
reDXy8POKeNUT6rLD+enMMj4dEJ8WpNNV+Np1dwWM3wPB1men55UZQlQilA4
vCrY57KYTYCrkZPjB9ARfQj/rfPx4e+Pwh7L4rj/VAZgOAe8CrQZPoHryUCU
1/BHljZ5mx4ObfxzQphD+Gu+WS6ZpL+ZAHfxsVht6qz3DpiAn+tstsy3vVev
J+lvQHeb3oufJ+ksT1/nsxzgqv/6ZIJMTlusYEUJUa3TVxfHw7u3WFbX2XIN
nDHwOSsCjds17l0L0HqwWSPhag5giU8PDh8f/Pr25PfTYlEA5nqVA9tYX8yP
1+u6+pQtf/+ENGk9m/stlrYpN06rearNh2H48GmCJ//27M0OpJmXAZ/Dj4O3
eQk9LgXNTNbZIvfjvwUOD8ZARjmv13XRGPA+hDH2AW38+4YkAqUoyP+O22zR
RIgHXzH1uoJX8NUCLnG93XnJhomhdh3+mnwmmIR/yDTEfNLR4WNlQY6Owp+O
Izp8bEzM0dEzY1eeQAP8G+SbyXE9vQFWbtoCc+4uGglEmXuHH/xcAPcyy7Yg
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
oQqNoejq7Gykdf66uNMc+tEKd2sJneCXKIetJAyf5r20qF2JAnc3wCvwkyGs
fsQlShdwrO3Nygf8sVLZS8yDlKXLvaoiItJtRCuXs2C+saFih/VQtcNWq6k1
UREAXdTEFclGHSKLMB3kL98TtOBHzcB0e9XKUfICDN8u5fSxjE6Udl1tfpL8
uiPPDZAVPw2b/lXlCz32+7Gd6HQ2Us9Il3IgilNkikv8rKppkeUmlhLdjoiV
DKx3R98dSwpWA4yUvQiflkfmDrihjnpsBiY2QU1Yp2wEPPv6dRSFvXGaB2BC
hniNUCuN90k1zUU9QM0Bq4+w8CYizZElWtOc25KDOcN5Yc3KrfpGapXf/0Oz
elO14grNgYcD1kqGFjaLjdyEeAZyB0VixnKHqXrFb62aGkeUC49ZZ8DMtpGY
stMwqcJIOF+OS0HGHmOq2/QnfC2wDf9e+kw4ce3AB+mbKj0PSZHNEmk2KmXT
JNhJEiiH3AB2DwL+ScS+n+7qq5tX3OqumZttUSd8eKFEII2BceKUkJm8N/h4
SY8uWGZq8ci1XBm0emA8LCe7RgKOg27ZFP+pKmbqnfnZJ4dOapooAQGb8z8h
w0mLpbhUweoWtSHmDUwk9cCqzVg9RjHOd2pDqfCP4biq5e/tlURsc9B4co1p
8RuaGFkzsVbAUtOOhzAcowSByQ77JwU8OHmkt4Ket1KaE00+VDGMnSSCkQrH
zl1xRuKKEuV2tTjiPPpGCgKE4mlxiQ3l3bMEaWynKxLnhE7jnLEJGi7FVYeZ
EOhfqPHF5b5mAdeyfLTv1VrsOxqGgElCrXqrlzoo/+LWUmCRtw+jCdQG+yp+
noXauSZ4ugJMimpM+Sw3752OWwF6tAqYsHcDTI9CJax+vKMEnjSQe42o3FC0
F3ZAimjHkhne9k4ss0XhkPEMR0SbEsxO2c5TpgfamahIcJ4he0bLZdSmmk/k
E9eUAWzDKSnN58EYDsDlmBEQPib+fqv4xUoMsJq3Nd6KU/ejRJqRG9OxMxye
udhU/1w85ENcZUj5cXdHI56iJMEQdpuqKCAR4crvkehP0szg0BJ7R+sGQU8i
7WCniCL9rS32kwQ1o6yEZDS3B6/31O3ot+7Lv7mXV7QmDAqI9TEEMEwtC85s
wsX36hplUS51rho2xxxg2Qw+C/iKLJHwFcyOcfm2S287xWGNZCfhqFHi4FT5
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

-->

</rfc>
