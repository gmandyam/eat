<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="09"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb" numbered="true" toc="default">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT" format="default"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.
These definitions are in <xref target="CDDL_for_CWT" format="default"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition" numbered="true" toc="default">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB" format="default"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT" format="default"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token" format="default"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>

]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => general-time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252" format="default"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID" format="default"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types" format="default"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090" format="default"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

general-time-int = JC< int, ~time-int >

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl" numbered="true" toc="default">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT" format="default"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT" format="default"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

general-time-int = JC< int, ~time-int >

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>


$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => general-time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "nonce",      10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwvers",     260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "profile",    265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
swresults-label        = JC< "swresults" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl" numbered="true" toc="default">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl" numbered="true" toc="default">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples" numbered="true" toc="default">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation" numbered="true" toc="default">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
          <name>Submodules for Board and Device</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation" numbered="true" toc="default">
          <name>Key / Key Store Attestation</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1" numbered="true" toc="default">
          <name>Submodules for Board and Device</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1" numbered="true" toc="default">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1" numbered="true" toc="default">
          <name>Key / Key Store Attestation</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" :    "lI-IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules" numbered="true" toc="default">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce":    "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "secure-restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples" numbered="true" toc="default">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example" numbered="true" toc="default">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle" numbered="true" toc="default">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle" numbered="true" toc="default">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT" numbered="true" toc="default">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392" format="default"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

; TODO: see if there a way to use ~time
general-time =  integer; JC<integer, ~time>

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => general-time )
$$Claims-Set-Claims //= ( nbf-claim-label => general-time )
$$Claims-Set-Claims //= ( iat-claim-label => general-time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"

; The nonce was added to JWT in the IANA registry after the publication of
; RFC 7519
; TODO: what about multiple nonces in JSON?
; TODO: add reference to IANA and OpenID (or such document that defines nonce)
$$Claims-Set-Claims //=
    (nonce-label => nonce-type / [ 2* nonce-type ])
nonce-type = text


; TODO: nonce-label for JSON should probably be here
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>Use JC&lt;&gt; Generic for most of the CDDL that varies between CBOR and JSON</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIALY/eWIAA+y9aXPbWJYg+h2/AqHMiLS6SMqy5bUns0YpKbOUZVseS253
v3oVGRAJUiiTABsALbM87t8+Z7/nAqCs6p6JmA/jqKgUgYu7nnv2ZTweJ02b
lbPfs2VV5i/Ttt7kSbGu6a+mffTw4YuHj5Jp1r5Mm3aWJLNqWmYraDirs3k7
LvJ2Pq6zthnnWTteZm3etElyu3iZvju+ukw/VPXHolykv9bVZp18l06rssnL
ZtO8TH/Y5s0P8KjZXK+Kpimqst2uod/zs6tfknXxMknTtppqO/oxy9ftDTw5
wt9NVbd1Pm9Ci2a7ih9Mq9U6m7auxeY6PCsrfFTPp/msabfLXJu1RYs/rm7y
9KyEH9v0uMVlZS3MMb2qPuZl+uDs+Go/ya6v6/zTyxR+JFmdZzD5ss3rMm+T
j7ewX8WixMVn7vPpdVXDomewUS/TRw8PH48PHybZpr2p6pfJOC1KmP6rSfpq
U86ul9kshxnydr/KNnVeTvPoVVXDRl/m002N04QZV/U2ffXqBF7lq6xYvkyX
i+V/b6RBS+8nsAM60q+T9DWc/TZb2Ti/FnUxu8lq94JG+R+bbAlfrtKrfHpT
VstqUeQNrHc6wX2Fk8hhT588e/YkfV3V+U21afL0tC4+4TSnMDjMMyvT0yJf
VLjr+QJ242V6ki2LeVWXRUbHtSnbGlq+vzyGn+sbAsi9Pxymz588T58+OUyf
ATjuhcWteIr//d/bYvLvMj+/vN8m6cUPp1VZLW42YSd/y+t8tY3f3H+Jj569
SH/J6hLOsdosbtJ3VTazJboXtJ4Zbuj7w6P02avLaIFl0eaz9M8AHbNqFdb6
h6Oj9PDRk0fp46ePD5+/CCv9WzWjyfaXmpRVvQLY+pTjjXn3y8mjw8MX8uez
wyf255PDJ+HPp/Ln8xdH1gCGDQ2ehT+twfOHD/Wzw0fWw+GzI/3z8Qvt4fnT
Q2v77Eg7e/ziefjMRnsBCAb/xH/wnw+/Xj4/4t9tVi9wy/du2nbdvDw4yLO6
vRkX5byalItssiqWB+ub9cGsui2XcAwT+PHHebHMf5xWVT0b3y6a50d73BXf
6Q8X716dpr+eXZyeXZ2fpJf/dnl19jo9fPH8aJS++fV4cnn15nTy8OHjp78f
Th5OHv5Ok6EO9Iri32MGlzd0o7Nl+mteNWv4kS3HeP+Xy2JBN/UY/7NNH0DP
+/Sh3fqj8cNn44fPE3h6fvzmeHLy4WpyssyKVROvHBcO6769vZ0UWZlNYNyD
rEG8ssrLtjmY3rZ+eSc/X7xLP+TXiqSg2/2U+/WLSP0qcHw3uXm2bHKb12+d
eUUTa+6a2d9kZjq13y4v3vip/daZWjy33uS6s7u6gdv469u3k/PXZ+f9PcOp
rYE+ZMvJ48V6TbOb5c3HtlqvqtlmmTcHl+t8WsyLKR1i5+dp3sKtayZZs/78
x8a/OZ/9+OzRC7/nj+sZAECZ14zf3wKIwo/mplinb+vqb/m0/WfGJ9DDMo2G
YaqYngC+TN/k7S3QyhQwGjSvVwUAVvPP6ZvN6jqvAU2M0mw2q3PYYSQo0KiY
wT5bV7tg9DHsUQx6L1Lcv1/OTy8mx+8uzl76teDT9Bh6wa6h46pOj5fL6hZQ
1TugYHUxRax1sabFwjzOyk9FXfGJp6+Kph08iHkxqzK4FBncCToJ3NGGHo+V
NI3r/N83BeBlAh56lfl5jDOeB7TTeYwrncc4d/MYL2Ee40+Hk0fj+Wz86CEs
+fDho8lNu1ru2iSk9Lx0maXbsTfVpxyPIMWecOfOjt+MDx8PgxzehkVzyItE
piqrZ83BdVYjJWgAfZXjzXrqd5z5BUUkxzUsd5nLqcP0YLCD929PUu1i1wp+
vTzsnDJO9aS6/HB+CoOMTyfEpzXZdDWeVs1tMcP3cJDl+elJVZYApQiFw6uC
fS6L2QS4Gjk5fgAd0Yfw3zofH/7+MOyxLI77T2UAhnPAq0Cb4RO4ngxEeQ1/
ZGmTt+nh0MY/J4Q5hL/mm+WSSfqbCXAXH4vVps5674AJ+LnOZst823v1epL+
BnS36b34eZLO8vR1PssBrvqvTybI5LTFClaUENU6fXVxPLx7i2V1nS3XwBkD
n7Mi0Lhd4961AK0HmzUSruYAlvjk4PDRwa9vT34/LRYFYK5XObCN9cX8eL2u
q0/Z8vdPSJPWs7nfYmmbcuO0mqfafBiGD58kePJvz97sQJp5GfA5/Dh4m5fQ
41LQzGSdLXI//lvg8GAMZJTzel0XjQHvAxhjH9DGv29IIlCKgvzvuM0WTYR4
8BVTryt4BV8t4BLX252XbJgYatfhr8lngkn4h0xDzCcdHT5SFuToKPzpOKLD
R8bEHB09NXblMTTAv0G+mRzX0xtg5aYtMOfuopFAlLl3+MHPBXAvs2wL0kQ2
/RitX1+hqADvBtcNJ3NbfCzW+azgteOvA/3yd/5yMkjKz87OJs8BCR4ev4u3
HV6kl4KoRuke/ZaGLFYAD59/KoCXORdyk9d7bojTfKqQ9fDFEOdiWBD2JWfs
Py9KkLcA5vXdgYw4xk4YiSAf+PhkAozVKxAB/ZTh0bIS8nn89rxDUB8BYTyb
FUYReZa/ZeUmA8EIwP/5TpC6fUyzu3p3sAhDjGGIg++ImwSCDFLc7wUC+jwT
GjGAikHiXc4AwebE7QDuQzm12KwI4b4/n/y6gXfxkvDJsgA8lAKMpu/hDsE9
PvsMCGIG5BZkBbhD7gBA+Hx/vj9KL+pFVhZ/F+Kx3A61vKCWyC+coNxbblNA
yA9Ozk89Q3q8WYCkj9vzbHB7Bg5R8dcsWx3gw3Egd+Gv2/waePPphq9nuwE6
Djwy0MFNQXhMduRVVX3crPuAKVhAzpp2moTxcOUHZwuiJR7LZGDW9ggu6Bhn
t95cH3wq8luCuu9qHrAQgjB0i94d33ee991JwNazzRTQRZPXeNMaXcAB3JP8
cyCqOy413prD3bc6/QVACi4RchcABa/ztq7W1RKIBsy1zjNlPJv04hNOIL+l
dh6vDV+Z/LqB88wnWdkUHYYH10b/B9PD2dXwf88i/gR+EhP69nJ8ePQwmr1p
M945jpAuxkm9XbfVos7WN8UUCDDx8YOTmzb1dFLCoUwW1Sc85KXx+TNi7QEJ
rZsDGPrgEeKjbCdraDLeednABDd0NXVvPZi8zhC/PDxkdgAu2wqo5QksBLj3
LFogv0v1HS3tXKkTKphU+bANe3EGBH0TGP0h/DWlbqfSqwg/dFWnB/6uA5Fe
8lXHeV5cnk3+9Qmg3VPU5jkKBlxiPv4Mb6gZUObJSV63w82I3IKoCxwqcIXQ
DDchGY/HaXaNF2MK9P+4/IYyLUW2BRBhA9hKNGaA/KYkISJzmLQ3WQtcWQNL
vIZW2EVOmG16k+EYsGw4ommDJwRd5DTaKMngG6Jgy+IjtGdNyyg9r67kxSgt
RfZCgFsjvMHZp81mejNBQbNo3CxS+LVpYGLXQKuTOl9ukYVdg9C3HaV4g5EJ
q1O5y2lbwSAtiXN5elPdpivoNS3a9LZobmAR8J60rCmIOjLjCe/V8RUOlRfw
ooZZD0r2MNCgWH0LX3ml4xgQEnQOs054JRNoDp0uEYxggguQpYFILJcwDRhU
UTb8AVPEWRApSmBM2m9UCiR8vqtiBox1knyHggwjMoTRBKdv54lrm+VwzYgu
0/GAQANUDvcTfsnu0vlO4eSu83SVAf3MrqtN644yzezEmmoFn1fz9jarCQgO
cNPxIcDCDB9OkoGTq4FdAQaQTy+NTi+9vanwZBs8HTq2KdLwYk5LxqOjU4M9
Ig4A4I23GRcHSKpqw/mdtzD/LYBlBZcD+yqrtnfM1C2+iLsr2oHv+Vv3Cmdc
EMnXVyNCI/nnbLUG+ZGEZVwaYATAdzW2Azyd0enABSnhy80auwYgKFbYMx0Z
nZKcGN1n7ANOCH/7nSwZHr98ERXi168MGAiM9BAVj1+/ThIBYzxDhCFU8uOo
g9DMvT1+8cj31gVt7v3JIfWeXHXmhf9BpnWGU6QlF+6YGpDd0hVgV+CamlW4
xw6uR/gh7e50A7eDJ3pxjVqc9FK1+chjAqIFYoTLeYA4VGd/+CSaffwlYuHu
x7+Fj1FDCx/r309xhaaLUYhBaFkQSYDrhfQZe1khDGTL22zb4OWRizebJCSd
oQYytyH3CYCyGTPJBEPRJ7ilH/MttCI6suRdgjNDpoumIH3Rbivzjd1MgZtA
HINtqD88bfiNgInbv96AzM+8rcNNBNMFg9yG3xISiuZAqGGVAf7uQOKeEoq9
FPgvRJXQtEz/hhtC6ADOEk4dusH2Jd1svrH+6gMMMI5C5CJXoUCeY0qLhx12
uijSxYnybavwEEjQ3/FRgbcQUSgzHYBbckBT3aeIunjMZgQ9AEcyMvQ1irAb
EyPGaIigkdCVAFjzuloRIFTTatkwhbt6dSnACDIrwBPtnZt/7rWHW6FZDY8i
HKieSY6GBjjZO8e7PL58xQOiFP3tAdcwGqxebi9gQKUJji2AsYk2jeBUywUh
oU9EBq/rKpulnzKgZ3Bu8BWCzDRrcl2A8EvL/FO+hDH+hPtOm5jOgbMV/NgE
qgOS/D8B7/aRJ7kCDmaJL1cgMYKQ1xIuQZslEMRaDmvwg4wOECkybA9sIQh9
I4dIYBPxGmQ2w0CS8Tvo8jxS53LnedZsmAFWJGxAUW9KQkbYNMwLpM15sdjU
oQ/mkmiC1sppbeFuDXFPEctUAPv969vLVGVi6OEXZFbhU2D1ggrdqCtfIJBT
AGls1siJNsBiNa0QE7i37gAYI0L7FrE8M/p4qIS10Va7zD/TfyvA5XZfCHo8
q0KUG3eImS1mn2kTM8DooikmRp6PjCkd0Ym/kCLHK2v+ChfAk4ER0n7hTAgj
4CTJvO152TPEoGj2wWH9i3d5s1m2OOfvvlMmWIUtvgXDy0j3mFXYQ6xV53PE
boy+mP9XoPA3h3Zx4gmjW2nM3SEY6RnEnBazoMKnMPmOcRd2NoCpYFeuK5C8
O58b7c34b94bWM0VL8PBo58tb7A7lqhfAq9pVdd5s67KWcPMzF6zhZ5XDDAl
NN3DQaMtyM1GH8SrX5dV0yCbxHiMOBrcREBkC31FAyqDZCeDZ62D2rOGaA/s
NgC8kC6ispkgP9yoyilv8IvbHFhL+C+giM4SBIvZkGWOuJDgQVY93Gv3GPi7
zEkpmWL8qKlMFncKeOKl3jn8oHBLaTbXPNOR/8HoI/wkHFSlOBtGCsCYGlcO
k7/Odc50PshnbK7FRDcirJETemhcT3BuOZwUN2z4pIythh5ubwoQsjIeJc1Q
e81yDAGido/QwC1hVdAoz2oYsQp3rFqPiYzYFs6xJcpE5Q/6BXaShT5hHy+R
6/B0hr6GCRClOVat6hnfJnp0dXZG/52iuoY6VIG0hmuZ1/QyfjTCM7/J1g3j
yTyDZejnxN9QKz817KR0Ui//LspZAWgLyLzSLX4Oq2PS0qwAC5LITLMIP3ng
FWoUw4kRYkR6oc8ZChr+1oCiiHtmMoPTRty8SoVfnALKqLMuZN5kn3L0xajg
bgVyjx3A3QQCgpzAAnA+MICKoWC8T1kDlEm0643JUXSnqUcAS+sOubBPeHfL
ijlc2B0bSkchoMO+G2wGJKdYbVahmTNnCph77Ap04ASFjd9E8jg9+9lL/eu6
gM0pllsFYmZ2O1iaZGjiTnEPhRbMKxH9CNy+JWdBk29JWTCv5dKJ73BHvKl2
xGy/shufsmUx458ETzOA9WYUtgVZKaCSTIzhBdl9aqc/dfecuU1YFLF4NaBg
YgJhN2GblAGIjPOiqMCLjoJG9K5BLp+XgTy7yT+6wcSeebFkoHshAaqBamP+
Nd2DJaP3yV5QZZQwb4CsAQ0IHfYoRV84glC4rsSlXBdLlfXmrG1IWWXJU9QJ
AaeQLWCJ0xyGKKpm93xhqUyPOptP3fmtx2nNNy1hp+OrMYhIWdDACbseOx3w
slUeSHPGaUTFZHkg+JBURoCo6irRFI4EWHkjF+RCscRJfsIxcIZOQB+x1ukV
cgyo9iBOJl/TaVeM82weBCxMe3OGFeDmeAcyUfAIFbsmiGzpkm7XOcjJk8Vk
lL4+f31GD/bp04qW0P22vWH/LxFaaYVkcowQw7z4nM+C0iHNpjXwE6RrM9Fl
GJbp3PBmo5HZUSPi8Gh2dMXRVWV6w0Qy/XlTzoCyPQB8sj+CWwz/pRuMCIbk
9bbeECuFtwho+wwRDByC6BFgGTPtLuAdvpKylwzaTY5ydYsnYVq+oJnA5plX
XDhVhSgDVoSChaUWJecQjMDWvMqadjRwg/hUwm4QhRcvkUlyMfdqHNxqY1zC
J7wYWwEcVzRtpGVD6hYUb+H8IkmFlE0s6pgUzgrrSgeg34L8T09fjXjBqivq
CjTKaYJIN0Wr+s9FiVyoaJTe5WtArMaOP8Cu9vv6uAzoHiCrdavfvan0Cxxz
3yvrgsKPUGHJNweRv4ACUm0mUa/fX17R0o2zt2/zz9MchmOFR/4ZHQeKFgmZ
HoxoFnpvRD4Wjk/OiPlDEkiLOfC7uDE61IRZLZmc6xBvNAl9tORGROkG8WUT
2HGc/lC3rEASBSjw/uTmtIvekLimJ3SKXiynAUZfZeVig0j6AR63ns7Tw4ew
17TYmK4yF2tylgBfDefcMobEXnBLprhs+K9cG3rVuzq0QeelMFKMovDtCP1D
AGsWn9MzfOYnRSovPafjQCFrYu2QkVoAE0XC35cvfwOJQ6gWfMrn7bpGRRWQ
tjlsVUEyDE5mVTWt4FH+wJZF5j1cBGm39EzoKGhNGTcjPzsgfuiFA3LXbyf/
7ac9tcgoaCl9nvE88bvfofvfgYiYzthpfLtcwi1pjMgQiMQnnyP2pcFvka59
AkqcXS9ZyJ8VrMJHWMImg0S4ADDakFmLu4mxGG0J/PcW4bKIRFXHpwGsF6uC
9Egjpn07xrDN/Fa/qkK/IvbKgWHKDHNv5xir18TxpOZyzOgsOAS+JuUKNu1J
70ny4aZAsatl0tgqHznjS4mIRfUrprKnXoa0N+6Mf0GNV54eytq6Xjlfv5JU
lyPk0kAwAa/HcUzfqKMhgb9NTZcBtS9lqjQJBCWUVlfIqv8d7Wdl0GwwNwM/
BjVEcLuG9EZIvzy/L6vEfUWNZ7Vp7jR17uiVmEC6I6zMRT2+WsBQyW400Ow+
Zp6inzY7ajXbTAUXGKmc9MwwAeLLqmTNAbFfTLJXOZBKRGBKF+dAym4A8Tdm
L4KPeZaI7oj1H97GK9MmdRa9qHLRjfwL7BW5wgSMg31nxAXBUJ/4/UzISWzs
MhkRAAa4oulHBASRLt/lhKVgsH/JlhsRCMNwuDlhwwbUgap8aHgEPR4PAcF+
JoLHHZtiSsbunuhwi0o1G+/E+PFW7J4yDbLALNsCrS5B5y0b8o5NnL7jtyrg
8Zhxr6bIHJpKhsqofOZsQ8oLB72GmTCDvCt8vmhCRq5Jij4cJQnqztBpVvwk
eYOTZ9YVNXPFSmZnx0UoK1qB4jrldeVGbOhD4+9xHcK6mPxx9/kgxvwOx2KC
g1aDa1hRnpf/kDY5/fJd7fpALr/cisprp8qXmArWgZLDJZA/5BrgPyIImvaP
0GOxY0roFj64tCs2rYWVBTV/py9dBezVLlw4B3ybsZEC7sUChX9BXL2T8w9+
aNK3FfCCpMVO2SvG4It5nLrfAyqt+DPCTHmN/jh851HHkS1RkAgKClGWIbQQ
rRo+OYaxolxvWsF3iA1IK4dUA7VEuAs794aoFTBUU6Ik2BduAvKNN3m2RB8P
sfBsGr2nSgp+Cd4AI29I6h2EzVYOnsLjasYyXRQnplOeHTEXpGhFc5TKI4gg
SYlNjCzIYE1zMAeeaccakS9sDcOtQTQukLmym+qgp4tMbOLklHGNqq/6NqsR
q2xKoNCE1YdR3q65EPcm3ZAZt0GlJQlO0o8Dso5FBI9C4a6PDpubarOckfzJ
lpL5MMziOB/L6pb5NgY/pLw3sKkClKzy031pdb56/QyqjXbRXpA0S7iRAXvg
c1q9KjeqsD4xpIsrAZ1z/YkXDVd0yowZ6zWHz9JNis4Kr8Puc42gHwUO03+x
/tPxKMrO4e4g3G4Q/GCdy6pCSr1Zs6Z5BoIZ6ko7t6Lt7haeDs24oilm6Z8+
pBdnr9FjlgKV7prt9VbPhwkSTgEnYDraLH1/hq63DXs0lOQkv4+zN6ekHTeT
D1bs2KZSqk3fjr5Jjs8R1LSD9fR4aPAOfBCBAY4fXQhLc87o0Pdyltfk8cmg
Gm0m+Y3ZK0St6HE6LZhzJBIoMU5kp03M6QTo+qxJ91C/sDfi/6ZvLujvd2f/
4/35u7NT/PvyT8evXtkf3CKBHxfvX8l7/Ct8eXLx+vXZm1P+GJ6mnUevj/9t
j5ykk72Lt1fnF2+OX+0N20tZI2GCOWM7L40kP5+8TQ+PWMjCSEz16ME4SRaU
S/bHJics/gmbt/UGpeUymWZrjOsA2oPWRDjiMkUY6Nm965w5LWf1JrU50nQn
6LEHuD5ToTIhsH6ZvEyP03WRTwkvFc4VFbB3XtMq2fSg6HCC1iq+Ek0X96+z
ohYPRDQHbJiDMUdGFN3xjpLoUQW3EPJB42v2BmNsaFIbdmhv888t6i7Nnqpq
aCFJNJVJeh68MzP3goec99UjMtyf8y2OdqV6lFW2ptmp45NNUVhz+5CIon7K
S8U7I5K9m5huFrcRrSdayGg8RE+wfDZ80RSpHQ7z4eoAD5LDJNPLvO1NVD+p
hEwR2WAFmNuChtXq28A+Bdbv3iAVSfQoPQ0K20miQjAfYY0W5EC6UOw0hv5B
u12L85i6nOyjzRn4tMCWoCsXbtd6XWeFcKWAJtgSBMAqKjAy/bTB/Bs5GhSN
GT/wTNFnElBNe4M+u+iQm5FCqmSnT2LqxG7BygpWB5GJ2jGHLNKqbgK2UfGf
Wzj7QsnU+UDIRFaw99Iw26hmPpu+cJy7RUlGS+aXHONqmFn0uzu9jhnFzy/C
Bd1pscupePURPwisfwEUlHAZD5iF0LFguhI31AmHpAAgHUTueAfslMN+GH+d
JINqDV5EuBimcVEQs80T66uBD22QHtUk3c0MixoDIcc5VeFtjTlqwN9k+QLp
acQSlnDNTWfuclp6h2E7kc2IJ24zG6XhcvBMiCO9+0CCjsNo8acKADwPUo8/
XsfOI4zEzD7vsLhof2L+X3UffMXkIRq/BMkwZjMRgqhBTR0EiCgpQhHOArgg
YXrnHYHSOJ+0L4IgvAQZnrxgRFop1FJnIUc4AeSmy/GiqmYy3xGIkkvovnOG
MIWyoqhra4ciFpn42JyMCLFxpwLEcbPS1RaNGLfIZ5KcCOgwYAZ0Jr11rIrF
DSE2Mu+p9RNvupO+yYui4h0M4wgDVa3Hr8giyJb7YHnwrgRZuie2D+Rw0j0y
rOyNVDUi2FaNoPQBH+b4csDjQBV5zL1675aJjkk8m/giGyHynYb4BuG5xdRn
XuVK0pzjFrM+rD9GnQx+AhdygUbk7pljr/wdDWJ2HQMPvkGN+Pl2RmH5hWb/
bYMmqa5jK7AjqxfOQCljQjNyghQ9KMDVjO6P9+XmTdE5wf43bDt0JLpHsiPf
NLzVaBVuu2ZhsQcjHFzzE/TGxPM0q284pkZZxkYW1ETW0gGb7lAvIpSaV4oz
gaijoxq2VZltvqCiSKimH3NTg5B5ciMWbL+x8bZNEnYR65gwdKIdO4z4vMbh
LW+Cwyq5nwXjMpt+vD3lDRktx3QP2ahSBI9X04Y7F1gzQouw5Q2RvKIhM6Tz
7YyNSH58RolEfjprdQrBhk8OrxR8Uea3nd1kz3T6huVk1tmTd1fsASLuas5o
KwiAleZ2Hsl/wD+cC166Md5zme6P6fffh0fZYmELOfBv3gMmce+SZOdXP+JB
6rPXjPvuag13ots62T2wdG9PBwbof4FD9L7ADelsC6K9zraER+Nf+HB0dv03
OBQAb2dOw+3umBLSFgQczs0iJk256sH5CYGm42HcsaYJ82tSczabBYUcy6Kd
3DfqthDe/ebfeWexwrnNqFtG7J11Qx59pC9F4QA1Gd7sq57PyJcgFLONnx0z
MBPaQmVYEj652zUbCVXIbBXniv8l9phg0C7y0+K0b9Jmmp5ZI2+QzcwwvMBk
MGS0//JFP4NVo1ub/BqFG02N4YZv6pLdZk0ihIHrQvQvREdR/D0Q8RRkcyJ8
YSpBeXFDUxkQuS3uiMNrIvEbxXYaWqm4uPGbiwipOVgNzj2QqV8Fb5iMd/fZ
/bWfT+gBNQVkUkEr9BuyNfKLB2R43GfnRcLf1CW5eqpVkjRhaBZGkXe9tOQL
0OFrtIOtidkozd4p2B+tilMyK2BALcin0BQgfpGLKdEFcLARbc2oFimSCark
jTormumGEt+RgtDdHLOIkk5QvSqOEaB6dvVdYjhzCI7S8qr51Hu+f12zkASK
ml1okmrwERrtAZpcMBVeJ9+5ULUkWwL/O9tKHyh6W9APNqYTQbzQpkvgk9v0
OUhAaOh48PQovS7aZj+lewhgOc9vAXL4LZ7FpkQnq+U2YczCQX+TdKBz7Io+
Q7WwbCjMfYH+BRXHPgqBAz58m2R0ZrApTC5jFT+qRWQQ0dnWjmex5agKmfWw
AG4yB56Z+ogUf88puClXbwgMcVYGRXZuHHYubPIImDfSeotNgXmrpA29Otdj
0moEaUKwXKA6338feLWxSHEHQB4oYJwv0XiZXYOQ8eNPPPyYHOcO0r+kj/7J
P/nrPmais58/phj5nU5oRg+eTyZPj/YTITDoAMdDnQYPB/IvJCkjCuvscCyG
rrwZAEAlX86JMdoONlBtDulZqykAy12mzcEGph9nxjIyvTJjGd9mpD5Dmhr2
qt1l9lTr8PsSgQslZAkXMhPEg01ezPbTL9+hNYFcO8ms4DByFnn1R4Fssh0c
CJ+sqmuUpyQePktvMdoypWBJ/PkzEIy2AlEFFTfZR40YEet7PkuCUzc56pP+
lfQmqi/VE6hzJz9G0RLnEmNOcdD2GTpzjtjJhu4tgELDGqbExE1R9mYfi5L9
PCK7ChJKEssKNwAhf0IYMHWgcSWGUMOO4wY2dn03uvVLlvs4fRPGSzNhFAde
t681YDpC9humvJPU9aiMcPx1CKEkCy4HSYwS1FozAczEJ7wUlgnFZFjYTORk
Cq8IIkPUXSLdTYAgpnBWqSYYQW0C6SRG7AwF/XB8HfnxWm/IwWyYw+IwfNQY
QzdhuGjtdEP968Q2QjEUb7y6irIZrJiL1UO8LHibaf52Anb5QRwfsUONV2QW
uYYcCv5YsXkRh0soah6IuTpv9/2mvB2xSj/m+dqUGRbwmqhnRrTk/cgip4bR
Ae96ggMNV8KLK23jpuaVyDeZDL0wHsr5COUERhy7hU7ki1zcTdgXMwTs2edM
wTaknuBoLNgfpEmIl4kQqZenGgOYQgZ23Tn65zWiPOai2cv6Dl4ogEiAodEg
4JCyVw2VdH1aCcTB5B9LyYn3STXUEnMllA3YWFYlxizMPCebiYajwNJJsKVJ
y5dIjS15S3rMJEXMc48o4F6wAS4Sfe6ImDO/MMHsgL0Y7i7VF8ZAurEtffxY
Npk4mgeH7jBw8Y+ePGWOZ5LApaWDxIYazm5fi2GTWB5SA/3P9Ao7+hk7kr+R
J4a/47xY/xNaPvz88BBevDt+c4pthZ3L0sNHz0fp4YtHiGphIuNrtEnDrKqV
6vmCirpSjyTK/WPhZgKFqXch8GDIcRboxlJKzr+S0bNBGdkwKMJ/syaFY+Ay
g7JRZoU7pW4/dOwzZSDcICR/sm4OmLoocxAIOjfmumBkSzF1t7Xoc7+xJcxF
XgM8Slw2I5hlMc87yCbsXrjeaJPGQ13BxdJDh2OhlTL+oM6Yb83KbLltyMEa
YBeBZXxKroEAv3rQj+CEKQ3U2ftzPWxzyaMXU0kH1tHnBH4flbTwsUtCQw/G
RwAt+N+nDxFg6K8jibSe0ekxS3zx/nyE/zd+/JTJ/sn5qccFjrXtTiXHQEwO
A1sZ5QSkOFZ+L+AmHJ9vazVv8zJQmYw4h4a9phG2Xh+faAZVJNG0I3QJTT8H
LWhxGYYONBXSxWA65pVP0gfBk/CW1NFGMzge0gRHCde0dHFNiF60RtGcRsGv
kKReDP0hTCDhGLx4DCOIMn+hPvfLF0ss52DgMcLA67Pz+LIfjWeYMtJtIlOu
oJss0+fShvAJJoAV4DipZnz7QaaRJhHbRXRhqrYsEqsc3RyJ2YidNpziP2sY
E4p4D3MQSD88cuGtjCwlmxCO/UMjBvUHlF8H7b2XJ+fnvcQ11Pifw5/pYxmZ
7EO4USNiQR5+fvx4f0K6L9o27lwnaa4mZhd8tbkpxUVrQ7b7y3954w10Svij
VMV8Pl9ept8hP0CyUjNumXpgerAf9+jMTyThAe46nkKz99WTJpyuuQOz8FGj
+R9VJrDzN5sVqmslmg2YjpIPt0xaFw5iJneM4EfHItSxoMxQx8FFQVmlGXec
b7C4NREWa5H06hNUJiWOv6zWGV7jcMYizUsWpBVn1NiqIaVo2QBTY242C1ub
pF0PLnOt0zgMXCHchmB4pFueEE6kiXmPji6IdrwoKekbCOI8UiIj2Shnr6E7
cfHgo67yVTHDI2YdQdYIJ8jSeVZzyJ7wBsSYIFL4hK6gcwCSpXhaUNSfn5Yo
Wko4oAn28MYYG5gwd6dUl5PwdDaKNwFh/RlvArQGET+0D35q3lHfTyFitRoA
+1VOU7mKttDxdTHe8vYT9I8WTram5PdiFSuFR5U1EXdZ0lQmaXc9fm7QA64e
84oySKAdulq3gPz/TkdVmFcc3o4GcMqUcjNwgLHsDGbuw32Wn8QOUd4DEkaI
w+6lQk3fv3vDLlBGzHp8v77D+76pyT6Upt/WwJCgH3Qvhi32k8T+Tn9Mfzv5
b3h0T4/Gm3o5Ji2p6FwOH00mR0f76SjSxDybTADL/WSq/u++g2muirHJHAJO
Dy7pv/tkrL0E6keihWahEaqIdipSGmNb00u9Pv43PV+SzAPNZ4xKWhxJLzPP
xyAOIRlFPSwGgLjMCS3FJvEbzlbCvWLw563kWB+lCAUV+1KjxZo868bXlbrw
lgRFLvEBgk62EM9WEpUnLsUATp6INCYyMVwGnfJ+YEoK4oZGHHTP6jqGURUK
sYtrR+X5ywkr3fErVrR7jTYfM3blkmSFwIxKBNLFpmhIp8FYAkc1F1pnHOTe
cBrEvrhuR5FDDs5e7hu2oXlCD+rgoAyJ+VcD0oE2pxhNvisGYs6JgWgGlH/O
Ap8l+6LxlzRTSROIQfM0X1PeofqM9825TlOvFOg3H+CVLhkIg9tfjaUzyPkA
zSIiL6D3SIsLMr8y7nbAN5i3UVWy1L25WFG2+IvSwOytxZ7TZMn7nfDx3i+n
F3v31Rdc/gMKg4CNym+ho8tv4aN7YKMGmzcBH8lvwUjuF+CkL6Q9/kPaIt7x
uCv56vHOnzQ9B/lYx2LIA6KkqOdkkpq4bI5d78+LGrg69Ns5s/Sdrz3legD9
7yuQh/SQGC4jD1vk0Ah2vTMvrBSgUG4ze5W2KmUCTipYX+wcPVEonyEi6FoI
2jD3rr4AbseMEzb6WVBYJUYJscwpGdV/JhpNbIeE2kQi6XV4HXnhHD5Vu4qK
lKLAoo0nbE1MgFBKdDWGHq63QpY78vD4Tnm4qkUNf0v3QF0laQPkpk5zRVle
OFYZELZERWsmNay7EjGoyQoTF6OBmCfDoBHEeEisSiQcQBYsVIDyCX5U+wtL
lcttD5hgSzjxDXK/qCwEwIKdLZhV1cR0qsAQ5MSIBY0OIINeA3pBGOZ5qqE6
7LaE+yHqiTQRkk7vT8djVAcRvqo3pM9gIsPugrBBphngiHENL2Lwbm4cxrQ0
VKKKYg2b2ttesNJJ3Ljqar1lGr4mFxJy5NShXJtdo8pFCZmv2LWMN5ptmY3Q
XnF1nGKPJG9I7JnQCAArjN9H4sVx42QiVr8YVpATROllYg4IGCCXNoLuD2k6
eteGnrLjLmkERfds00BIi0RzMeZq/nSNleEbLWoVVFNKnEkkYsC4DcsD4mSn
rA1bWM0JznQsNLvXx+NXI/z/1/T/l2kV3p3AOkQJ8O4YhQ1U1fAH5GSNyQbJ
61ESsZAmhoT/R0ek3CM2LPF+8vOipnxJyzmLTG71E5qFalKWW+npOfaUMENH
OxD1FIQv1xPrdHA1YaKJTZRVRcjaP34aZgmLe42bbndJTaMMysDWAH8BC0lC
CqQmR4f7E2ZYOQNOtHBLK8S4ollnHKqXlQlvIl4BlCY1vwdxa9GO8DlQTBam
Fm/Q5y0k8U98En/RgkkKfphUpKsJuVI5XHpJmfATzR7NbTk9Psdr2DaE68zp
YVBj6PcAwTSN4Ti9XlbTj00iSuQmx7Qv9BHPghMMYr+anYIJQnDxTDh1ubCG
DfMz+ec13RJSBv8JOCh0okcmsJOjpBso09NjmU2PMvuhJpQDO09ACOTiSYwC
Jil5rTmiWjSJOZAgpqToAFMxCLUhKUjNGz4dITfnVsnuBXRFar5zjLP2jk/G
p2fjo+d7TI+S2K1V1fekzBKv6Yefj09G8P+nZ/j/R8/Vm0nQXHBDfRyWQSKc
uMnuwoyjb6BG1t9x1+IbYdgSnT92F3SJ8Ci1RTStDr7i3jNmLkSRpeFUd57f
Khnz5Qv8h8Ad/uuVu+p0JewKojYSWMSJUrWApN9ij+ErNTFKHl/y2mYLOc2W
N5FTN+GuMYLQvXP6SZQh/qby0kPzZRKWIPiEP9YdlbMZfbNf5p/uxYMTW038
cODD+eea3CX5b6y7YD+YSUuARQ8Nf8Tp6wNqTWqE8HuMuV1GrjtK8P9T0nkQ
+3g8Tjod4OtBzcSRji0cpBudn0TjyyM/A/consPh06TXz85pPDpKBqURTmEi
3hYqLozJG2E/EkNMr1EQH2HZBtlxYeTt7pyyOGP3dOeQQWyQy1MFl4tlT8TK
xplSOwlEJZuPqhmj6ahAK/YSpHuiOnDTZI0ne1aEqKI2hIfwMOTlFBba96Do
ukWY8odDQEC6ulMAws4kfIIjrDrdTTC1ij1zAXhur2TqvF82mPC+wRCYu2WJ
EkDnInw5CDYl9uiCYjjLTNfVmXeJjBHYnxUJsHSS16Qs3FqPIZtFiOAh/Sqq
FNnrLlgLep1wSEjog9CX84MPKeH0FGVBTocUEcmILxUgQJJUlMGDZGSsDxkR
xshskazqPGBF8FAFIKeEdyYXG9Kp5lGnE3fIWi2J42C1f2sJ3P2URN/TWQg5
l9cUN00MHfkNsNdcUY6xu854weDl0zmDhOXsxLFlWLU2cYpPsU2RDoyWT8Cg
Aa94cmTGdWZr2WockcU+uN1jMmeFWFRWo3/2I8Cwjx8pPUHfAwXy5hs6BWnH
TbRTxHmWoWP3zWQbTiF63W/ab9SVyCnkCMCzNUaAofE+o4B4lN3NiGPSMN4o
1HmginbZSiCnWn1cskJjasVm1JhjaNC9oHRVlBtO+9OV7reclJbO4f6kNkb+
geZ2npNmC0jDwOM7FfRHpJ8fSeXbgX+8WlXnTyaPH8WKeyNZ/yLoRFYQqJbg
mTE7U+7z8RuhMizUVUe34XZ7PTTq14ESEQL09hc+0HBcbLqv2eaovDgBmh9E
LqBEhWK6hkbH1mmzmYljo+mSc0FLDOyhP5AEWtD3fLO07BmoPsZU0hg6J52p
1hqdgiibJ43u9OqKSIj8Lmeq0O9v1zQrzVmEnbCIjB8+FpP4ly9cIpTqd5AP
kkxbO9BlRYpaQiDEVV9relNLQ1Y6ta0uh/qgIUopSWqykxf+76wvqnnipiLW
8aW/zmqqXH0vR+HuVdGj618WfdO7Lv4FXJi/UIfy8GVKWmS+JH+UnYOH38cg
kvw1MmhpPnpyhaLJJklwgUCUM2a1JIJjcIgn6MhCEjDLa68vXRRk8GE91uOF
K1HM84ayLAkpE+uKvfE1BAq2LTPu7BA38ksXYQdT3E8pr2WoMcJMzeWHu2d2
DzyXNrdjXHI4L1La7w9uZ4RmEs0X8zFvQuGWfAesU44DTrlacVIXSxGkLXUp
uuu4s1hx9R/f3u7O0p5WMt79rB23fUB2z9TqcXsf2P0G6KYx7CLGsbIEHN4r
oohVDiGeLxZFPGj4LH4/NIkmlOZgpbwMCewk2iWFDti2Mc3WYsJnzTsXLfqY
b0lfR2VYXM0O1hMtJD9qEwJErreJ5dmeA3vXq8qSxmJUlE/b2rqSzqm5V+e1
BG3DuiwTZ+V9EF0IvA+ogUUk8JWUl5sFvoEyPC6otidAxmE6Tt+XocS0hOo7
xib/DPTKx7f5hK1oKU0kMLY3BdlPnErDliQ0JuCOTFIKFb4tmnxEHjpR9TRk
PfMMP0UKZ/uD4lOdUZYB2M9HMPF30bTP1C8tGir4W7N0MRZZIbFa2n7jVc2I
NGKeU8rEJmTMwBoBM6A0WMBYnc5H6W1+jVV6bhstKqQ1XJzl2QoMqfu+nXzu
6nvLjAHwc7bFcWE7yQEVwg84Rafo6Mx/QL20svRDMf6lcOUqEnEH4LAFDoXP
sUqrFYC6UF/CJg85DSx9CClcebYsrGwcxHDpqet8mombEOufqOwfI6BaPOjU
2ZOvIcyP3ARZkGav94rqTFhZL9VtSabKaFQpi6MCpAGlBP6gB30aJ7teV1yr
qA25vz2EIvF/DEDF5SrG94It0kCs8lzUcFrf0gUfX8pgRzicVlxHn6Dk2+Xl
v3yxmvWoK+4d9NXZ2Q8McQljVo22hz7QrU2qooiCUqEHLo+h23g1hcOMjDnJ
GirIk6yAgMKzZZ6Ir+eBlAE0vCpNnUNZkhzBnirf/q2t1JUh6GL8KjpaSvmJ
NNHe1zfbhpTjqJpAjX5Nv3ZPwsKl5AqSGoYx4rpqOSpGPgfopNRqRBekjfNi
xquRAAeN0TkrErHboXN5+5qPJa58osoK6U/1NhJACGx3sbhBmh4TD5JMpzdF
/sl8B7llrXF1uemCJdASJ2bKMM1ekGliSFd4IVZycKWqaOyhXIKknMi6ueZJ
Ba0oo/H8nSYQy2aYKKTNTRchkcRka70l7ccai5yha6Aoq7QspHTrdErkq+QG
Edk9qzHhpSiMOivSnJeDY3EHtd1b7SFWOMo2W5iSfLReAhpbSSYDcwly0WK+
aJiwRYGocKoV80bECsHp4dFDuv1cLPjr1zQhVjFq2C2qiyJiVIKXkmiTA8wM
CBb70HyTE+QwyDRmvRxLGD8nJnAfqPHQ8x9jhH2wQ+y/R5M+odzVUkWsJInG
5n+kmkj3/Ju9Eb86/CnpNbcP5E1oDf8e/ZT0Z6Uf9N7Ah49/MvnPzVc+0Ddu
gPTopxA9+p2ikp8rgD/PHufja3gkeg7xNpyjG4Xdg1xLhKbYkqIbSrz6s4l2
Ks8TR/GlCUfTipV7ZbUZjXVKrB4WhSjP2LW+raul6ZV3+hp7bb+YIp1/cTep
vRkATqT/AXd7qwjk50rKDaOvUo4pFEOh1OiSLOfdxeuR/IocgDgy0pV3nI0Y
nV4XpeEZ8qq6rVwMxv3krnCI4ZbBr+W+O/zT/HqzwDAuTHsrpz/DZ2NOhaui
kRb+wlIJtMfjW0T9XkbmJ/Qx+pGipFSY72niw2V/uzr+VXL+Z4uyQsegoBm6
3hSUxbetEirjSZZsNzyncRIpujeaFtpBzS0sfJT0Dog4teJTsczRd8Z6Yv3z
kkpXUUNejoSyA9lfM7s1olBIUcNyZtxAEUqURHkY65hWDHSsTlYU8RFx7kIC
gsRpqSI3K/OE6a5RK73IRcIwT2Qc6AfnaN2ipnhKjCqWESTVnL3nDLTmooyN
kGBwSfCy4n4lY68mnqUIJi2IjJVtZATfFsuascDIWmtX5ZX1oqFEgQwi57eg
lB5hgASTONn8eOoyxrUlKTd4mW+IMKdcNJS9gzQ7XuJdcoP7rNq3s4+5JPzA
wMsNxohGbgkS8JxwTEVLyQ/nAwsjlaU4PmGSZsy8Shu/dZFWCbm3TFUgOBYP
hsxqwrDxLbtuvC8kHz6zTGKapOxBvvAD5smkKiPEznA+4U8usSrPk3OkiaGQ
cSWDBFU17egR/rdxfTx/xiV99q6TE+L/RibPL+C/wOgJD16nIT0X9xzA28Jq
FRV1WyQaB8ldsEstF+BAD835nJLJXhaUj+WGyvAh08/Ao70n1rtSFqob+kMj
o6F4vqnR3MS1iglGuJ49Kwp59ETDh6m7tqo6Br6ihB9Fmwkoa104Mi66spGc
bWADwFNUhCDxYRwrkvpuCXwlc5BPzQGfLDaARAEUc15hWJpW0eRBUhkErYWr
NedCCG0pL0IowYiDb9guV7vSjCxRuipJ5movwJEEqMk1fmk4xwncssTupCH7
gpMRUcz5PI3LYnp9SO3rnCTOnM3ood9HtAe9QqVxQCVNJQl0hxci2un1clNr
UoHepScNFK4dwUQrq+Ly2CAuRDxbLOp8YdETDmLkxvgqwpZdj3iC1PRLpqUh
mYdhO575NninqlacK7FqjWlRVKUcCEFHM5eMjolUorawVl9PFakA2+/C2Yjk
7fJWLVFXihjadiXUF6B5jHUe/EviaiKivw3VytmfBZNdZ9vYWQNRItnrAtng
0RRtuMqijeKIofuqHmxnTB8SwtqYIiOakhirIybZaHLg65oRsf+GUYToyO51
lTTXQbQwt+NTwUFCn0RzYQJIwJOOQ6L4ph4WQ04yEXAJGfWNF2lvcstKz2kR
u+Hshlm2XNlKKah8tKbieqxyFFXlwCQ6yxJ8jdLXf32FxAtyxBUm2sCa4UYN
5J6jOJDPDgA06oFNTt8q37Xc3jEd5HOjk+/MbO16sbmFG0pMJsUZ1HIBgZSt
BYbdaUzSixLzUnWFMYMR3Xkv3fX6wFUkXLjJlf+ISOx/emNxN3kvezv5y0az
3nx7T3dPp2OT7Gyuh6p72Ce9YBdEwugpq12SpP/wx3TWjBXih5Uktlt3vx7T
3pFg+q2Wfq3faIrmze0Y9tt/BAsJkx76J1oSabI3Sh+mPwWQHf4n32gr+OjQ
feRXt/sj1wq+f+S/92ve/b1rhSog38HgTvQ6GGy1d4cHTfTvKP2pa2l9ZZkN
WI2gmQ4w8Ez//sqU3ZIg8JVFG3YjLOs0UnsI2BPfGFLRe0ugWRybULPQebJh
8w+PT9Jf88r6Pn57nn75Ak8n8BRmrUXPMQtZC2R+RB5R8me25IdsaMJsZhhv
SNQKc5mT50OF3f16+fxIe7KPOLEIpQGjkiuSu8map/lyCfxMVcz4Q1Tz2CCa
J7wmclWQUMeOcK5X/u4mz7TIDtU4Bs5KlSEFu5mS3q7EPP0a8umCyWUzs5qD
EXx3b7I36YP5siK+cryuipICOsbZWKquiMPSGuNWhUGh/P6YrnpJBsuK5Pj4
RBHjU/bnsD1IAJocNlVTI9iBGW9KyHfKeZGlThgytJSaCXOYa4lJ8t5PtJh2
X6pnWTh0uSrKjeQ1BAaubli3U+dJIJ/LrJFiENNWHRR/fXuZNli5F5A1MAtn
oYYoJVRvYUDoKUGXzFCXwrutwLmATBvSJ8jSeFGTlK6VdZWEPlAzY9naM9IG
UCLOcTjxYmVs9M7hTQUrh6KpoULRJOwmYWFCgqpU+ihCJilJBDrFiBji5LE9
vsCqe7gGVf6RxMMRw/LNHrCIH/PaFfkWnwR0oqOxUbkAF4GFj4wzPJpn4yeM
J5SsYtkUxMGm8NhDAYh3jhNjocrHACMhK4Y2syrdO6KKSVusjXcHE3+bENuA
RoPtiXjDRL8tClgRFOWP5Nx8/FzRVffFHwMm6r9RNLPzm/HuJoogei8YD/Qe
h/sAr9RdAh+O4Rxt3AVNc4MRFUAobLVdGqgvvEkDKXDYhu4H+sJbWeAD25zu
B/rCj4Ak1jak94G8iKwsbgS3lfEIY/flE/hAN7Y3grzwA6RP4QPe8LT/Ab2I
mqfpM/ggHEXnA3vhPnqOa1jkafxP17DIO/2n6QvjC5QteL8mzKwZN+mXGJX2
+Nee95nWgtNa74gQgyXRkeS76g2eML3wEXxwhdfkk9AVfMxUQbWHCZ2zLHSv
K8szdSlEAEj3OyslC9rFrCJ6pguu5LcuWX/vOVdrifq6z4JDtc3estC7gKiZ
LCu93KxJ8cAyhOk6E5e/b43ucw2Vq8A0anjUlap0WCtyn83RNd1jey5zLWmQ
PiDLVAMPZG9Cg0F4kAgnqfskqXYyzTvCpkYCNU4ohlSG7Tk+aEeoA6tkRCEZ
cqpQH01OiWfNOsMDFqHoLyvyld2k8BtkXGrJmOKT0IXCyOXWQklESyWfNMI4
cRHXYLxvJBVftjs5wL1cim2XnRGwQFZvjFRxv8vFn766OE4fnKLzNRDXVzlZ
PbC60hoV/9ly36yEaPlH3p5dACiJxje//fIF23B5dCD2//r6VfDMFv2nOjBm
HecGDRARuEdo12J/caab6LO4ohoZamiW6lDDng9F02z49a9sxXkLNIZ4e7bz
3uUdwfwvd4qpEKwyk6g5nbmjsyCyTdW9KXQ+qupFVophsOcz4soahe9d2SMC
zlDUSGpUxC7Sw18WbQh7DQrnod1nzjVamqhlcFPiKVOCDLnRcaw1twXJxPTP
+ESkHz7Ab03KJuSsGzEwwGTooDzcaRJW8gyc51zoRQwVmqdLQrkp02TDaqXI
Y1hxuJZIMHY7FDewDJ6YB+kd15Wn0dRFmCZmMqsDAJtEZysHAmABTdY1CEuc
6E/EEfYc4IQoufmLXd1ofgF5Zh3i8O/fnZvqyY1/xa6lFUapdb4CWqJ3hvGM
s0aw5G7vkf7KuYQERLz+yM7vbeWmMKZIrDqMj4iEMjnzIDad6GtNS3RFZmCs
FMRFoORI9AjCccP6R90FUYgnq423/c5JjLbwGxIVGNXdP0SKEGnA0n9J/0CP
JCU8hnmEn+oej09+t3m/NN56UxfhvS7kd+r7JYdqCNNNDdxqfJsBb3r1angt
YQLmNKJxA0QS7Eeca8juiY9/ZMuOdCs3PXZDp3NrcgtN0IzeTctx8D2fdUld
qp2SUsQac94C4x9CVTWWKqkdn6ukucP4c/eUKNe2vbH6mQB+jfMjqdxkRgFg
NLOaH4GVLaQGl8fkM46OpxTV4VxFJA4sraKaRehOFCXjFul4G61R/Jlsiv1w
syjIlRy1rWBAZtXPKBhyyWanlXmPRy4wncLO8ZUZ9vhk/+twtGrO43ScPPWi
Hp68qXt0xZhGh/w5iMLhvMUTgMgecVYxEMUfUONRz/nrh4amQy77Lmu0sBCz
gWxnFkRjhekyjbyJFja8rBHuO6Mz8n1lgxTQNPlWe7LMRLwKt4aYUhAX3ATC
qoWpFMHrbO9ciJR0pvwOY4ln5ImMhJPTpzQ5jSuCyxMHfqvXQTfcKOToIEbk
pDp+m55wkh8ptWSJIrgU76MnVHbXp68rK/7OpePtZG+L1sTz5eSDYTPDFz7i
nC/1Z9TMkb8KuYgT/RxPAYDH/Cc638BIVIpkmFobica8i5z0kPggA0tJbRj2
hYfe3QvQd0/NWT/IH/k2/lvdyMFNdrnqHblXtaNnEhBcuSqGgI/m/xgrT0LF
gvyej0itSPn3NTcLHv3I+iWHZ3Fjc3mMQ4IWhTJLXfWf7NxFzwp6YA0qPZfP
7RAkl1a0NrmFqIrl65fx/KLqS51b5BPJYKbvkGGrf10RXO3KBqxVMLvMikxW
clirQEaz6UeQ5RnHcXUf8aMSAiusUL97STyG7kmdInqch4V9MDL0mkH06nwK
BENE4Zhy2RkOQ0xzhKt2LBT25INS8hCi7DL64ECRRICeZVuMnzK8JNJPrvVo
+Pn9GTKbTGDKwiMNvY2fIGP2B2slwPrX0ErBV/k3yWNG376E36g4GaXRK/7i
Jencvv/eOrquZltJ7rLTZtdtTllefgK2Lhl8AwuXMHn6udGSdtOquS1mvW8o
I8xBLyXM/Tq/fH9+9ftZyZb/+3fdbIp2zAm6gUUaC4s2VncbUrAevuhonoxr
tcpE6ud+q7CBXGv4dQ+2dQT3qmnJNyxUO/JVcHuBz8Qs5p/xqwH+didH1088
QpGSbRNy4HWYPasF0uGM+UNMt4mcqNVdNlqNMZP9wGib/8Cc4yx8LscNXT0z
zbosccM8aLTbUtE9SkxgqECw7h1ooHPbJQlLjBouYUit3+gSpUjnzkQm+Rl7
LEwYH/bbk9H0F2EqaLUuMVpAsXKQKCEGOekfEBMDmPp4anumeKnziBGTe2io
qffsP4+cXFcBPd2BnbrtGT+ljKAGX34TRQ1NYRCTdFDEh/R1uLxWYczwhFT2
ZjQhPyIs0ZhOGU8bJKNpFZIfuLLW5Izq8ISlie9JkBQcDTe6W+3a/JrFrxD9
Oqd44TGkOYyEybyLpaaPk8Frl147Uspd53Ht9J4YR2L5sAjXta5PlZVmnQrv
pOyE9SmzCrVm2ghp2ikGL/D+PnQXYYlEXD2ZyNMhckG4kZupQf3Ih5AooMHN
VEVHzdGcOz+87Cw7w5BZ71fge3b9xBhVqsajpHdxKXVftuH7Xp1zU8nxF8gj
ccqpLC55qY7PLjpnFHgsPRLN2mQBBD03Ca0D3RR1yIdkzqzaj87qY16Xoicj
t1hXOc+ry5ocDh69JlD65zHJidZ25fpvTN0ZiYZy1935plcXpxcvQ3Vv/U48
8S45m4n3nO1kK/H5SaJ6oyFUSPJKcLg3J2AWjbf/YBL5vldzeF74JLio4pIw
auxTasq5JGVk5JPZcGBFXlMXko1MS8yrl+GFrZWWRym3OllNJJ9ThRrpRT8N
i0dBIUsIXyjMktKs2bBa9TyuAnBRh64A4dxr3oOTpnwgtjKakSuFbbOQMG3+
ihXgVFLwMB2PsWOM8D6P3FCjBZn5kw8GR5hHN7T7gQrJ314apYQYW/BffyLk
1D8LBXa1JYX9j+Vi4GfvzB3e7RSmDRoPxKRFC6CWr4py81m6o/D3sYtl29m/
rVgT7tPlxeg4B+jZDHOycVES1D1yQFSSPMFBJCJuWVw3u0fhrqBNndWWVZci
+mrgvJYYlp7VkjNVZ9JXcaLXffKUVsYQgANehjoq8pRi0zvrSzTRO+MlLdrr
M6IwygoRYQH6OJOrpLVyJHOY8BBMegwwRp+4elPGsKHezghjq3VLlg+q7IWI
dFP28IgAWtQxxhJgrhYsUZ9LDpUYW2GvMgJCvSSPnBWcLJAxCJeLwMX/c9Bq
UWk65FVIE0eRjnwtrynYDd2LWWPOp/K4NzfmMAYnhT2T2YuS3pmy2+0smYEk
J95MwkFngiKwUe7SNRnjEZ+E3AF2ZdV7f7/pyIEvY5lNRp7FQ/eHfeIA9D83
NPJ8IT029DL6z80kJgeUpeuO/FyWky4ytRPHql102IA9j3P2EBj2fsmm+XVV
fUS7/t59nBAwM5YwC7F5Sx+LiSslscU/clmgAtQxpnnpkpnZ5F868SL6xlpQ
v/wVD/QyFkqir9xURmowCz0hwaavKTMVyCy7voVlDOGKnakG+hMJSABp4/2/
ExHgzg/i23N32z7Id1atS+N/4ig21MI8x9Bz7461DnURtRD3+aFl3zELbhHc
19C7r7MR/p90EbfoOL+hv19/f7pd9Fu4btADMLkDbqETRFl3HhGeqGYp+FZD
4di/1czxJge7lY38z7EK3+5XaHmS4Kr0n3lILt3OIJTYskIjfcQtEQ5kSb4n
wV3SGZ60W5Cdiz6idniWfiXqUxkeib+mLsENJ49kPPTRjBIABo35A2YwWanA
f34Ve6gGNzIVpJxfI5QLqQwUZUBQORQrKBxH5ccZ8S+qaqZY3OLYSLJUJxWQ
uUuCLQxOD/0R04kSyKY0zkyKH3LyL8pWlC+X6JyyH3Xd7QXktvG6wgyh2WZW
VJy7G8T6Ci0x2+ts+jGemUqoIecLpyOj4DHrWYwxKG9z8q84F5LWVZSI40qq
pAt7KjLkAiSmNRlpFlzNvhNja5Kz9CbHI44HoQz0Klsf8BVlMyKMX285kiHI
RSYbWnkt7S58LkYpqjvGpRuSOGU5KnzNtYzdWbTEA4zHZQ2lPLdkE2A+MFGx
i90fJFbYu/FzBDHruNl0pq04AxRIBNBtQhpSMh6aVC/lGjlXlCzJlYokE5VY
s9Ayl5g1XCZT48E1hdQNlpZhZHLboCwjc/80GXw6mUyU/7crxtU+E0mwrWqE
hhN5aCFO8Smi1MlaBTKYtajG5LGDjMDh0IsS/erM2KdGe9ZglxTCU5AZVFtQ
eQTYYTQVSsHHWbGgTJxcRLTlEBA3TOCv7qooRrsfuKsvWDIMOT74O+zHV2Cw
wq8f3SiA2N/QUsZXdGwH6alMZWwfjE9ppk51Gm22n3JgQGFmFZZ1Q1ruhhN4
82kwryUZYZR19cr/9h1QCAxJNsGZAhUo6uqoenfgqOGuc745KevH14bT4/hM
yfR9yBKSqZ/1dFk19rniQr44HW8O0vfHmTL3aTxT0MSqFeeamV6x7sGl6Rt1
y7ywDHR8dRmFxqNt3BJdkGel7GhUg15tEYRHunvC+E6SA/j0B32PkJAoXz05
qAPD4Vq/UrGpfxNMylYJEiSUTa2aVQMUl2lBo69d55bsLuTJz4aBxHsreGOM
fSq/eQ18pILAVLscku2aG736roQhCymMKMhcQcxhcPJKm+UyLOHzH6QnTgsV
f6+3i+9kynfyy3f+iqr1YcdsiFVNRV+pYnZ8A4LzsL9JmSlondtw9wPT31hx
5VxLKHZhluD12Kdy+PIFn038s69f0blAd8LR4fnwJdb710+mdY3tLA3qwOXH
csiieyg/5VueJC4YSNKSPWd3DMl+Rrdq3Sgr9ii7LiSbJeXx5VSPjdauxGyT
RbvBTJbMknn0ILUWmGxL4gdVpkcxrpQzJK8xv4m3QCQx/Qm1RaiIaFtZdWWC
/S7QdxCbyzFRSeBE92y1VgSn6FIPQEziUQdVsQ3TcPiJ9+JTgCL/Y0ys0vGp
4WWot82HKyKlcvN/g59c5McvOYAKM5euxDBfIaRQ4STFlZEGPeNBkyE9Ydgr
VEvlAdF4+h1Pu9GJCXsytLRJot7O0SJ0RtJWfJ0j1xYuq5QtQoQJPL4FuF8P
ekshfsTWriAjYKBWw1O7o9Nm907j9OxnTugbtK/e+09gLiSkJc03J84IkDlw
vq2rMeVWhsHGF1da2Hr3Vvmtd27hIcQ17FpUIiFwHNgD7xGV/CoavwrktBBi
aZiIJ5IlltRprmVNPnjMPqIEYf4sOCuiJNwWVwV4xGUF+Dplu/eKZ+m7ozOX
fjFH7id1UvCpzmyvVE8SeBTd7h0z9zt2n5n374EFso/pMNj3i6YSSqZhyHQT
+YG2chi9+xKY3+gsfuTN8s+SpPco5aSj1DE9GJ/T5RxTS+F0qUl40G8iHe/q
QKtmkUPC998DipG37JkgXdw5hx+5UoBnrAfxFnXyfxxvDZ7DVfcm7vBFHXXL
n+ABi1Wvqi1vpviO+t4V6qTKjHLl/dnY0KFGYxDvQGDbA1Kxp6p48V8VMIzR
A5IURmZkgZhOq1rovfgYPzl8AZxJsoe7d0ePmruIEKUVCQyeolwSTwoR4uUb
OVaKCV1V93AvjAv/f7+F+D1SwY2A5ucNl0RuYkRdhIooyEbMZoUUNWER2Az/
c0UdVMO3nBGhz3agvrbrchxu/YCHcrCRCRbo176KIc4ihah1wFFIRviEfJDQ
ELVgI63rJNioVYIzb+PBoXYP4w9PkHZcLHIIZUcnzvSr4b6jbVMc2SWEw8h9
TMhdVEPENVa1er4QJBrlZSqwE8H2CKAgsU4zMtDQFF+mdPPSA9kn/AMhmKwt
PPkxT/4lXr3x67xp0DVhSE3cx7gBgQ5+YOoKxL8C9WiTubOjvltY0NRScly5
SUHJoSoQ45V70hcGV3/KluIulXlx1Dnj5J+n+ZrVHbFSw6SS4CaDFlrVeBnQ
TXaKf5SSomFfqky1S2R1HqxBznXaqG2YicBnNDPOT84xL8oLRfKkTb0bBjQ8
/1i149izNijFsFdVXJpujN9peILtkg3f2dDe90FrKJQnqr8dRs4/Z2x3FRZs
7FmwfGaRl2Re1Yo9Yex530OGqqt6LRjpUzkS2fzL1DwQspX6i98IaY/2wooV
1sUK85Gi3GfqCpboJKeY1nDsZF5lFQqV2mNnP9KoZyKuhUCYNTymwomW609L
BazIhN35MAwDGPLi8syqYpi3TJbO81tTWeswVPfDdESWVjD2wyWwQ68fOj5W
9ct2xDrc0O/jR1wq0HrUYJ8G64CIl0y9KWmOUSKEECwqRetrLcuYt24AyhNK
70cCHhwuLO4NPLlW4odze4LD3tZF22o+YoIbOo7OjjZ+ytiFlLeJFaFDX/J+
my87tmNN3Y7tjaastXlBaNdSU3lJdR4lPW9cIyUAx9u6us6ul1vNoepyGKnC
Dd2pi8/5TEo12p1s8wXVOHB1VfRKyQmIBvwSTQWU70GKY2aWl96KIKgvuuRj
D9nGMWmRJW1EhS1mesa4/mUEe1qKmUekwa5zRXyWTFLnZ91Tdkl4OnXPMnLW
tWz2D9jxxi1zPzXYY1xkR26FMhvnXOzB0Zw6XV2djkMHMs3aoTJ6CHtS/glV
aAxFV2dnI63z18Wd5tCPVrhbS+gEv0Q5bCVh+DTvpUXtShS4uwFegZ8MYfUj
LlG6gGNtb1Y+4I+Vyl5iHqQsXe5VFRGRbiNauZwF840NFTush6odtlpNrYmK
AOiiJq5INuoQWYTpIH/5nqAFP2oGpturVo6SF2D4dimnj2V0orTravOT5Ncd
eW6ArPhp2PSvKl/osd+P7USns5F6RrqUA1GcIlNc4mdVTYssN7GU6HZErGRg
vTv67lhSsBpgpOxF+LQ8MnfADXXUYzMwsQlqwjplI+DZ16+jKOyN0zwAEzLE
a4RaabxPqmku6gFqDlh9hIU3EWmOLNGa5tyWHMwZzgtrVm7VN1Kr/P4fmtWb
qhVXaA48HLBWMrSwWWzkJsQzkDsoEjOWO0zVK35r1dQ4olx4zDoDZraNxJSd
hkkVRsL5clwKMvYYU92mP+FrgW3499JnwolrB36XvqnS85AU2SyRZqNSNk2C
nSSBcsgNYPcg4J9E7Pvprr66ecWt7pq52RZ1wocXSgTSGBgnTgmZyXuDj5f0
6IJlphaPXMuVQasHxsNysmsk4Djolk3xn6pipt6Zn31y6KSmiRIQsDn/EzKc
tFiKSxWsblEbYt7ARFLfWbUZq8coxvlObSgV/jEcV7X8vb2SiG0OGk+uMS1+
QxMjaybWClhq2vEQhmOUIDDZYf+kgAcnj/RW0PNWSnOiyYcqhrGTRDBS4di5
K85IXFGi3K4WR5xH30hBgFA8LS6xobx7liCN7XRF4pzQaZwzNkHDpbjqMBMC
/Qs1vrjc1yzgWpaP9r1ai31HwxAwSahVb/VSB+Vf3FoKLPL2YTSB2mBfxc+z
UDvXBE9XgElRjSmf5ea903ErQI9WARP2boDpUaiE1Y93lMCTBnKvEZUbivbC
DkgR7Vgyw9veiWW2KBwynuGIaFOC2Snbecr0QDsTFQnOM2TPaLmM2lTziXzi
mjKAbTglpfk8GMMBuBwzAsLHxN9vFb9YiQFW87bGW3HqfpRIM3JjOnaGwzMX
m+qfi4d8iKsMKT/u7mjEU5QkGMJuUxUFJCJc+T0S/UmaGRxaYu9o3SDoSaQd
7BRRpL+1xX6SoGaUlZCM5vbg9Z66Hf3Wffk39/KK1oRBAbE+hgCGqWXBmU24
+F5doyzKpc5Vw+aYAyybwWcBX5ElEr6C2TEu33bpbac4rJHsJBw1ShycKh95
qWkb6AVha9MX+5gNibtLKO4Ox7GaF+jn3dyUiAGZj+uMj/52tuWWAJKR9IMi
0ypfe/CnJib0JjFZMC68CCmtLFYH5oYpVvNxNR9rbtVI2SOuIwW5x7hEzgpz
cEzAJSw53jFmSAomQ1Ujb5i18GLFXE2UhhvpLG7yJcUuuHTBWvmIMwYnUcbg
aECOpRYSKx9It5hLVGofwJqBMw9FGjthVY0UGMokryCRjEWuereEczqjVFt8
lqYszjWSxzALyYU5Ac2S/BZC1rsrckhgn0RzyrM0nlSOspoWpN9Wvi5c9LZK
/AECJpfsulSvnQlpazBhvU74VoqzHjYgZVOcIDrOODmhe4aJx+mjRD9CwT/6
jsiFOcuFRIqOdy8yLTJelAl9HYYEqoM9UCK4Yl1I0unMc7ZZZ8REA7mtW006
KRWDWtOho59t+vRofF2ETDSJJRc0mM/XFQJ3seJqt9aA8zhyIN4fDsbpk4cP
gfuEw63KZAsYtzFZm2RwXhRNv7O3IX8rK/a4LMEaoYLyVqYLgl45QfI25aTa
xjCqh4jcCtjwiUvx9bau5sXSUiSs+Sf6KMufY9qor4lUgJSnDSfnMMmPHPA7
dWGyVBqTUCV/dxylANVJ4jrOk0c2w/QCvb6u1GbG6ARz1JFoV1tQTBaySc5i
6mwDH1NnOCgpGQ3nO2yvy7BvxL2Ocjcgg89VzrT2BPTW1nkex4D64kRWjwiZ
iFmYImVuwlSiqAclpRCVWos0uXFmLtuzkAyikgUsrerhNmpJmKqYm6Mv5a1u
3eJoONkSycCUXTfVknyWsCgsJdTRxOITPXYu/kVRCXr0F6KvxYNRmxe0D1Kj
sn+8D3sApr/LNPaoAyWsol6JyWK2BLiebX1Gpz372nIqYEvsxmLyOQL3XtkV
FL7NidYl00sP7BeIRr2sqedat/V9YzdHa7mOAdcBfYVr9kM3S45JJWgwp4qy
kj/SHCWjcoEsOPp+WRgMhajFPzukY5P0bYjQAOhq4TjZBKBz3qAVLomMM2k/
IQdNmRywsPQQ57SN4rrZusTom9OzlyQreG2RJmsPCySAA+DcSEohDa78FXe7
mKL1W/6MXOJcnth4FqFkvV934oqrccBtulmDpIeSvxM/qRxYs3LlCnhMLuXe
inickKZKsjNEgG2d8+1Ybse8a25+0C+v8tEYq8wvJOS2KqMC1ua6q9BOGgXi
IMr8NsU8Y2iUEGgKkwFyYPX54pQAnUSHtRvZEh2mQiI8gDV5K0rzKKg17I1l
RYzqF2vOY9I3btpovImEkr7FmSLJIrcNt3qt0aTvlX8JUCOlMajaPM2P08YR
sCd66LCeXgHtSMFvxb8wpgbuAGNrLJ0hV83Ah9NtsPYtUx5FwMWqbisUUemz
Tr2LNblWa/lEWfRE4ldPLEktYJIGRGxUtLx0j6lqyabFuhq0QQ9Ojn9o9tNo
VuEwGhuNWK1CeoxzI8e1UmFb1llRN+lN1UhabSdnAudTIv6KsFcHoFzPpqzA
uaGq7cHJ5bv9iUTNwqmDmAD/e1s1kmobD/+4g6g6O74DlPHNlEJlS1IuIvRz
72vrPX3wtnq77y/hJH1dcbLRadHkyE9kKbRhbSN7t6TuHiSu6qXY5gKH2fNA
lrg+MqfQbMKFaXKqY4w2yzC9hBgjOAC9fh8L9lLxS5aNL3NgE/IGGQOYCA1E
1D65E/YwbXHgg5j8f8y3RoR48X5/7hXT69FEoJnRU60m1X/4I5NTwOrDQYIR
ftoRdOiv0q4206beMcK6WieJTsLH78kzq9+dYgFvNxsr3R2eSQxqNCGLKwzP
pFATzsn+STN41q0dARPsNYNnvtkTX4UJmBB1GPhzvm2ouKNeWlMkd3w/EAw0
4XyWhgq14lwh97gKlRHR2b0xU6lkgAh2L6/58o4qIcXsvJI6rI1TEnwUFQrp
kq+ZaqBKdiAj6cegbTFnlBghnFdXitar8rrK2KdPTREul9gv56cX9jzUePT7
wFbqJr6L7LYUptMp1qDxAHSvMbnvSKeDvG0nd9KVd8VzXM1NdWsW3aC1xtrB
LlWpqmhUYIHtK6pNY9vHKWYsKkDi3SyK0IVI2jP3aYJQROqfrmG0cVlwcVx0
7fgdWmsjcp58fogJWmnNH6Wjnsmy2xE1+JBfp93Onj05fCbFtRqukqVJbCXK
gKNipSIxgSYKJvRBUdOqxKbBmm1V06GHhhpfiSfQCtyW87I/opbf/iysTlvZ
JDSWySbglaIwj/PjN8eK2opcvXZEsKB6YgWOUVhltGhDnx09Q4sjb8jzhw9h
d11xSslXd94GaQCnAYIY3niieglFWTaVTzEa7uL11knSOm+iTClJ38wP7Zgh
ycdwS6ttEGw4o6FyvaR8K9XZR5jZqBq03frU5f4UR+GBkYsm9e5ozJaN0si5
NajASCrXEeCwV1h2axql/2NqjcVtjThPklPjORH92fXgeLubiup5VGGYEM6m
I/DOCS5phzfREtSyD0jYQrI9oLyVBaSr6lfEzoqXYcuuWGEcMg+OvCsilYGn
ehyhSCsqiRt0j4o9UuABDiNJ1CxfCSXPFkdnBjUgOkPOxk365Ts0jqOOZ+Zf
X7NXJoeFWjLYYJ6WoLWxBK0Fba9o8NYAqEM27FRK5ixJlSkmv8gzMXNhi0QS
xfPURRqx+oE+kAvOdhiqxkF2Uuo2NNVOGm5oWiK9jqz0a3w4m/oScOo5QCmr
jGPPzIGP3SOImFkUn5u7D9TqPOWz4VgprPmNWuQQak4+JeaBPuBJOdShCJes
jRsKIPAZzCSESPbG8tqwi0J3axAVcKTQWGmYGMAAaQrvEQfjsnOfKRKUnTWX
ouGgsMbMFagVmJixGR3pwya7KPyur9CQg0OI4ZVYgailesxZPNTSjs1wGoJA
L+aLLFOx6+ru+K5uV3FM1EBXHW90PLtj4dwGF9mtLuLxkaB8QUl0wG8AlovP
wvWYv7tSTNIsUlSXsSp+LFoedUPsXjcOAlFatkivfj59+vBRt3yi6TwLcQgu
ccxlym4KKNOwrorsDTXZys17hvzfP9xY5O/AjdWgJ1GMhhY4ozb2hCraYS+w
jue+XnXnqhqdQuSbQy6MsRFn8Liut2wcP2A7NWO9zVqh05xXq7o3nsPM5K1o
aSqxq2aHdlm/9gkYkksrucafWso5smgU5a5xxagsJ0tuosDj1m1wq0VEhvAf
+wGd/awhBJigBX9KyJUFFtDD95ojVh7zl52mKGF993QCQPZg6Jv9ZOgpjtoP
O3AeSi4WQTNZIcq3KAgfSsE5qXR72MjSjHFnX0r5R/z3B44UA0Eb5EHMbTsW
JOE+2JFxF+PTBlqTT1T6FWMldvQ3ECaR7OgsDobrJrEg/4n0rJxVdSMmUiTy
/+KzpZHQ8eU74ECKmVQLNmcCInHCnAlcU2404ldu5SJLlk5pEEm7TkhE6Iuy
tElaB9apKP5HwebgN3VcpwIg++rwLk4dQWRT5T1hCo+aSDTzY6mArdYiodQS
YCUVipALvhr4EuXRfDkPdDdIq5R1YbuC72sRX8XozR5p5M4VF05Xv6dME50S
R3RK+dXTY8CW2xUKlN6B48Hp8TEq8+4Z1+826FYYEI3IKD0ohPBzsmG4gAw7
/uASwU5IJGxnTWE4FFAcAkio8hA8PPC1pdqgjkKS4KKddDNokKosaAGQgkTn
oHkJrCxMFVjxbl+9LL6wLnaBsAI1IdFTVvdVq9HIoShRPAo58Bn5QJQaSg3W
5qMTavREeoiuu09w0omgdEsVDrcBUpnAP2j21R4UHehFabwC+ws67XG/vRz9
v06ePHzhtcmTxDcijw8C0t62kuUw2gUlKejeIw6l3P2nxyy+S53Hc3HUgpmN
ukcvwNCbFnpTV1qLs3tHyZbfzxpPENJZ8XJnyz7K2IEP+mEbeJCwgubGTFn1
JtSS8XfCokM8fw7chIv5X+VZKY6V3RMmfo0RsZT5btIHxxY1FKoJRtA2mkwm
++IPEKT/vJyN8zJOkBHycIN0hyr1LRsWqzVd3RHp5pyaQVRjrM3akhJtaCdj
l4NJ8p4RiugOJLhDd0sN6aZSkMLjYeb9GU9YHxsfzGtC6w1umqaiIvED60io
1oGiSBj/E1brn+8Es1Gptm5gr4Iihq5qCJFmBhh/41XGQWOxKCTIAlSxQciO
CXU9cAkacbVVLQNDFUrpqnPEjwvOPC/qR5xVx9kiGggL3BDcqQouPZ+LjjrG
F6EGg/hrjUi9FPq2zOQrrQYL4K26v2srmcEup0LrP1yS7vH8lDeFg9YU3WEN
Zk5BnHGNX+yfm6cPPhazfY/iJik7SsSqUNVmPsG4cuodRPVPgkacViroxbGY
1jovx6RsZP2E6n8xpS/GrHP58Eqy2CGKRH4NuYEQ2xlxCY7CZumfT3/hcBox
MG4jqINVPjj+87lh+D4iDEUFroauS+dO3qoxjNeGtdVs1RQxRoeB50AulrhD
POSfePPf6uY3sn/89ssX/DH5V/h7clpn81b22zTKl8UCRhE2RY/AVOLCunUP
GLDZ5ycgh3x+smGkhZugSlKSdmv2HcW/B24H3cC5UHsPGwxd/b1Upi6GdLtW
NlYWIvYHeSXLqwidsZ/TwMlZgSSP01NTvvQ3wwS6ouQgIrYUpF1xcwAtYQ2B
RWlkJ/B0VQhj533S64j6Jm8Yp8MeAgIgPXVO3A2vkOAGv37DqczjE6mjtAbd
URoEJHg2wWcKSM6b2ICVGFBi2FrC2SSah/HxPrBjadd7puwEiMs3PmlWdl19
Eqwso8b+ca353Q/A6xThdSrwqnuJ3ND4Z4pgJHQVURSm4kTw+wdHOZpYSS3g
VOfj4AoUY4pJ2jPXURBvV4dQxCXM+xtGoWu3OeLs/ihpTDGiinUsRFhlj9mn
DEV24YMHmCVzC8Ik7eFOcYmZDrvEISD6hGJs+0Oil2s8Kj7dlJYOmNTPmi8E
s4MhOLGfVK45TtLq2qQQt+5Q0t49LGyeQViVYkcjccmhtwwqDcfhpBes0xU3
V/YaoRJ7aM5lAwedSJza5DbbhjUNMlUsmtpiiepbkgqmusSKwgG3N1tnGomP
RfpBsYO8DznWWEREoeVcK9Ixq5sW/T6u6ahMb+xzTYUbxmxPD1iDooFBnSw1
C8oSKd7DWDWhS/xQgUwsNC6kWzpH0J+rrkCF2y/mLYVcDpPTDvpn8aVxBbMJ
pQ/LCHFVmqEBXJEaNichqLKGEIBOdDKdKbhv+tUQQk1xF40WzOMOWBWazMM3
GLwElTETQ3y3VOwi1k9qnt0j5R9J4KpKKDCZXJmHrH7OLZfeqhbnacqqpy7P
rkZr4SBE2HccBGJYdZlugo+01YYiVCHsunguKmu8yDYSvMGrizIyEAuosate
5uE7g5Z+rS5kYUbRMHR3UFMgzkLkJrWqZpoA4haOZckeF8hQOLu/uI0oI1cC
9KmrfzyE5Fbuug5QD9B7toz6oZWEgJWwJl6GZbAQB2cmm+wp7N1JXL7W2Bm6
E54bO6t/jTzOp+IzShuzK15qOG6JDKlVy1yKFHtjBlv95k+F8fUDBgcPieTl
4LJKxEyyMQZ5UkMZAgsnKRc4kDUo9AghzNngwVmbq9U1ZTkgH664XCfltVPE
JsUCxXBKGjNpodCkXH2YO1oHPhOrJYE0sjh/p7pI1RzhmR4vMRfmLI+zQOAb
EmDMHj7iqQgMaGIMm6xLHBV/F+65jQR0HSN2ELOsmbjzyb0SoVtPDd0u+6mi
I/mcvAvIyAnSyYjILfyJ9NY4zkpKmrPazXZIQ1Vns5rcbMVx/D3rXhHBhMTQ
CFzxVZCvLVjHJ3KUkHsGw+AYhJ2NpGNi1PFQMBDAqXWCh/75fOj5yN3tcN9V
pUIHFBNUNqGxE41eWqx46bJfGUZStilMWTbHmQi79mjcZXUr7hjUOqXYdOeY
apkXKSYIiTLp8AVUXW6UI9W84ddpZHp3wsnrbE1zOqbsBWfy5f3OTnRW+Zhz
nkiWh4NVtm4wUv2O1wojbBvUXJnHnFwWvsuwvlHhkriS8e2ODifkKAgXBv31
2zz6lgbSb1nBetfctJAp8rG1Qf2UMl0xyUdlLr3V2kiijZkXVAiRbX+Uvcbc
VMhzRdyAUIRQMhmlcUFUQense9NzgSgEceTmykp4FzQXNPEji3Y8YVa6Djba
mERHwHDJwcX/NShg6/4gBMir/z2nL53Bhw2jzJWAMificBjAEOHOCQmSvs7L
XKreWaSliEhdzibat7ekTUEO+9L7391v/3KFJeIr8fzX1l3kzje553H47gRu
0WNgZ69ec4jQ8tZy+IhyilRQ+EdUeUPJBGde4FQZr49PxOdJPPbymXkYTRLy
N8q2ltCZ+nzz/tUrnx2Ju+0lJUJIt0tTVu6LEfuQIYzQBOQvdSwrdSpSsCrF
zo8pl4qxGcGzA7UpRhKRRmJCYY6S9tCK7TgAZuBIiNQKa9dqmQa2HZnI7JJK
I56wQ7M19kL+rm7yACqtpR8Jm8IFQrignBopRUEeQhr5e++TwMU8kNHqsO6x
byDvcU0bLNHGwSnTMjr18Uu6zLbEf1m6AnXHpr6KUBGTXtJlayz3fEUSZp41
omXjZCvDN9LnbwgL5MhBv6soMFXLgQRwnbgaEQyCcZQXH8UfkiL69qaQrFlu
RwrZf1e1vu+arlZZ953pcigRSICg/jU91gQxTXKnztrAke+yfaX8XeyYYFvF
MzRrMwk+TY7R7c4cswI20BxmLGy0zBdVW2R8OWNFgiCtALSkBbEpCbzGRivi
7czjxrnFqSZ3NLi8jrNWEfLqWdKVpuqbyHSj0Sftku8pOTzC+G03Ia3kTxJn
UGQzM1Y8mW8m7bFldWNwNvV5EK3wrsHfNwXFZbdkxNWJdB1LeorPS8GcX76w
v4n3VsjScrO6zmuujcgWOXKYdvmJs2G/jm8aQYascoOaKu6uwhQXnUIgkZNz
LVHjWmak8/2u6SyqkG2QHBU5cFu3zyuAejtXrAqUVduKfD4VZxgjnTXf2v1R
JMPjMd5SPrEqMt/2bJAiNDvr7Z84TRZunOzi7okTZhRBcCSxolkzqIKkkxAF
+i+aXSNJfiPegKJoOaOh+ZRLLDoLG8QAseUczbgls1GqPC44i0PZahZFCrQm
f1nO1SFeStUySqreoZaWEgY3KiQAwSs1vSlySzOsSi743y+hVflNfx2fZNC4
CYoMZ7pc6TgEjgo17zTdHHt/9dU6hFU1kSJ5qWRAfBETakFpmFsEPFisjwvd
0Ahv5br/Q2NwiM79B3E5sWWQqw642vYj3FBaVItusLiR2A/FMvFVkTpCto2N
Uhw8fmo+DUlvXMxYCVf5trQ+AIQxAJh1hp3yXF3puNDa8SoUi6JkhyKmqrtf
0A370wfcvEYYQFXFBxSlseBvxoePI37/Kls0g6xfsA93tRtOR0DMJHTBrryW
xJEltcAIi9N3jGF2jEPftjAr564qnYfEBe9+OUmfP37xKPAY4TMXzc/z47Ta
ouHXyhabslRlrKZhJFzpcvx7W3KISostZuKmzoZEl7jjdVYWc8vUaqlsTZ85
dE96G4JGanXZ9hy78sCraBCrKp3rIA70I4AlbmFRifNZk+lYLFtTKuC16byZ
Jvpp8FHqZLD52hDARDxKXdWDE0skRDqqL9+pOPvVIiLhPOaw6RlxwEsVkA1s
8btuZJ5owiQyjxylKXbMdGEaJychEuoNTc/w+keqU1LfChtJ9gVo8UOrPqgI
VvtchFy89+RjCi+QcCSYtTQnx2/4wPhIGoImpTyF6ei7NXpE1ezSmlHAAO0j
doBH77I/gVSLTzELEVIrl+4KrSydMBptlX0CzErh0CLmYAYbK68VQh85k5cN
S2oON3YvVlLtKGjqW+Txuqo6dqaxrIx2S3WiwErGkRJkwIIBKA8H6qlDqJJk
yxnF08Is1ECoQ0l6denUnMm5j3bSE5Hqc2i9DGKdc7hTOY5KeDtRXvY6KKMl
4kYr12hVJo2HEEWtj8Rz61WQkeBvGaO/xnvehijbfe9GJB9UPc/Z72U6/ezm
Xhv9OeQRkUtqm2l1SS8/nJ/CBcBbRqTYz0IVB0XpY1kGgppGYmvOMJJF6uoZ
MNIhkkAsh+t8SNjFC6hDx8XrBYs3FqMovnbJdw5hnSKAWZXKohEng03I+MMx
JC4ZGw/39BDDP4/X6xyIx+f0FDZBvdTeAi8CA6rvB4fEhoEAI0a5exLKgzYu
Sleybqq5M3POZyXZr7Eh58oOybw62anihFguu1BAORgjQ4t48fDFQ94jQiQK
ubRqoJoifgkYdYrWkNMuoU6BGxhDqFZcw0hjLmkXNFP/XllO+H+TyR5M8n1J
OgPOvCpGVakMMsJ0Ro0lpyWflnfnNMHeobw4eiFBypzNls30YTaC8S2dGfYU
hbTYSVAwyiGmENqXJAXZcuzeYjKAAitE/oc9/ClJfDZbbtOJ2xhRdAa2jJ9r
AaJJnS9gE9K9vxyP/79s/PeH4xe//zj+6x/2wiSqYiZ9U7QI/IRJ4MOfJH6E
G3S6g47+/0nUD+ZU+tGl5/0PfPBTqIDEh3vesRID8OIgYjz+yhVJHIeoQIIV
eAcvytkkRS8XYe6JQ0yCvY+JpiW9dgiDxskasQ1yWViKdBmPDcX0YuygDSWC
c22sEk2TvsE8J8X0FLVhkf+XymuPEFQdNplAfwxI46qmDRzumG0RFzXC6b07
7nRHsMltHr94/pTb4NFCGzdUpvcsWOXJbcsc0JFlqbC80ngGJAMN1XCLoogb
uu4Ig3uHk0eTR08eTg739gVx0Hlojo49BJaf9gxfFCXnWhLrtSV+EorGPhLI
g2nSKcL26hTqKxJl9WKjDvnG0M2FLpjPosSNFo5HIVdBBtdXxIUlCVoFmSMb
paGChxAkCm4i5oo88ii17UiU/ggNGZXIwZhWSXDEbDjnyOKcgw0HOgWrqluX
YpleC1uw7E3pKDDh+YJ1W5Ib1ysKfVb4uDSzBm1eBedIGV/m5A9RD4t9ERYF
ujxbHnpNp8hJZGy/GbLkYSN6YeL4MF68LMQpgUwreDQmr+vxoOuQ8La4RV1k
wsWBNBlCKC4gOqbYlh2cryoJa7F6VJLWhzKYZUxjTKUvyTpr4fDZjGClRF3N
ikF/mJ5XD29cCfNbZuXHvI0dmmDe7K3D6+1ltCAOlaapWcjYJMob4DQH1AYB
Azj3qpsaw2QIK1Q8scQSrChoyAopslbH1EA7M6twM2K3JgoXIg/D6g43ITFu
Tpd5VgNPqMLrwHoJQLuaz8lw0srg5NHpg7xCeM4DrgoTyupnASOa9E3YGUtE
J26umlBB8GQne5o54OUhA64Cz0GopDQf+jYD6FpnU8r9gqnh0M7eCTIR61a8
vBh4SN9ujrdzlT9Nv8kG4jwczswS/dkhvlfG1fmC2DQxWGG14qQpvDsq2Iws
YYCqyHpuaAhZxE/5HCUDZd2lXD1fVQAPzJy/aTuTYT13o8nGcZwTt/9Sybhj
kf4nZ6zududU8zqPo8mhkVnmDBV9hTVeiT5YXSa84TnjQ+C88cILDxi18XMx
bpqFGD1kCA2RAyEQYVwpF5vfNVow8KeRX4d4PlMy4eF1Pkaq3Vnp7ql9e5xi
/l+attKgu6b7+L8wXaNx3WleVnUrnkO0juutekXf48y5CRmUQfqljqjTU/Ge
xjQD00DSo5VdGsB1j6E/OHT5c9ZAV8BfFDPESoOb9GTyuA+9yhrylfNLsV3T
pSBFTGcbcdUj9xLMAXXAjBE7+dIM0vdXv4yfB4cUJtaRBk90/uINzE+IbAXN
Rh50L3SVJcG1as+ymbjVsxKzKDv6ENFaqNLiyxfs+Xe4QL+ffLhC6OgriNQ5
WfRjI0tdu67aXB36JQmEJTZpgmNyUHDFPKnm9WA+jThYmuUgC8u8M3DFP8WM
ciSXdtfi9m5DyX9InBe3VFEuRRUeVV3dCbXEuSEPNzQxI2A0N50Wc0Bxlnwc
DTVVcZ1l0XXDO5d5R2zuXDqJ2qmP8ED5Wucy6GuCd4fpFq/uEpPm/0nnkXS+
OxvkJi9mIQkk/UKQh/2xv7nD7tomDXDY6YPDR5PJ0dF+OpL8Efz02WTy+PH+
XeM22H0TRpbfMrb7BaNzFo2QQcNmlny9YwT6qMpXfn38c42lSOXvIs9z+wHs
0axaJTCB0PBHhAh9QK1pO8LvMZ7PyHU3xhwaPyWdB5Zhg3bocdLpoJ+rQ1oe
6dg8OT86P4nGl0d+Bu5RPIfDp0mvn53TeATz2LnXstlWc+8TmxjDvvfe0OnB
Pg++sJwr8vBlSkfP6VH+KBkv4OH3+hE/wUwod0ODjQZScr4cmB4/700uPL7z
LhzRVdiRxQX/cXia3hy4I4/uvCNpczvGQIowUboB+3ddq9v+5rtner1u77Pf
39ju9I79pk8fWGZldgd3M4qfc7bZNEmGnv+YbkqQ2jAzClKL4ZywmHf2m03Y
dDO+R0s9eECCfmz+Jxld/RtLOYsZZzvN7QN5E1rDv0c/Jf1Z6Qe9N5iG9ieD
Sjdf+UDfRAlpf7rj3j6QIbDMSTgd+LW8C8aA+l5vFmOUYzcOg0dPNYFw/+GP
KSD2vEST1a4DQCPFPV6PKa6SJv+tliDmrrKSra/faMqpDAEj+o9gIWHSQ//k
BKQJHMBDoLq2juF/8o22go8O3Ud+dbs/cq0kl/Hgmnd/71pJluO7d6LXwWCr
vTuQYPTv6E7mRJ1aApDZE8Fk0W9jFbDkBTnHwBcsgfN8MKJo8MUfgz9N/w1m
icym293fjHc3wehISirdfdGsUQ/TexyKxLgyFsqM2rgLmuYGGRPggGy13UPW
Fx4fIIiFbeh+oC88ioIPbHO6H+gLPwLCkG1I7wN50c2ZPbCV8Qhj9yVmz9aN
7Y0gL/wA6VP4gDc87X9AL6LmafoMPghH0fnAXriPnuMaFnka/9M1LPJO/2n6
4m6ufE1nHvhyFll281+EwRtYiEPjQWy5C5tXs4pSENx7sP+XQP7/kgTy32B2
Z8sqc+T5LyBA4SM+hb8ifxt+KgOIT37X9dUvfSGd8B5k+xa1lL9T3y/ZCCio
iRq4igS+zZ38+T9Sw+cbCzd3t9BZeKS8ffwEN+AP1mrM3lV/Da3kie0Tlf4p
W/oWOGO6MqM0esVfcCHb77+3jq6r2VYktp0kstucRLefePsG3sDCRbD4X+19
aXfbRrbgd/wKHObNWOpHUgS4Oy+ZQ22OHG+x7DjpnrQPSIISbIpgCFKyknh+
+9y1qrBQorP0W451umMJQO237r7QnxtNdjlJs5tkWmpDYt5BRWrIXTo/f332
6u3JArjzFPZx566zTbJuTCk7YXIdNyQXXmMao3U/XhC6D4b3HWx2oy6LrnBj
nunRFh7x2ToPzemWnv3+83W6sid8xwEXv+cjFpGq8uW9p1w1hcrDuFPgFC/r
PN7Qx4I7fNpk95EjQBqbZ4NTaDx0ZHf2ggUIeOhsRq6N+YL65VY80MP8FuZa
OVOpKyayPaEITa1JqIUd3tYWlpF7tQCautostoqJ5Ymg2YEV/6g+373djMvu
3dmAGW2TouXObykpQeR+X1i1Lo1/hMZUfWGIDlLDO9Za1UXuC6GUVcu+Yxb8
haV8SEULG+H+SBf5Lwq8F1HY0v4Uuyh/4XRD1PcOuIVO0K5x5xHhiSarK5Lk
7/vwfbxaxPf3hyF6sF0XCB3bqQv/8OVszJNxdn+/vBe+5+Gq9Mcw6HNnZxBK
zLLsR/qIv0Q4kCW5PfEj7axNbJVZkOWq5BF9h2fprkRZevtIxAVdgjOcPJLx
UES4U1PCpaktXvwVFdKk5P/aKXr9EVCj/esr16H1IG+eObApqE2DxjGF6+FE
tr5UXGvC/vyHjr6fTRa+L4F/uLKHriRAFOZzBu7/Vhm4PY8qSwvoOT8CyPTW
CC2oeHKMOhXf41tzZcMuCceuNabUgN9Kk7CLwrFrVyk3oLc6RNhF4bhS9W6F
9ht6LOihO3QbFPTZ2gAf65R6uOiyLjO3hngiSjJqQJqyshrTaTAdX+ArbdAm
vUlOHVVYtL6lFmGvw2KhI9QUG2gRVBmhS+fgYpnyOdBbbUAoq1LF7q6anlMT
uKEIG65qoQwb9Fb2lRsUVQv5Bvg2UwUKN6hQDzgN4C08z43gSqrlKdFbBSZu
kLeLlLbpBl/mRiiZRQoN5CW24QZFGTLfwLy1DUqySWEEfQsttEGe1S42kLc1
XxsUFDWFBvrWOQfPccomT/xzjSZis7gxkCOupQ+YMn0F8ol9xGhbaZbzxqB0
foe0c0urr9DVokA27vq6TGRynRcGlu5LtOrOFtXULe9n8BXvmvuMPU8b+c+I
ClAhF3rQOCOHBndHmcGyD8qfSMfbOsjRhi07xz71d3RB5G87i8M2O5fUoHY6
NWL0AYiC4d/cJz/tK2kSptd1ARg0m73Ofg4IaX53AaFdgAFCZ02ctC1TWCi/
wYN9DKCQh4Dq73YDAGqbB4DSI+VPaA8e+jWYQQ02q4Z7T7/AUGwPYYcXw8I4
U61kwcsQ4exPVYMq5gmZkzs7quBQtOQHxWhS6btiwlGKe5Zgp7wHESZc5I73
nEC0ffXtemlq6HninZUrhkgpW7WigpOgl4si4GBOTGPGjmHOo/IoWHUPV9CE
r5r81kR70fPHzvO6VG6WNODPUgoMd2v/3Xo2azmGIM7dDFR5r6Ringdb3YL8
x9xigiNKcHZT1RXlt/l5w6Y368l8R2cmItQ/AhYqmmBqF3RCrMqRJ8mdLzbJ
lAIu8Ahodfg+P6O6k+iQSnhIkpyxLXWt2VZpXz3vKeb/VJ9iMwT+rmXB4RQm
ubQkEwEz9jNeyPx0Mk4JN41YJrRSijUqlev0n68S9WT3TGm58Qo9AS9SjJmj
7BOjVybiXzSUHCjo9pXEEkKhxR9vyHP+ArhVCkVzov/qqFDezCKKeaQMqet4
crlI5+nFra3mRG5uFFvHwdXrSyr/klyQ1oRrP9J07UTZz3BsClA2tEZrLqlJ
pQM/Lk/LD3P8HZ45nCngILZE0hJsuUQ6UTfPSybnxhl2I5sQyxb5lkUVXCdl
BZTqoHBgmsnPjfydqDNofJXF82u8yuihSq7kThUXSncWu3HkW+qBOvOYpzN0
68fZUJgMTBwBe+1mxiDgmGv2BM7ZtIpnm3nBB9UWzo3c413Em7VAR9M7R9YM
jYYmMSzmXHBH1Szrkg7THJWJyizvD0nzBDeUzWTb7kuSFXY5pSWvYhSkJU0U
XzOdilyo50uNdziXLMiwS6/s4p7x4gwGLxe2tbl/1xpTSe7FTjg7BuSYcbT6
BkVgOgEbuejmK5hhgulUGVwvk4tLyTNZ7CjjjXHKzseUWSY/gGKdLaNwOsMY
7gS5IW8Zw3wuQ3BQGB6JiVsXV9tmcb8kgOiOPcvtl3/+xo3doew9K8ynfHXF
4VaLiw2wEn94GLgAS+rcJrY1KcP8Uu7tW3eYd+JpzpG7ZCfJTAnZb974LGsb
gmGDwzYLTRtmSq5H1U1Mplj6YIzOzfGHhOrxLczk0TXcHr6LhSW0jbxqOERu
vLmQ4utuDewi9abIO1o19+7cU8wgP47jRYn853AAXaxzrfb+hMDW3KOnGPjh
4lzKo3kdM0myBa9MynTGfxSYx2oPm1Ezl+KDE7nS/mDaMv70ZO7UcAMoX1Gm
8qmEzvIqM6Xc0MygEEnBofK9qc+I2brTm4apZW9X4qaVovta+qac+ByuI5/l
VTqmEDDGZxjZoTvB+8L55rGeQgnmHXjHRTocitT7MuXHnLQ1t5q1BLE850w1
dGouRTc4nj5dGBdGzjJLUe32wmicoJ3NAnMwO8XTBdaclDJO5Hmu9mJuZ537
r9yP4cNPPmBJAk4YYESlN4VwrUlumyjmaA4M39TWBqO4SRtTWc/V5ZFUvlph
Gx3+Ke+BLZ0goBl/WGLmeszftFlzsjLDWDLvaDLFcPWvVXodZ1XBlJyPJ+bF
aWYoJ/7SuXXRopBIpMwI8N5qKktJuGmiw2xsQ1QQa6S1qUuk2R+rIiWnqRu8
g8GMc0xDt4pMjVXdSpMDc7ZlulkxG7jJA0WpW6ku9Do12UXv4IMQ1RZTSkmR
5sr6N1P/6OWTUiG2KGskWUVZWwKFFQbnLcqHaHG21G67RpQxW0X5BC0GPiRT
EPLfW8vz8PScxGJLmN8aszRpxiQSJTlAlhltw7Vha7kzS6ehkSkKSakN/nF4
+RwyiiRohZZZ7tHiS7rSpZKEmA+Voj9xlJSIllSLidZVg1PJcGVlbVpVi1AR
Yq6QojAOrpiR8qB0JphpNGNqSAQlHV9TQKqE9NJJYDqNS0nXN7MlyYsnXdd9
VeEoh1R0O5wbp4Fjrtiu66dF2qT8FUHV0XSaFeJ/rk2lRnxey6skhEjUjDSf
S3egGWEkA4yGQpEex1Fr5FUMtzWvqg/OKtP0T7CgM+YkwguLaZ05iF/TWJAA
nRfg/T2O8Pc0ew0p2DRNPkmIFPnNSNshbDMWjd2I3Nw7kJ41O0NNc9VhBOFS
bBa1I07HdMTF5OfxqkZ7UDvP7bkeCOyiKGqutHahLY+kc9fgOpTcXR2FM4lv
41sZh/+m2iSc8GYv2+dBTO1p280tXaZcT5iUgZJMRHmdUrFl3eSDeew8la6M
Esl2ly/7tC4NuKjoy1ZvYtx+QkqTUYYYl8AZE9OdABCkq4cmiC3BHAicL1cC
9t16tZaX4CzOqm3Jwb+nX0dW1rSVFCjmzikt4hbBNpgBU6/TbCMzW9RQZWm9
cNWweBVVc3GmBrJlem3KpBUYap0bcbbEMe8hjYxNvuYDSpOw2C9NgIqgrLRs
O9/SIGyZnD22R24D/V3b2qLORZA0zuWtVj2VzTfwhlIcrymLrhW8JTAX2ZsJ
J7/SNGawylK3WoXc5gEzchceDcNcHuQyc2HM/bBJjMrDMrafYr0zv9HqEQvE
mzc3GSFv3JBqk+VPySutHKWEqmacWUuqNUvhNGBmuBu8G8VGvP+ZI32pVslc
RUqsR2vjqOJtXRHwovpjc0UFRHVsOx2MirY799B/hqjSPHPQm32V3+yHajz3
97Zj1H3TI5zFQ7KtOXBLcOYHLfuVxWCAwB66fBJ+UkSyD/2zk/NHGIZeiWap
i19/fb6MF2fH0Aru7/ooxXyvdf/t2xzIvn3ref97Mc6WXxb3BWu5VW8LwsLr
RUJRtnP/hPNd0MeljSKvAezFBc0t2xF2e3/lfuy88HNceVa99PP4KrEhK75+
WVq3OD/svPL+1pVfRcu/fMXfqBrg+cnTbYfufrPlsNmB4w7AN8sd7HLQnDiA
cgX9aTvg37sFT9GlpHoL6FWxmq2J+qvYEHVQ2QEXhN3hvxT4798Iyfh7DzTI
VybxNp1VxUaor8QuW9Hbjhcpfchfvwmi8zpM03X1+s+qyjORfhAJIGvXKvGC
OBTltyHshdsWDFOYx9HiL0cBx6TSPCe96T1LFuUqWhOoEYiYKMehdbZixeoR
VVxxe9uKNT0YKjf+NQj/iTAP26ndRawlCE0sYdVajTPXTlDe+U/F+VIK7e6z
tgVQNTGTpoOpWn4crd+qe9pOO9DdugOYjhAA4DlTo7+W3Nv0d5JbZzscqDAi
OT3z2fOq+QB2vttpO7azP38uQKCY+YqMWCMVfFT/tXdSFKKg7bPnr/y8zLV2
0t03fVMQBzl2xw4nxgSqFXMrosf+nSjXWDmqj8D6JvziCGCxVatzHQVTi4WS
AsrxbMHG7OhYOp5/PXJCV5ytrDj5V1bviXlX5r3ZK3PntW0WAgy6yL/86iF9
hYMnbFKFhWw2/IiJ6+R2Un2SxqF059VSWNRfvsIz1eK+zu5FtUbj6+SDBtRb
tVxxh/0vALZb+Yknz0dbGAlbgJ0MH5L2kBLMHicXyRpkyiekKSYeY7REK080
r+QtyMl35134c5nHrYjsDf2ynYign7GeL3y82iwWTu5qTh9Zia3YQ3nn5f4r
uIjzN3fLCbheYf1xyZ+23K0yw3/yik35jS1ioimcIfozzQEKTZNFhjUorEl5
+/qtu/h/PQDXSiNbNiCOso0mGjWAXvev4qsUzUmuFxgbHcnp736AMO7w//V2
hNdMHJPUjt5+IbQmEVr00WWVlB3Qx5W7b1RMWXOfsl66elPU5f8/bU9M9TW6
5eeU5qlollu7Zjn/1y9UYSpXnHNDffQ8cpslq7Cym7QP6vlDHp3MLgv+qJnq
N1goKD8JKVlfKxvsjlIsIiEJEmO314yrvFEvkrEq8oN2Y4qUyT/ZoOESWUx0
2gBx6Blnav31Vy5+hD1SJlv8g01uWUr1wBZSxYfcTrmYJtC5QjdAnjlttqYW
ppzr4wiV6dNYVN6F2Un6xNH50dkZhxbmizJw8meaD60hq1v/Gqo0x7X2livk
EcQ6dN+YlPmTNOuOmR4Gyen0MX+wFSNWKCEV64VfyklTjSVO1+mYy+Hk07GU
TnBe0LzYje7ReQAn+BvyUPEH/7fi8eMVgad5aP7NhwZd8nz/zYejxI3J/fzm
56uf/Kb1u0/OjkEufbYjZKMCeLNa3AvTefMYQiKILFyUQEH8+OR7GvhcXjim
6A3lIq9JCuN89bta0+f011R8o02Zb2Ht0gus00FM5bCA4qa8NMiI/4aecIn8
R9kaYJWkpZ6K2/sbp3Gkd0X9+h39bjsnxAMoo2pcg1OHksxenGpb9k/8+Sm6
EgsxoYWk8rwEskmedUpIYGEQAkXs1T89Oj33s2U0AeA290J9ca1nIMG6l/dK
MLiezgjXQPtBflln5Djq6waJUbHikLDl4XGvFcKHXNzZ2faK/TB1OX/jqI0X
WK11clsI3ACgXvKLSe45gDay8pGkfhe7rfj+aNbXNQjs7znB682CU5pL4R52
uffI5w3tq/WSS5SoEnRUTuAz5YJpNJ8G7e3qGgUaLSqm2UHWylA4YpXjaoae
XL5/on6LNziSJ8V7yD8Gc74L+sxXycs05uRBJjOilXqbRbSBnqmeDgINThur
PEh0BaEPKtdGv23darwK27Z7xL1QSQyuj071okqb0fRHi1tNAl+IQ/DIbitC
V6b+/OKTinVTJD6DoDpy/Xnl0MQNyFPXZ6RuHL0gJZ24lpy9FkRq7ImTaojb
egwdmBIY6MyGamiwExKfVZasN7IxtPDrJJ2jqOxdpIAWFlzQTdePl3oz51zp
WPWF8zGXOoq4K1yFJ86AbuW7iUA0nOx0g0UW0cUY/fpvMlPGHv0NdFTjcROz
f9gKxhYXClPElhybo0wN+bxNxhsR3RA8mZXVra2AF+SMxMBPnOuxEztx39n7
Od8/cf3zyNthFt/QPeINs/UOFrotfHvI+CZu/nhiWPYL7yo9YOcE417MLNRK
SoJIyXNKdAU4NnYCSBykkK3FlUxhaLlZe2RLtTeEyR/t1UPNCy9AxFyBFnCC
+SDBSPi6GqjDszB+pSxTOD6POMIBjdP0pRLXLR/Viiu0IgBcLdd0mqaqof3A
wxoSE5gbrOFiFXMhaN/POwHqC/HUJB/sxRwdRcfR4j0iLboOK1jkiqCU3flg
MsnF5dq4a00Q2FUpFLlT132xj0y5HHUEzt1g8q7/sC746cP3HvkA+uzZatuP
uXZxLiqqWTgMF+kxE5cPosIlKrBk5Bi5Qm2P58yZ3JdNBQpnZvmBC9vrDOXx
UBwWRk7B4oLDtlp8hWXD1YZDt8fUNVmTCyIuwrMPclOumGR+jWN0JsoociPC
8P10FhdjyQjlCEdASellnNxp2hKkjsN+ZnCNL7eciZFzx0wNFs8ElpRuE9bI
4jHFwbACaBBePOuEI+BSt0VBEIw5uCcnrTd94+2v98+7ToCVlfuX2wp1c4dB
OSxrEVviyMiF8IN3MU/HdFQbwwVGk1WaZTkxQcir2vC2E1al4tuI66OyjQ/n
QgKZFGVyIg1hO7OUKxWqQwAhs2TBPthIhbwqw4jhZubRjfE0E7oFaJUImyqM
4IQXmWI2lxGxYVxKdsTnl/QGXBQmU39uen7PZLigl+kfNhgQEnGr1rqbdzOO
S7FNeZi4owBOQQwkgi9hG8tLkkkZ+Vo8PuOi47oVRIfEKy8TepXbm6YEG1Nx
7Re2VDDuiAIIimr4fhs8IE9LK878EG/gFfo/XsVoxkoy4QLZhVuKeDslifeI
XGQawecZDQA3qJny3bV9TJuN/ME6OXi3TsTHTd2IHTdeQH+vit95Wt/0gGqC
Uj2qJMYq4ohDhKRp2WiiB1KcUiRL8nbnImfwRNyvPcHQepzEvolHebKw8aZ6
ztQYXbbXCfEDPE/XARm+oAgYjwJ0WNGilVGVmdFB0Rd0jTFde+lmTSUecjR8
n7sv1dpG9IX0HdAVWgg12vQ6vnVuakNu6i3rn81F1fqgySKawsVZc9w0Oqzf
svTAPCWRH14qCHhAu63Akq7ExJlSgXM8JbPCvCdwRAC94OimLJ3QnlnSIPss
xfLQgXWzWHvz9CJZ4NKlBNlaK1rAbMS3k+IB2qtpY0nkZs2VRegTu86JmmaV
EdMN4YNON6tJ7KXuGFgta6HzqJwxfycTTqRglXxPy1TiQmEyeMgWsveZWU1X
8AJPL7rGghUSBwhnR7HfFHDBXO4qnkdc/MOuyZZ3da8RFfW2VarrQkjpdmSe
G+/FYMf4LwJgn0vtERNMnakotF5tYkHYc0b2UlxByjUJwktXvGtSEcbjbcVl
8Od47X0pv0UVuYkZvopjrYW6uoBfBaXmanYhxinhGkR11nheonpqGp8wUnvl
WsvzKM8Ks06VoYEtC2RL3urLIPDylSUpKPZWagpjNxhp52ZawGOrI7uy5Lx3
81uGAFuh03PuVJlM5ZRljOS/jQnDm6S5nkcIHhip9+R4sKaAppIEQoHTi+kB
EqIFcYeKEbHGslf43AFcrGzEz4mpl0wD+a4YXZwtPGLjFGWI5jUf3u8iN8Yh
lCdCh/LMArIYXecJNUqoEy9Zv7RLzVvW4Aji+UywMow92zhjI5TK2IqusLbc
eK5xTiADs5xCJyrHgdF7FNjOtaAzU+kau1tW7f44pmSu5JEtoIs81CohGprP
zLxlPZ6SG7ueJJNwdw6Z41Aw5pSKHUQLaA+4AA5xL1OlaIcrXVEaglx4fk2+
re3X1ZevyIqVZmkETx0nJ2AwgvE4UJVCq3CPcCvSSTrnoqBIqFAnLEiPdYfl
zUSiT3Cl5Y0lljeDG4NSJIzLNHqPA6Zw0/dZnnPAAuOPsapaphGhrwoLxHv1
VIf0XlKuCjqewnefsAl1r7RrCPHLiBAiC94oDZAZZCXVIK/iaRKZAKCVMH3u
+l2+q4a9U5o8zJ+9rzyQCWDhQIbcGhig9Es4BOwXoDPGqmQrgEmSFzlCCsEN
WTsPSQdOFSW/DdwqJK0wyRWjM1zmPKJgNxSbyoG9WOPtCvYVS3gi07JM6RJV
wZXsII9CZFaxDHA8GMVHt5VNq0hPn8L+pCZ3AzfTe4vLxiZl7MJZljHQ0Gjt
GKr0ILmCY8L+rZLLhvgZYBcxHkhk0i2NbH4UvuekNlKgoxkpBfO8UcaR9XfS
obpfy5Ey2TmO2JqjmnOzRPhcyDVSCMkJMUfPz09qsGXnyVUi6hE3X1GOmJHI
kYn6nnhuaJiPcUczKuBL0YJMkP1Yrj3S2TAvwpgOZ+JHF6jBWgs5pzngF4Jn
BRZ1m8e3ntWZG9aeUmNwIKfl08myg5thNtZsUZR5Mi9SSzuK8Hrhpun4WkiQ
NMKrZHoRe2iZ3CyM747Wg3MQnXDeNAasa4S7xfoJiWvyXp4cPX/69OTZ8ckx
r8ZUBjZzEyIoG1c38pAgrzmpGS8cThJuZQrIibhSPNaioGYJs5BqTym3xpjH
xizgedUAYbkbkUulri5DxGOCiNEcq9pfXLKFx3VLJP5HJ84gYuJMT+zs9h6/
OdnPJcaC2VzA9cJ7BS/P9/PhrFnd1Znkiq5iWhKk1DxTTwU+2i++fk9VW6Ql
UcleUQgFrheKIZOtRw+qAlIojbKn6YIcwHAUAI7lRW0uTj1iYzkh5boU/MPk
Dcia2bd0sG4zJxiRLxKMgyUWrVbMtuWcXTLrUnQ1W6n4ahDMAleKqJZlOMLe
mK4uJ0MqEkeeCPVrziUATjBXg97PXSNziyqmaUiGJCqVQHMjheZZYzfZyMKS
CVYEsW8nVzBeXzp7Il68/ih/rGIiMoqCPZAV0zX76SF01/gDSnIk7ZBfmsbM
TSPrL3Uz65o8Cp9lCs1EUT0SVIkDMPlkKHvZOpfOKRVrTv7sY1QlsDP+Xm2a
3mBJ3zi6sl/V9h3MyvjexQQa0C7xp57otcrrqjo0nZ2ZLmUnuvUq5qGnaNBW
pIRSGUAm7Hi7ECF6XJBbUXgDKARVA2ZsAiDZjJv+qyfn+3XPplmBLdxc2dMy
DGTMcfkKGgmmVIFZrCakCCezDoOrsxipkl21FJvJzpbRJDbMi5ybyuLGoooM
uSTD7jROo+oENXSWi5mZzFqkZnqGC4duMINavbo1E18zLT0IkXQNYYZT/XnD
BknZvrWmVuG+WNpsNBr+OJq8R4nb4K9fv9DkNyBeP0VlsUmGEzHPx5o/0nVH
bmpvRwcwpoQfTpXZyNSZrWPSScR7s82a0YtTYJYNNjwGaXtuCB+b9DCmz8TW
zHU0IqzcJuJPTByFZ7PyDPvEB4jN1WR5RVlbkjXFvLGDDn7m9Iq0E1lzNx+Q
2wPbhrOUQ7bh6zejl8/Onj16KEo9047mH3FWD04rqhHBCA238drGbMOtldyB
nlM5WM9HUiiRVsF/dXIiwQGS1M9JicFfuKXWCXiwCYvGTKcydkYiz0wjM9uz
Y8cySc5GsdO0O9DLg8wkWJIys96Bb8aX6ufSiyTx4A6c2UE3Tf/A8zg9+YFA
74HjAhK0HvqXD4adwWww6LWmQTvq9Nrxg7o0yOd9hgdhL3jot+v6qqLOoXnD
FfPwUdgLH5I2TLt1c2LTJ2Gv/dAPsdvtZfcOSBtBfrK6grAPzf5xV12BO1/S
BoQBDnuUjl6QZyNy7GjkHdHb+2oW8A/ODLDDZkn8zgbYlzn9tnNzSich4ElZ
NBgq4OTubaoQgeEJDYmDlbTv/m5LOCgAI5l1L9jZg0Fxlz5MMjDU4TKyUCdA
vJM7zQMb5bzdKYKM2dUEmcAd+vgVALrWjsJOqRaafnJ/HwAUD/1gS/td+/Dh
otRGkyvewefnxfnsNI82LqYZNLesZqd5wFr+8Wu7PJs2dB6AYLxTJ/izrZPw
40879tJ76P961ye7ziTob+1o5z7wJ+w8xGKBV/HbdRy/bTfjD3HtU/r4eMcn
O/VxRwc79nF3Dzv0cfnAj3qtVq/TbveCdtjutCatoBX0xjvgrk7Qa/emvW7Y
6nY63Q7825l12y140m6HcTvYoQv4rNMKB2EUBoNg1hsXu9ylCxo1GIQw7apu
dlmImTx1E7Z6URAE8P9BMOjFvV0WwuN1Z/1Or4v/4g70uv1Br/vgztY/bX37
k/eR3mmqbOEBRkXmwap9CGmev5EsoUDEiIUj11Q2mqYx1uEhgkN4VhE8Rlug
sOWi7DnluyTD/UJQMfEZ+IN9MHcHRE86IU4jaA8HYThsB709ZTpeM7Msk0Wy
hs8tmpbPgHvT6gn2jjIiVr5CSAxVZbC4oIiTil+7nboIVb4TbYOLFnxGmrsQ
b1v4RXvKz878lHGn03KVzmP7V7El4mnZIDrqdFvJycLPx53K4/6LVhC6R/Jp
y7jvo5/0KPVelCbQe5hbZrPZJHAufUd0JTccf5xVbUkV8fhT1vPR+7jv1DNw
4s2RNzxMQZiiC8pO/HnZQMV2lLMy1TnakHMUNC4kM6LRRNFtjsbphvXCmNy2
7o/NMCm5aM7F1aBZmi62/v0/BzRz8XFzpSnmiUvuA5R61/yFrY9evGYruwQK
Go+55+fqoXijGXSNQZZ4Umy9dHXwJHWWV7h95n983bzP5FA6jdkro5hQmlWp
uvimtn4Rry6jpeY2JguX5rw/S19xx9Vr+XNmri4+MrZRx1Gia/LEUHHXLo1b
Vy/Q9cqQ5NBr3aCmM/Yfm/k3MecYcABcFuLcEsBRiwfiXnG7JL0XtxZnCzdB
ru/mPVMa/HL06twnnRlabzYrhlSN6GDboFEZkYtTMi3f1qYz80+W4QdWiidv
yRzf2+1hk1YwHMy6ragzm/Umre6gF0y0h157EEemg2/eSBYn7SXsDrCDAQwa
th+gAH12gkTh9ZnmsNXvbQ+cDUn7CLtD7KHbGU4n8WQyGA8H/Um/3R93OnGn
NetPeu3uJB7czTtRz1FGBSAIZih9ErM2B87kv8/xFWEPNuwftaDZJrkqQOlF
TBvRar1ATSCAsWEbpBsJ07b7GPYNQXTYjvPSaH3kJYDp6Da7PNofVJOQ9sWE
PDVEYeKbidqK4nuAO/exIZx20A173U4IJ7azbsd3dDvPz616h1OUUIMCYR1Z
4EVKc5miuxJFFrBe3iEyyWqySdZyCy0fUKMHNf+hXyLEeSAUCByO49mgP+jH
4yhox+FkMOvF/cm4Mw5mnV4wVBDO9eIAokBhHA9as27U602C2XjY74TD4TAa
zKbReNhuDYbt+6CwDI28LtkKFx5zM3EgRYAybLYirGH6EyqVCiD579lmNks+
OLsFHN49u1/a+Dw1d3een+y69b0AREWElRcnzyQRuP1ml5V2WthDl/7Tw/qZ
uGQJPBUcsjcGFAqHte8uWaohftT6QcgioS70BRNyQsGOztZmHjucp6iKL2tS
cyn3WV2+dDqLcP5jbJxbFfIOXBClMd4kc7GB5GyWz9WHxnVu5bQ2mfZB/hMo
YLm8j5iMFxh7IVzLiupsCo2c4J2y8yg7Y5g8/WgHkBEaVJFPizk4XiDUB3uK
RP4MqNB+0+/0pQ40ZxIn4w3l1NwbcHo5MbQHPf6T+kA6s//HFM5/mFRRRkK3
B4bWTtgh9bL6+p2gDWO5wtTxEkt9cCdaJFA3u8qvjInqjyq+2znFt0Ht81uX
fF5X0DCSZZGo+Hh5MGCf2K0iKTuA22LKbX0hPpAH9N/zNdrqczaOz6aGz6aG
yqafTQ35Pj6bGorz+GxqqOwDfz6bGj6bGnghn00Nn00N7s9nU8NnU4P9+LOp
4bOp4S9a92dTw2dTw2dTw2dTg//Z1IA/n00Nn00Nn00Nn00N5uezqeHPNTX8
DktDKZyCy9xRhLPGdOLvGXWmQJnPA8m8oATOMvvN6YmQf20SP+l2UdGBFp81
55Oukpiy3YLgNdkU8p9iB27FdE284FwRW0P++XmdQ9EEESifSkqN/NQ0Ua8U
p7hDVvhjrKrOQJNsERUtHETFKig+yXIuB5yqEeHxfzv1zjeZCka5UCZLPST4
iE6BBSfMrWij1+QCGLnE7I/dLrMEev4gKx6nTV1AKWxAHHWI1DdPcDFZ6ssM
cKaSZNBEmq53ktP+lFMYGVDHdEFc6sE5A0pu5WTQw1cUGoXz5VPAZCfOcnXP
MAUjxVDRtnFNRCd9ZGTvgobAM/ai7LQ+WchYv5eY0LTL2yVGWa5FaNElmDxd
lG8S48PoJmuRXhPDWLmpfxIo8zwzCcuGbRgtpivMFYSYaJSjnOUO/icZMZOc
FfN+Iyb9/OMeU+WOxkb/DnPlp3SxxWS5UxeXD8jiMGj3e7Cr7Xa708bfezuN
3pq0Wq2gN+y0e0EfmveA4+8NUevemvbaO9kcyOoQtuJW0BK7Qx/kUOim0++C
CNrphzt10hv2gt4kbHUCaNaBeUxhRh14CjNCM8Juywl3EC622wjMD2CpMabM
FJZWuDY9FX+ngzmoKCvMWQr1g1368FVUBun4KFqN00WyJrPap/aBMgP0ETTD
WvGDnfs4Yk3zw4oPdusDfmpni+kGEQTm+t+sU1ab3m8oNJJ+/GGZSKEMRVsd
kMh7APfAlvaJtwxbYdAIWo2g+yoYPOz2H3Y7fzc4wyRFQhae++hJB0G/NWgV
O+g9BKa31fp79QQbA7hBLZDzarMEi0NT1YBapbGAPg18tLYeGNLeaADKwTD8
t4i4i+Iez/i9Y1IJBCueHME/8Rxz1U98wK6YWwbh7QMwJ7cVU4VeEqvMDxHH
t3u9fheuXG82BMTRm7Rn3WDWBWzfHw87IK89KK/iQIaifho6F34Gl+VFAySM
ysE/NCZpuqIJNGjwXjeeRt0oCLv9/iQcR/EgBCzUn8Xt9qDfCqJd7nvQiqKo
3e/GwXjcHXencdAaTONOezhpDbrdoHoBt85M2jiTIO6G8RSwTisAIJj1Z8O4
05pOZ8NZuxOM29NdZjIZjiOgltGsH7cmUR/+Fw/jeDJttQadaTCcFNCSqhpc
/Y/8hL0eQchdo9aQpasJIHEPXHjV5V/dY6ii8/dQetOymuAT8dwsSrQ+3+wO
km8+3ELC79wA+vkfRMMtFe+32/0dx+x12/12pzfuD9oDoeODHZt2gCoDYR2C
JG+cDHZs2g3bYRh3OkTy20zyd2wanBJncGI5g95w17VW8Aa7NjUsBHAH90PV
TvzB3QzCLie+lTtA4rpbBy5rcEysPyIFfrl7B8IXvAybx+En8RV3MwW7drCV
Ibi3gzuPaatZ+KOXe4W/u8ocU7bKlurCCkXpK2MfLuXHkOwjlIOMktSPY9Ze
goSLDcXSS4lJNGGGAIpoZq9MoSynNhin5ZMPWV1T5ZUosixPgoRqSrNM6U/g
3TSJLhZphjwCDlZIs+F6vSaZzNqZtJY+MqobV2cini+uctf4rhhNS+ToQbQs
BPYP5GmPHBTZ94Xsy7p2Z3y1eaKcbYpIqxIXRtrnabFqxAwkpWgztziJHZib
oNcFbZVUGMt8sUnaCVICyo147eQKkcmmmxFzMvb/HA/hau0vGSq70dQaKo/g
K8pmbVr+fsWzb/iiPFtUNI9V/dSEKXKsOKUN5a6Uca1kXyp2tGJXt+ysv+Pu
ykCmfp+70n5nR3+pnT7Cnz/DL9vO+g/5Z9tufreftrS3mLgKMe7qLW4OwPHX
RnWqvN+xF6x1ERvsTQgNnaLoye69uEjq0/hGEF574nHa7rYmuzJkIPL0po53
ZxhOgUEDGRD+ne3KEDouqux/KlqgEDvelUmj8TtwM/tt+g34O9RCIZu4M2va
D9lttdVGf9NBO2qjx2k/6NECd+aquzD1LjLHs34H/p31je9psCvPGUStVqcz
bneGrf4gbAVd+E8L+hq3w/5kN1UWLKc97gTDcDwNJ+14EnYGUTgMw6AbR+NO
dzf1HjLOwXjWj0BGiMPuJIDZdPrDYavLe7Pz6QCrDmcBe9GF39r4exj3QVDr
tT9pT1qT9mAc2D2ZBJ1wPIzG0a6dhCDpdMbjwaQPpxT0ok57Mhx2gTYMO5No
J50B/IxB4B92+8Gs2+0Nx+P+dAIAPxsOPm1PgGKRJDJF8QIgZAIQEwYdXGa4
K9i3p+2x3Y2oFw2nk+ls3B4MOtNoV7AHVqITd+IgHsSDXgjbMZiE0/Gk3wJC
svPpdNrRMGjD9Z3Gw3a7PY57u7lp3C8s3f3Fdv/Nj9bOqr7aiyK2Nt7ayuKx
B9HLBmDRBnIDjje3cnf8ySHW7lHDY83fo4S7swQzIm/YnTujUgxrzYyYCa9a
WcjX30vF3U5seJH0DO/2NeWyL/4F4vn5qf7dAOBhp3u/h3dI7KIurYG0CLlh
Kr+3QUO9ZRzvdgE3u/inOYHf6x1tvaLz53Ovc/Snu3V/NLMtc2DY4S5Ozujh
vBsPtrMftOMIvXqbpOu3aUa+0EV/J+ggw3y7vl/qAICl022hJ1BFI2RUKhr5
O6/E/BBHef7NaIvK984fkAQMNWQy92ntYZUFsvip7ZWMKn381PZFerqrU5u/
m35p13iDTwUsEHio9krWXGWTTwSqQas1/Ith6g8ClWUnmE/41EMt8hWfDJTC
hyiD8antiwzJfxOg4trczXky/kSICtsAUe3/ymjqd7Jk5qfIm31q+zwv19mV
rzQ/v4+po58dIeoP838mPIcUsK6z6UuqkUDqNsr8z+pSVwWLjxuiRc2F7xtN
LHnpbtbLjfjofE857WOpWSnp0uOpEb3d8U2C8CuqA8GFhlDt35Q5OHU5Tb9Y
1w4dPblmqnHCsnmWOUu0W+kVU72LqpJK6xYcw4xDqhaEEZ+nQg1S1GqaWZBq
k6fCn2ql8u+x1JxViQo7O0UeFqvXpwuOwuAKeDrDyWXMFauvRI2NW15V2ZSr
+WIoxk1MmcJXOHWjL71ZyYly+T6v9mq1yVBz9r1TaSCrqV+gG7xuCsHSEFyZ
QOKM3Knn+HPVdjM6q5E2ljyy4Y/5WePsx2cnvZfvOl8J1qrBvtOO4ze1kr7V
+Qr1eNSRVQfWpuMLhBt6XKvQ+2nzNL5KpjqL5PUb8wKrXMtz4IH//i44ev82
vDm9vLylif7YMRO4wY3hTys5dfhCOHT8KI8vhVU3z34yTeRsyk3KCHfLuZWJ
Sy2az6seU0GMhpziNB/oZ/DFT3m3dLrraml7RfYOMk+cbyTAp+q0i4fde57b
bt3tx+Xd7l189VXxyKtPPHfgjr+xtk74G/wpxo1YkKuGOF++YieBmiuT1NTf
b7Rc+qdpWhFqkOvdtdXbDXdjHmrnbF45Yc9S/4ShuQA/6LdeONJaeNw+vzx5
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
3iv+PHPpDO0V2j887/8D/lO6+eOQAgA=

-->

</rfc>
