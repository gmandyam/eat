<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="April" day="26"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level message:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.
In cases where the CDDL for CBOR is different than JSON the CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT" format="default"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition" numbered="true" toc="default">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB" format="default"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT" format="default"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token" format="default"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token makes use of the CDDL defined in this section.
When new token formats are defined, there means for identification as a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

EAT-JSON-Token-Formats /= JWT-Message
EAT-JSON-Token-Formats /= DEB-Messages
]]></sourcecode>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44), bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>

]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently", 4 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
          <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
          <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
          <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
          <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
              <t>The following two sections describe how to encode and decode a nested token.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                  </dd>
                  <dt>
"UJCS":  </dt>
                  <dd>
                    <t>The second array item MUST be a UJCS-Message as defined in this document.</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  UJCS-Message
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.602(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<cbor-wrapped-claims-set, json-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl" numbered="true" toc="default">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT" format="default"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT" format="default"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44), bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$Claims-Set-Claims //= ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>


$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently", 4 >


$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => ~uri / ~oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.602(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<cbor-wrapped-claims-set, json-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set


nonce-label            = JC< "nonce",    10 >
ueid-label             = JC< "ueid",     256 >
sueids-label           = JC< "sueids",   257 >
oemid-label            = JC< "oemid",    258 >
hardware-model-label   = JC< "hwmodel",  259 >
hardware-version-label = JC< "hwvers",   260 >
secure-boot-label      = JC< "secboot",  262 >
debug-status-label     = JC< "dbgstat",  263 >
location-label         = JC< "location", 264 >
profile-label          = JC< "profile",  265 >
submods-label          = JC< "submods",  266 >


security-level-label = <TBD>
uptime-label         = <TBD>
boot-seed-label      = <TB>
odometer-label       = <TBD>
intended-use-label   = <TBD>
dloas-label          = <TBD>
sw-name-label        = <TBD>
sw-version-label     = <TBD>
manifests-label      = <TBD>
swevidence-label     = <TBD>
swresults-label      = <TBD>

]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl" numbered="true" toc="default">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl" numbered="true" toc="default">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

EAT-JSON-Token-Formats /= JWT-Message
EAT-JSON-Token-Formats /= DEB-Messages


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  UJCS-Message
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
}
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
}

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT" numbered="true" toc="default">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392" format="default"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp \
    "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level
; This is not normative. RFC 8392 is the normative definition of CWT.
CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAGJIaGIAA+y9a3Pb2HYg+h2/AqU+VW3lkJQly89Md0YtqfuoY1seS44z
N5XqgkiQwjEJMABomfE4v33We68NgLKSM1P3frhO6rQIbOzn2uv9GI/HSdNm
5eyPbFmV+au0rTd5Uqxr+qtpjx4/fvn4KJlm7au0aWdJMqumZbaChrM6m7fj
Im/n4zprm3GeteNl1uZNmyR3i1fp+5Prq/RjVX8qykX6W11t1skP6bQqm7xs
Ns2r9Mdt3vwIj5rNzapomqIq2+0a+r04v/41WRevkjRtq6m2ox+zfN3ewpNj
/N1UdVvn8ya0aLar+MG0Wq2zaetabG7Cs7LCR/V8ms+adrvMtVlbtPjj+jZP
z0v4sU1PWlxW1sIc0+vqU16mj85PrveT7Oamzj+/SuFHktV5BpMv27wu8zb5
dAf7VSxKXHzmPp/eVDUsegYb9So9enz4ZHz4OMk27W1Vv0rGaVHC9F9P0teb
cnazzGY5zJC3+3W2qfNymkevqho2+iqfbmqcJsy4qrfp69en8CpfZcXyVbpc
LP97Iw1aej+BHdCRfpukb+Dst9nKxvmtqIvZbVa7FzTK/9hkS/hylV7n09uy
WlaLIm9gvdMJ7iucRA57+vT586fpm6rOb6tNk6dndfEZpzmFwWGeWZmeFfmi
wl3PF7Abr9LTbFnMq7osMjquTdnW0PLD1Qn8XN8SQO79+TB98fRF+uzpYfoc
wHEvLG7FU/zv/9YWk3+T+fnl/T5JL388q8pqcbsJO/l7Xuerbfzm4Us8ev4y
/TWrSzjHarO4Td9X2cyW6F7Qema4oR8Oj9Pnr6+iBZZFm8/SfwTomFWrsNY/
Hx+nh0dPj9Inz54cvngZVvrXakaT7S81Kat6BbD1Occb8/7X06PDw5fy5/PD
p/bn08On4c9n8ueLl8euwfPwpz198fixtj08ss8Onx/rn09eHumfzw6t7fNj
7ezJyxfhs6fa9iVgFfwT/8F/Pv529eKYf7dZvcB93rtt23Xz6uAgz+r2dlyU
82pSLrLJqlgerG/XB7PqrlzC3k/gxz/Mi2X+07Sq6tn4btG8ON7jrvgif7x8
//os/e388uz8+uI0vfqfV9fnb9LDly+OR+nb304mV9dvzyaPHz959sfh5PHk
8R80GepA7yX+PWYYeUvXOFumv+VVs4Yf2XKMl365LBZ0PU/wP9v0EfS8Tx/a
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
TjjMuTAWCEJ5qXQreiHOJuwPwLUAnBK5wxldTc1zilki6qiakPTsnib5clbX
vnKkUJ/mgW3kciDQHeUigm0huSYl5nKh8unE8ZwRu8XVx4Zj16pyGpyt4//d
GrQnluIecpIeVnb/Cj8ylWhInRSUe3aTDDkwXKC0rsJGCm90HHfSQs4p90Zi
cKlmqeFdj8qQPJ2LICkdgl9V2Kt8u1vwCfH+msN/CnluLalwkLVZd3lNF6Mn
C1mdyjvNXqHqMo1E1Da9ODYJK1nLZtPJ2eVe1JGCJtBW3GvkNWAlBbB4WtIG
S7peURBEFjyvv/kTV6Q57oO3UG/1yqWAIemqU0+bhC0GRjygvFvxJVaZ2ssE
kMdeamLQmWZYT9kJmH0f3POTYPqK6duS2Ow23kdYHYqEGXo71Gq5SItsFQOk
40WM1Jm6kcHY4k5Bj9/DkOyb7A7uDUTwl2ZRDnuz1qW1mrULToDnPjRndzPe
z+/Ul7iqGThrxQ0rj+jyMg+mgyeejrNlbtjJwlT0VMzT9AfxrkbjPAjukE5f
UIvhgjpYHjTzHv5TwoAqXWP7pKW8/ATbjCqxh2uKKu2UFHJtsVBRjUqEjQCN
hx9AF04DX0OjerZZhy/3MGqBBd3hjP1sKxMm3QmmchmQ7b4RUUWf5aWpCqvI
C7W4S/Q8RF9i+gH5iO3v/PHjp5CdQkTbH3/Dj9/S47f0+CMT2Kuvz8e9Cd9z
sPkfqVPza1j/F+xWiWr4TWCQtIT9S4chLerKLV+iSQpHLsac2e556VPUpKcx
P0K/DHyLLf3Cnu3CWiiuAL2uBxMqUr8ll/k/cKfnQQtcrVxviM8Ot/L8xWuw
M+C2vROTlN1KFSefOyfVALgDo1G/pRxLGs7qJhXAB8gyVrevT334uZIo6OYX
6gb/u/i3v/WPm/KrvsEfzadA1G0tUpFUGji4aLqamlMdiTkb8RdfAg/7YxSW
+oLZLoeoUqFIElI0s02TBDV6hYdRTfPx6ekX8RFNWS5tSBPcQrGK+Pie0qTe
/IzSyW7+M0qTNlUu/X+gCNxXaD1dfHqhZbL99EKz7bJcSNBijqOoMunxt+d/
aNBTTnr9ZVSZVbympwx69GVUmTa8pqf0uvdlVJkXvKan9Lr/ZVSZAbympwwv
9GVUGat0LdnS6+GXUWVUIjG9eP70P/4w+jKOP4//tl0isOrN60eBrRJBN+Aq
oEeEyaDQt19yEwHl/41k4kbkaz3nD86DD2bTbNOIos/l8sxBE6YbklJTvr8N
0i85EGxB25jPWUrJVlSYsbWS+BnDz3GOxm4r+pwG+u0Jmit07zQOO+MaNjud
diBon3/buKajoNryMLnuysh8ZgKwk8/jM3AggwVnGVYQjjiK6FJY2IVeFd2y
7CX2muXf5Uhkx0SqxAlkBv8Z5l3mS9q6suqP+nlgtr5OkzmuQl09rEyZinUC
V6V4OuzvNiuXr419uT93+a8V5abRauj9p5wafJLznep2do27o1tNIZTf0eH+
AWfigmopDNp5S6mkUNA2MgkacLw9ollsPtNZFMYYtzbpFe2M+D8lfukvZ80/
J82/t5uTt180v//9f7YeelCzWi7JMBs5MTSVsMTcjUNFUROzWxGEglI8CnfA
tGI6uWM+up2Lb83Zo2dZKzr348t5z9Cfr5OrKzpEbNSnePgdTWj4WEi6AAaP
45ZTiT7zVKd+xyHdWEm+pHGZ2zBEalgEMS0lUEBUIydSiGq69kX8m2Fr2DlC
q/LOGj/mZkjk3mm/0YD6+ftKmSZo9qK6EfJsBKPJDTc2PldzCi5KXpqf3ONN
stjmZT822HNXUBEWCIJcO2tM1dVujioshgClEEiwbrIyRkL0VldYfbRvUpXl
r9PVbcy1pO9Z7iFp3ps0WEhabyPjqrNU3V2+5ubRYpM2WN4kftJsd6Lod/HZ
nPcfVBW52I83Li4M9pX58kO5CpJI53fJTVBVOwyNXSRLvscVh2hVMlQyEt2g
cM1XQPOk8ZMU+N4Ud+90kHA3W9zhS0uSH2LvQgLmGzVBrpSbWNnUVIIdo9Zm
rkwCsY5eshcQm65uRdM3PwsYn7Js+9a7l5rRUDtXnpRlul2UJ5f2QRDeJyZd
CU3F3yyjSkY3VEkFni3XLI7epqsVmIGzfi+WH4gosVyBuQzFTvifDVu3+GCV
mu7vW5f79orIFibsi++e0O7j22eYLtgmKOb+u9uUP5SAPdUF+S0WjmPpVun6
anudwwfuhJ0LxUFoMGx5yjIawpWYCv0htcnh8PdU1lYz1CL3O+0fn5lxLSFq
qUVbm33zzjrG4oOcI7F6EOkLiwvzXU9v2Dvzd/HTTPgR5tZMjODRrvd77hyj
Bya4h8HcroDM6YgI0xsmshO9jdPVGfqokdbv4scAQrDnlt2U4U0kbJxR6uhX
FyfwFQktxCEe7FofdCmb8smziydNcZiVRRYTnzuUebN0+k1AE4rYjcJ8Ys24
MTaA3coxxrPsXqrRUFUwoXvOZ4mB8e7TuPkiVHActGPp8rAShdqMEgLt6527
Hw0+R/5MB/rF3+bHTlejx2qzFWLye/UOB8UORwJMPNycWKDtQ96C5hGjVyIg
U3hG6nvnTWfpivzCsrOvCEqYK5zo7zkr3wqjaimGkcyyZxbYH69SSMlFmoHd
1Oc8/NyxA3FZcKKPWjqnq1TYaCHWX1A1a798cgODfFEL531TZIjiriB73r8C
GMTszibM5sd5Mezstuchuh046lLiIV2IzfCcVYYjbWRqMV1U7cblHaDZeWqd
eVnuzP1NDj0f4O3azNkRUTvLawELkpjk2agJg4z6blsLsauB5lAyL/rJct24
txcjbuxrI4/4ydnzs+BcyMOzxIcy8cUBUz7uzVn6Q6P/zpDt/OF7Ol9oE7CY
vuULYqPO+3syDliHDkdHo3zDlI7vXj2NJW3tC2L0IZdK4i0wlJSZ3N/exKjl
Ulyk9S93okCbAbd4YvZvuVgIuLftUrv1vrCMWzyFNRk/bLJNYOHdrdfQwfV9
7rwFZslyywEhnrxfpTcZrEpLjuIN94eZuTbp7SrR3LxSf15pwA/C5yyXwFP1
XnSpwzxnAWMS9qkoLSxNSuMBbMsu1xzCyGwivg7B65tUXIgrG/yY21BkYY+k
KqybxLYV3wBt4DWhApok24ify52bgLSTsKxuDThdNNecccmcNLsbMV3eQxid
NvfkmzKLZRk5mesxy7S22SS4Jt++zwpEyH+H/NgLZDzDtKtx5bgUtifLDVfX
AsfMPSfAvBdTjNjjOalLtuWbzfgx0cSWPSWeCmoqde6M4/TeJSsO23S6g78a
EmnDcz7RnqVCP+mKOaXzTsdqSJDsXU31MidQf2ZJ1pCtsisFO3519voyZkPH
knV4eE+oVH5gBaEh1Irm4W5w7uIioCOPM9+1zvna/XPh17x/qaIT1MJfVLul
7mE4wFjs2KTZ5oo2yN/doXSpex7y97PsHY4jCT4ylehExUruDpo4C5o4MaQn
07DdUhoOnM9pbfi5IsfpaxZRBfs1B/hrjn3znHog97SSgRxS6W69hNiyUsIX
L3fhLHd26w9pTC/KE5N+II1ghEzxLIxpYiEcR1gJ3tzArubbqhsScedFgSZx
95XuYtHVqsEtnqQc+Um1VD8sXiYSiO6FIH6RXXGNi/Q3XgRjUfDYZtNVmKgz
xyo03uPykLgjC3EnqOekSBnK5l+bfaR40aFiE5zeF7gbyKDdcxF1HQpvFdi/
hot+80auLfj3yzfgMQ6wnZUJltNgUHh58fyetxZ1VfDwBu/8cGteEw6RuSQX
hc7pJdmRGSYno4hPdRFWSFkAUw+PD5z0Ic5pKj/3XXaiY1d6sHvJCbPJ5MSH
OGrjdtjeNGlP2gHrFPcI9mMRIXItKoGNUcj0hzTEr4d/JLxPUCTkzr34SO6y
Tkjq4jsZaM3Xy9vjgJ+odHyj3BksiB8Br1Na5A02UzpWv4KGeHA0JMpA/Cew
EaebLJlz7EnBEd18UWnjNaRLDekCWw6lYtZ0vECM2dKjVAyPq0THOV/O2RTs
7rUciUaBIrpJ7fABnbDXQgo3FdKyxAHWszYrU3tcLZ1EwpnqC4NSvG5l5N5a
uKLV38HU5yV+V/c6VNW05lK98KzJNCDgarfMr6Gj5sJ05qkwsWAJS3ngsYbl
STVqhbacccKRrXkC2itTMIoKOogXctZd4KH80O7oOlK1c44I+9vzP3wpPIr4
HHwAbpF+xHEc+DUV+KKMUk8m580GuaTvJPbS/Nkmd4nb1NsIWpV76Dj0c9h/
bIFItMgRS6b3xBokNw8UhZA+QnV3o5EhOe0wiB7Oz8ZJmIikE+EGi0mDJh5l
y2kVFVzgchIwZ9fO1gNKoNn/vwryh3P2YAIA

-->

</rfc>
