<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="April" day="28"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level message:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.
In cases where the CDDL for CBOR is different than JSON the CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT" format="default"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition" numbered="true" toc="default">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB" format="default"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT" format="default"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token" format="default"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token makes use of the CDDL defined in this section.
When new token formats are defined, there means for identification as a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = DEB-Tagged-Message ; $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

;$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

;$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
;$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

EAT-JSON-Token-Formats /= JWT-Message
EAT-JSON-Token-Formats /= DEB-Messages
]]></sourcecode>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44), bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>

]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently", 4 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
          <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
          <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
          <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
          <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
              <t>The following two sections describe how to encode and decode a nested token.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                  </dd>
                  <dt>
"UJCS":  </dt>
                  <dd>
                    <t>The second array item MUST be a UJCS-Message as defined in this document.</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  UJCS-Message
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.602(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
  
    main-token : bstr,
    detached-claims-sets: {
        + tstr => bstr

    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl" numbered="true" toc="default">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT" format="default"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT" format="default"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44), bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$Claims-Set-Claims //= ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>


$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently", 4 >


$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => ~uri / ~oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.602(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
  
    main-token : bstr,
    detached-claims-sets: {
        + tstr => bstr

    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set


nonce-label            = JC< "nonce",    10 >
ueid-label             = JC< "ueid",     256 >
sueids-label           = JC< "sueids",   257 >
oemid-label            = JC< "oemid",    258 >
hardware-model-label   = JC< "hwmodel",  259 >
hardware-version-label = JC< "hwvers",   260 >
secure-boot-label      = JC< "secboot",  262 >
debug-status-label     = JC< "dbgstat",  263 >
location-label         = JC< "location", 264 >
profile-label          = JC< "profile",  265 >
submods-label          = JC< "submods",  266 >


security-level-label = <TBD>
uptime-label         = <TBD>
boot-seed-label      = <TB>
odometer-label       = <TBD>
intended-use-label   = <TBD>
dloas-label          = <TBD>
sw-name-label        = <TBD>
sw-version-label     = <TBD>
manifests-label      = <TBD>
swevidence-label     = <TBD>
swresults-label      = <TBD>

]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl" numbered="true" toc="default">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = DEB-Tagged-Message 

$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message



Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl" numbered="true" toc="default">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

EAT-JSON-Token-Formats /= JWT-Message
EAT-JSON-Token-Formats /= DEB-Messages


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  UJCS-Message
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>TODO: describe cddl validation</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples" numbered="true" toc="default">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation" numbered="true" toc="default">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
}
    

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
          <name>Submodules for Board and Device</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation" numbered="true" toc="default">
          <name>Key / Key Store Attestation</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
}

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
          <name>Attestation Results in JSON format</name>
          <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples" numbered="true" toc="default">
        <name>Full Token Examples</name>
        <section anchor="detached-eat-bundle" numbered="true" toc="default">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT" numbered="true" toc="default">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392" format="default"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp \
    "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level
; This is not normative. RFC 8392 is the normative definition of CWT.
CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAPHdamIAA8y9a3PbWHYo+h2/AqWeqrYyJGXJ8jPpzlFL6h51bMvHkuOc
m0p1QSRIYUwCDABaZnyc337Xe68NgLKSOafudVLTIrCxn2uv92M8HidNm5Wz
P7JlVeav0rbe5Emxrumvpj16/Pjl46NkmrWv0qadJcmsmpbZChrO6mzejou8
nY/rrG3GedaOl1mbN22S3C1epe9Prq/Sj1X9qSgX6W91tVknP6TTqmzystk0
r9Ift3nzIzxqNjerommKqmy3a+j34vz612RdvErStK2m2o5+zPJ1ewtPjvF3
U9Vtnc+b0KLZruIH02q1zqata7G5Cc/KCh/V82k+a9rtMtdmbdHij+vbPD0v
4cc2PWlxWVkLc0yvq095mT46P7neT7Kbmzr//CqFH0lW5xlMvmzzuszb5NMd
7FexKHHxmft8elPVsOgZbNSr9Ojx4ZPx4eMk27S3Vf0qGadFCdN/PUlfb8rZ
zTKb5TBD3u7X2abOy2kevapq2OirfLqpcZow46repq9fn8KrfJUVy1fpcrH8
H400aOn9BHZAR/ptkr6Bs99mKxvnt6IuZrdZ7V7QKP9zky3hy1V6nU9vy2pZ
LYq8gfVOJ7ivcBI57OnT58+fpm+qOr+tNk2entXFZ5zmFAaHeWZlelbkiwp3
PV/AbrxKT7NlMa/qssjouDZlW0PLD1cn8HN9SwC59+fD9MXTF+mzp4fpcwDH
vbC4FU/xf/x7W0z+Xebnl/f7JL388awqq8XtJuzk73mdr7bxm4cv8ej5y/TX
rC7hHKvN4jZ9X2UzW6J7QeuZ4YZ+ODxOn7++ihZYFm0+S/8JoGNWrcJa/3x8
nB4ePT1Knzx7cvjiZVjpX6sZTba/1KSs6hXA1uccb8z7X0+PDg9fyp/PD5/a
n08Pn4Y/n8mfL14euwbPw5/29MXjx9r28Mg+O3x+rH8+eXmkfz47tLbPj7Wz
Jy9fhM+eatuXgFXwT/wH//n429WLY/7dZvUC93nvtm3XzauDgzyr29txUc6r
SbnIJqtiebC+XR/MqrtyCXs/gR//OC+W+U/Tqqpn47tF8+J4j7vii/zx8v3r
s/S388uz8+uL0/Tqf11dn79JD1++OB6lb387mVxdvz2bPH785Nkfh5PHk8d/
0GSoA72X+PeYYeQtXeNsmf6WV80afmTLMV765bJY0PU8wf9s00fQ8z59aFf9
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
7CUAjZQLG2kD1p6P4McuPYyrc+FxMAOLiBi3cfhDiEN4thjPuE5+wNzcrixv
kLVlsUHMmzjo8GdBrXx2smge5gMKa5C74TyTkG2+Onz59OUTF2ccT2ezpQCQ
ata9d6evX1y8+OMTNfq5ejG+RLJ+SE5SixhmarlLNz6mm3a15haMArRQWz9N
sQSrQ/zm/FyDB7T5IGWGfBHCK4O4uIioznKO5eKsBM9Np1P7tRXHM03eJmPm
2aNaPstdAiaFloxOYt/+27OzS6VMJPiQwkHPqIpmfBJFkuz6RCn7JHAPabee
xNefjXuj+Wg0aM3a3aQ36KafHWuBYn5ietAZtJ/E3WN7VQPF5t4IqBc/6gw6
T2Aps2rDpM34pDPoPok7XO1uZLATWCrgQ2sj6Ayp2F8eSFAf+ylj//6GBpJq
tm795OE6iquFe1GBV9e12qcOl02LjaCy28yLjol2r35woYK7OEKwRN5bsBT1
YB3Xn8WzpN/tD3vjXi8ZtFqDXrc7aHc73V5r2mq32oPJQ1XQT6896A5mg36n
1e/1+j36tzfvd1v0pNvtpN32HlXQZ71WZ9RJOu1Rez6YlKvcpwq02h51qNt1
1ewzENd5VNNpDZJ2u03/H7VHg3Swz0Ckvf582Bv0+V+egUF/OBr0P9tZ+rvo
J7yzJLm6u0/LbMErfFjty3eaH7AZn4J5wylNrkuylOEaTnA+JjeOi8DPmsWs
kNaWyHSHK7uV0hC4CP9wHcLXt7dWCfhIuzsedTrjbntwaCzlrRyT2ln6H/Ym
cZWDbtLpHdiOZywda97xnzaxhbZjNbo3kGPcfUPc5uB0eiPjeHl5UPk6rLTd
5Wab7aZvV/WMkOUx1ezBNfjHgwRYTcXeuZ9ufT+l5Dpbpv6vcknqc1snCEud
7cLHKv38dPwvNIJOuCSPG8ZDH31nS2n7otKBwZPCMJvNJsi58l17GH7oP87r
pqTTe8KweDfp+02avu8200/pwS8ynp+in46CNOdBpCnLeF9lJEZhg4r7bvHU
N4GdJazcrA0+2JRFiCvNieZ0UOzmZJJtxSLEaS1Jy3LNZHDOWuolY7PSXS79
j/+coOfq3RLKSUiuVL04RNJN9xeXPnv1Vu7XNETI+cq8vDTfpI+WO9NdxeAw
5dK3ofUN8mZ1hLt7/vPHLfMMV7JZKvex5VSyYkSxwTet9Kt0fZ3cWlZT2LYt
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
eP21XayqW6hqNzMcxTcLRr7U+qSqdrEq/2cUnS3pV74VoknWo8u5PJhcsKJP
XE5xvoeT3EQObky2LgwiEa5DgHqwBeKOVeuwfxHmVCjNzbABDK1Dt+XNeY/2
mTt9Kf2kmHbunsn3VPCjLb85S46cColUYE+5JQtQIhIQmFQsMLfxqVW3vZ0F
XMml0GC8ZOJkjMGcVuclcwM7FsHG7f3y9EVlRPPAq8TgFUI6VyzTF1n8VjII
vn1L4kYA+41YMjxVBKt2h0HZJoLlNgWbnF5nrJHZOjtOFnlIaa5AxF4o+KKM
OloRm7xBzEzSkHIEeAmTFxkqLMiAV/i4CLPboNUGsyjA5GkSeCcwgs+LIBmd
vXorIqOZnxWc2VmjGXzI4ezMHJZAp0XaD5djB/xm9LIETCp1FvpGA5+sBewG
WVTDhC7UYOQ7wLAotKypXLO6xaaBbTghXKqu7aWVZr2dl2Sz3k43YmjTWVAh
HMN2GBzq8qlHw4LY+0c+bi3XWi+WFZtlmn+GW3RJJhm8oXbeo+LES7LKGeOS
MsXcCEgWz6foUZZQDuQVSdcNlYoPCUwirkdkDLo4/sMFVK1VFgnEJ6YKqfhn
MzvmPwEt+GKjd/EwBQLVwaVuDdTHRNQbIUq+Gk956W/vHAXnKWmfnCCPZaAJ
U8Is1VtbEOs0XdEaZ7lqqDDmeHjBCEm0nfUGd/F8h7XOlrGzoIWZp3gCBCoC
GI4QoQAF5laaG+aFNUhgkLtYAZuyiTfItQ3FjAGSwSWM2I590njFE/RYgQBn
WGegUudw5gYTCYNYBUAFbATDd4wJgSmvabpIOFHthvW4loaak8wWBZ0vUTsw
vfUcT/i30xCBmMgJft3Ogs2fr4hfp0uXLI/DMpujVqfZPn0tmGCpmZguDMv7
kB5cPD1SaVQdEAJIBAOhn/Ht/komIPfQtRwmzMGfF6iG+GjYJjFTARnNFfjr
ODDhC/iTw6o21O5KDZLOjGcLBkYIZwV8wRA6VpFZaeOxE0x8IL16LtG5B+zO
50fGYBvSbWFpz+x3hf9LZ8cBvCLiqcHXAoDTQvXRaXhBIVd9MGvPFdleQMoS
sasIMLnDsCOhfpF+UHSw1FW9yGWwZv0VAF0x8lD5Xd0HfRh0E+lgK3icMDsR
+6hLa6Wx3sUcXTB7EiNsij+WYKbb9zz/0jeilXXqMe4dDqhe3gLP05mWgOMu
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
j7LltIoKLnA5CZjTa2frASXQ7P8/cRlu0ghgAgA=

-->

</rfc>
