<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="April" day="11"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44), bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    security-level-label => 
        JC<security-level-json-type, 
        security-level-cbor-type>
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  ( debug-status-label => debug-status-type )

debug-status-type /= ds-enabled
debug-status-type /= ds-disabled 
debug-status-type /= ds-disabled-since-boot
debug-status-type /= ds-disabled-permanently
debug-status-type /= ds-disabled-fully-and-permanently

ds-enabled = JC<"enabled", 0>
ds-disabled = JC<"disabled", 1>
ds-disabled-since-boot = JC<"disabled-since-boot", 2>
ds-disabled-permanently = JC<"disabled-permanently", 3>
ds-disabled-fully-and-permanently = JC<"disabled-fully-and-permanently", 4>

]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = JC<1, "latitude">
longitude = JC<2, "longitude">
altitude = JC<3, "altitude">
accuracy = JC<4, "accuracy">
altitude-accuracy = JC<5, "altitude-accuracy">
heading = JC<6, "heading">
speed = JC<7, "speed">
timestamp = JC<8, "timestamp">
age = JC<9, "age">
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
          <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
          <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
          <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
          <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: JC<verification-objective-json-type,
        verification-objective-cbor-type>, 
    result: JC<verification-result-cbor-type, 
        verification-result-cbor-type>, 
    ? objective-name: tstr
]
]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="nested-token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
              <t>The following two sections describe how to encode and decode a nested token.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string.
The text string MUST contain a JSON-encoded array of two items.
The first item is a string identifying the type of the token.
The second item is the JSON-encoded token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"UJCS":  </dt>
                  <dd>
                    <t>The second item MUST be a UJCS-Message as defined in this document.</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>The definition of additional types requires a standards action.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two in the same format as described in the section above.</t>
                <t>A CBOR-encoded token nested inside a JSON-encoded MUST use the same array of two, but with the type as follows:</t>
                <dl>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                  </dd>
                </dl>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  Detached-EAT-Bundle /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = base64-url-text

CBOR-Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
          <section anchor="cddl-for-submods" numbered="true" toc="default">
            <name>CDDL for submods</name>
            <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : binary-data 
]
]]></sourcecode>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        JC<intended-use-json-type, intended-use-cbor-type>
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<cbor-wrapped-claims-set, json-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <sourcecode type="JSON"><![CDATA[
EAT = CBOR-Token

JSON-Token = JWT-Message / UJCS-Message

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"

UJCS-Message = Claims-Set

CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle


time-int = #6.1(int)

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44), bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (
    security-level-label => 
        JC<security-level-json-type, 
        security-level-cbor-type>
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //=  ( debug-status-label => debug-status-type )

debug-status-type /= ds-enabled
debug-status-type /= ds-disabled 
debug-status-type /= ds-disabled-since-boot
debug-status-type /= ds-disabled-permanently
debug-status-type /= ds-disabled-fully-and-permanently

ds-enabled = JC<"enabled", 0>
ds-disabled = JC<"disabled", 1>
ds-disabled-since-boot = JC<"disabled-since-boot", 2>
ds-disabled-permanently = JC<"disabled-permanently", 3>
ds-disabled-fully-and-permanently = JC<"disabled-fully-and-permanently", 4>


$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = JC<1, "latitude">
longitude = JC<2, "longitude">
altitude = JC<3, "altitude">
accuracy = JC<4, "accuracy">
altitude-accuracy = JC<5, "altitude-accuracy">
heading = JC<6, "heading">
speed = JC<7, "speed">
timestamp = JC<8, "timestamp">
age = JC<9, "age">

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => binary-data)

$$claims-set-claims //= (odometer-label => uint)

$$claims-set-claims //= (
    intended-use-label =>
        JC<intended-use-json-type, intended-use-cbor-type>
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: JC<verification-objective-json-type,
        verification-objective-cbor-type>, 
    result: JC<verification-result-cbor-type, 
        verification-result-cbor-type>, 
    ? objective-name: tstr
]


$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : binary-data 
]


Nested-Token = CBOR-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  Detached-EAT-Bundle /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = base64-url-text

CBOR-Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<cbor-wrapped-claims-set, json-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set


nonce-label = JC<"nonce",10>
ueid-label = JC<"ueid", 256>
sueids-label = JC<"sueids", 257>
oemid-label = JC<"oemid", 258>
hardware-model-label = JC<"hwmodel", 259>
hardware-version-label = JC<"hwvers", 260>
secure-boot-label = JC<"secboot", 262>
debug-status-label = JC<"dbgstat", 263>
location-label = JC<"location", 264>
profile-label = JC<"profile", 265>
submods-label = JC<"submods", 266>

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="cddl-for-cwt" numbered="true" toc="default">
      <name>CDDL for CWT</name>
      <t><xref target="RFC8392" format="default"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL is covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous error messages with cddl tool circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAANjVGIAA+y9aXfbWJYg+B2/AkeRZ8LKJClr8VoVUa2QFJGK8taWXFE9
OXniQCRIIU0CLAC0zHK7fnvf/d0HgLKqsnvOfJisOmEReHjrfXdfxuNx0rRZ
Ofs9W1Zl/jJt602eFOua/mrao8ePXzw+SqZZ+zJt2lmSzKppma2g4azO5u24
yNv5uM7aZpxn7XiZtXnTJsnd4mX6/vT6Kv2tqj8W5SL9pa426+S7dFqVTV42
m+Zl+v02b76HR83mZlU0TVGV7XYN/V5eXP+crIuXSZq21VTb0Y9Zvm5v4ckJ
/m6quq3zeRNaNNtV/GBardbZtHUtNjfhWVnho3o+zWdNu13m2qwtWvxxfZun
FyX82KanLS4ra2GO6XX1MS/TRxen1/tJdnNT559epvAjyeo8g8mXbV6XeZt8
vIP9KhYlLj5zn09vqhoWPYONepkePT48Hh8+TrJNe1vVL5NxWpQw/VeT9NWm
nN0ss1kOM+TtfpVt6ryc5tGrqoaNvsqnmxqnCTOu6m366tUZvMpXWbF8mS4X
y//WSIOW3k9gB3SkXybpazj7bbaycX4p6mJ2m9XuBY3y3zfZEr5cpdf59Las
ltWiyBtY73SC+wonkcOePnn27En6uqrz22rT5Ol5XXzCaU5hcJhnVqbnRb6o
cNfzBezGy/QsWxbzqi6LjI5rU7Y1tPxwdQo/17cEkHt/OkyfP3mePn1ymD4D
cNwLi1vxFP/bv7XF5N9kfn55v07St9+fV2W1uN2Enfw1r/PVNn7z8CUePXuR
/pzVJZxjtVncpu+rbGZLdC9oPTPc0A+HJ+mzV1fRAsuizWfpPwN0zKpVWOuf
Tk7Sw6MnR+nx0+PD5y/CSv9WzWiy/aUmZVWvALY+5Xhj3v98dnR4+EL+fHb4
xP58cvgk/PlU/nz+4sQ1eBb+tKfPHz/WtodH9tnhsxP98/jFkf759NDaPjvR
zo5fPA+fPdG2LwCr4J/4P/jnt1+unp/w7zarF7jPe7dtu25eHhzkWd3ejoty
Xk3KRTZZFcuD9e36YFbdlUvY+wn8+Kd5scx/mFZVPRvfLZrnJ3vcFV/k396+
f3We/nLx9vzi+vIsvfofV9cXr9PDF89PRumbX04nV9dvziePHx8//f1w8njy
+HeaDHWg9xL/HjOMvKFrnC3TX/KqWcOPbDnGS79cFgu6nqf4zzZ9BD3v04d2
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

-->

</rfc>
