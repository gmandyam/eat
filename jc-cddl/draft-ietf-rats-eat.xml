<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="April" day="29"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb" numbered="true" toc="default">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.
In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT" format="default"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.
These definitions are in <xref target="CDDL_for_CWT" format="default"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition" numbered="true" toc="default">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB" format="default"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT" format="default"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token" format="default"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token makes use of the CDDL defined in this section.
When new token formats are defined, there means for identification as a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

EAT-JSON-Token-Formats /= JWT-Message
EAT-JSON-Token-Formats /= DEB-Messages
]]></sourcecode>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>

]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
          <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
          <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
          <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
          <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>
"UJCS":  </dt>
                  <dd>
                    <t>The second array item MUST be a UJCS-Message as defined in this document.</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  UJCS-Message
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,

    detached-claims-sets: {

        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl" numbered="true" toc="default">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT" format="default"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT" format="default"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC<base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>


$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >


$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => ~uri / ~oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,

    detached-claims-sets: {

        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "nonce",      10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwvers",     260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "profile",    265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
swresults-label        = JC< "swresults" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl" numbered="true" toc="default">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl" numbered="true" toc="default">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

EAT-JSON-Token-Formats /= JWT-Message
EAT-JSON-Token-Formats /= DEB-Messages


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  UJCS-Message
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>TODO: describe cddl validation</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples" numbered="true" toc="default">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation" numbered="true" toc="default">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
}
    

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
          <name>Submodules for Board and Device</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation" numbered="true" toc="default">
          <name>Key / Key Store Attestation</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
}

]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
          <name>Attestation Results in JSON format</name>
          <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples" numbered="true" toc="default">
        <name>Full Token Examples</name>
        <section anchor="detached-eat-bundle" numbered="true" toc="default">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT" numbered="true" toc="default">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392" format="default"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp \
    "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>Use JC&lt;&gt; Generic for most of the CDDL that varies between CBOR and JSON</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAEJvbGIAA+y9a3PbWHYo+h2/AqWeqrYyJGXZ8jNp56gldY86tuVjyXFy
U1NdEAlSGJMABwAtc3yc337Xe68NgLKSOafu+XCd1LQIbOzn2uv9GI/HSdNm
5ez3bFmV+cu0rTd5Uqxr+qtpHz18+OLho2SatS/Tpp0lyayaltkKGs7qbN6O
i7ydj+usbcZ51o6XWZs3bZLcLl6m74+vLtOPVf2pKBfpr3W1WSc/pNOqbPKy
2TQv0x+3efMjPGo216uiaYqqbLdr6Pf87OqXZF28TNK0rabajn7M8nV7A0+O
8HdT1W2dz5vQotmu4gfTarXOpq1rsbkOz8oKH9XzaT5r2u0y12Zt0eKPq5s8
PSvhxzY9bnFZWQtzTK+qT3mZPjg7vtpPsuvrOv/8MoUfSVbnGUy+bPO6zNvk
0y3sV7EocfGZ+3x6XdWw6Bls1Mv00cPDx+PDh0m2aW+q+mUyTosSpv96kr7e
lLPrZTbLYYa83a+zTZ2X0zx6VdWw0Zf5dFPjNGHGVb1NX78+gVf5KiuWL9Pl
Yvk/GmnQ0vsJ7ICO9OskfQNnv81WNs6vRV3MbrLavaBR/ucmW8KXq/Qqn96U
1bJaFHkD651OcF/hJHLY0yfPnj1J31R1flNtmjw9rYvPOM0pDA7zzMr0tMgX
Fe56voDdeJmeZMtiXtVlkdFxbcq2hpYfLo/h5/qGAHLvj4fp8yfP06dPDtNn
AI57YXErnuL/+GtbTP4q8/PL+22SXvx4WpXV4mYTdvK3vM5X2/jN/Zf46NmL
9JesLuEcq83iJn1fZTNbontB65nhhn44PEqfvb6MFlgWbT5L/wWgY1atwlr/
eHSUHj568ih9/PTx4fMXYaV/qWY02f5Sk7KqVwBbn3O8Me9/OXl0ePhC/nx2
+MT+fHL4JPz5VP58/uLINXgW/rSnzx8+1LaHj+yzw2dH+ufjF4/0z6eH1vbZ
kXb2+MXz8NkTbfsCsAr+if/gPx9/vXx+xL/brF7gPu/dtO26eXlwkGd1ezMu
ynk1KRfZZFUsD9Y364NZdVsuYe8n8OOf58Uy/2laVfVsfLtonh/tcVd8kT9e
vH99mv56dnF6dnV+kl7+++XV2Zv08MXzo1H69tfjyeXV29PJw4ePn/5+OHk4
efg7TYY60HuJf48ZRt7SNc6W6a951azhR7Yc46VfLosFXc9j/M82fQA979OH
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
nLp3gJr6PQQosyeCyaLfxihgGQfyn4AvWNjlCWHQyeCLfw4uF/03mEowm253
fzPe3QQD6CjzcPdFs0aVR+9xKHyC1Q2USbQBFzS/DfIjwPjYMrvHqy88JkDg
CuvvfqAvPHKCD2xXuh/oCz8CQo/tRO8DedHNqDywh/EIY/cl5lbWHe2NIC/8
AOlT+IB3Ou1/QC+i5mn6DD4IZ9D5wF64j57jGhZ5Gv/TNSzyTv9p+iK9i+Rv
1nTmgR1nuWA320W4u4GFOAQehIi78Hg1qyg8/d6D/f/pxf8vSS/+HS539v+2
9+3PbVxHur/PXzHF5K7IhADxfshrV9EUHdOrV4lSdDdZRzUABuTEIAaLASgx
tu7ffk9/3X0eMwMSjO1sdmtZiUXOzHn36dPdp7u/RZ54B/Ofjd5Ej3gVvifB
1v2pkh89+aDjWz8FsIp7YRTnDZkAP6DSp3zDJjwJH3iJ6v1v7pXI7wdzeWCM
1uvJFXePVH4Pn9BYfx//9rf6tCHuTKaP07z4SArldbJpZEUjgarU2CRXjU+f
SLXmDIP81b9O8yVBFDS4SHKF9ShXGpueirQPteu+Fu47AVkE/6jeXL5Qb5/p
cEuPdLze4z1GvMdw66rce7zx/fqO+IGG1KuPhYJjjNV/5Okv9narwUH+Tz1V
hv30slvSZuxPUMZ+gXq5FDfkFymX8rpyrNvC1UQaHEpTR2hH7CprhhG8WhrO
vt4ud6op1Y6QgZlNvGQo3b/cnJHM7i3Agp5NInHvtwibTvzvS6PWofGPcLq6
LyzrI558z1jrqgi+EH5dN+x7esFfOP5LvLw0Ef6PVBF+UZIAwOcr81OuovqF
Vw3OgHvo1lRCFux7l4hWNFvfQJN86MMf0vUyfbg+CiIy03VF1FF/NLsf3pyN
RTYpHq6X58JwDhqV/lgxceHNDFGJHZb7SB/xl0QHMiS/Jn6klXVxuNsBubNd
HuE7Wkt/JCpYukcitOoQvObkkbQ3gCJ0n7EUaL+OL/5I1lBYfr/ycIQ/G9bo
/vrSd7k7CQ3xJ/FOiHHqyK+IP/6/WYL/u2UJjiLA9QrxeT9CynhrhWcyfXh3
CjXf01u7aTt9KGn+ZUClAL+VIp0+KWm+Wb9aAG+1iU6flLRa269THj/isTCI
/tgvUDKoagF6rF0a0KCr1rRgDOlUzDQoAFtN1ZDmFZhNruiVFuhCfw/sIaVB
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
wEHmrI5wd89//rh5nuFONkv5TracTpYNKTr4ppZ+na6vk5VmNoV9WzNeX+Rv
ueL6sfwyPdcLfmnbKuNIc4t7WBVm3dC4dP0A/TtZSQ270Qlqem3/vJ5/m3KE
sUfgMhBvlxgetXwil6t3K2i9XFquWv30mLGf9UjP4Denby9jaMxku92umVLV
n5tvBqzCmLD+Ut2tTa/nj5bQR05Gh6+UX6LTH1CRVns8mvdbSW8+H0xb/dGg
PdUaBt1RmtgKvn0vOVy0lk5/RBWMTKOd7hOSyi/O6VB4d6EZLPV7VwPnQtE6
Ov0x1dDvjWfTdDodTcaj4XTYHU56vbTXmg+ng25/mo52S0cyMfG3SYH076AZ
JE9h0ebE6/wfA7miMzAT9ueDdrNLYkDc/p76z4ZNo8suyQ5gyNiKDVKNBGm6
eewM7YHoiR2XldaGJEsYoaPf7HNrP1MJgm5lAx4aog7FtqMO9PbQ8M4jKmhW
u93vDPq9jlmxvTU3H4r91aVT3jhBAQqUDtZTR7x00lzn5KwAv2K2ynmHTLae
brON7EInBxzgwUH8NK4cxCERCgWOJ+l8NBwN00nS7qad6Wg+SIfTSW/SnvcG
7bGScFCLR4hChWk6as37yWAwbc8n42GvMx6Pk9F8lkzG3dZo3H2ICqvUyOOS
qfDpMeiJRylClJ1mKyGAw+9JmS2R5O+L7XyeffJm6/Nx9MDsVyY+PM39mecn
+079oG2UQaKV1+cvJQ2w+2afkfZaVEMf/xkQuB4NWcLOhIccTgwLNYt15A9Z
gNI+K3oIiUhk6XjNBzlYsGeRcXmHvl7kZIir2kmChNtsLFt5lSXU/wkVDkZF
sgPDITQm22whFtDgxuKV3qD7rm2c1KLQOnB7SgqWL/vIhdGSPK9FalkDhE/O
yCntKdeP6lWszdJNVkBpoQGwLk3l7t0Bow6+J07iuTmFjppxbyggsJxHGKZb
ZNQ7HHFyKblmaw/4T9RB58zRzzMn/eyjCvnI/BqYWnudHoxH6ulzThbM1ZoS
R0sk5cm9bBGkbmeVX1kD9c81a3UDs5Zl7Ys7//i8rTnDoMvSoRLT5qFwXYhb
5aPshCDmFWznN+IBdYL/Xm7opi6wYFY3SMWEyakn4XWg96z0e4HKlCrD2CwW
BuUym+VvdhkmAbYJgdKvoqYCTQhtFygH2Ar5XXwyj0oxiVSBj2KgzlDeHnG4
Dq8uj/l6SDiBCqqwaoRd0+BZSRhzj7Lw82RV7YE6vuMYLS1EzShwZ+BElxMO
nyKC/BcPg2BbqGYUXC+440MuBLAKrDlRvJO7UZIdYBUTOz9uuuwQ8PxJUV5O
504Et1Kjj3qn1LfPaTBFHksPqKcS+GNvfzd7KWq/yCqcWlInF15Ov+KtARzO
vagWeoXrCuovrwI5IHrD1TmjsCjca2DaOE+pF9KVuL2gbinMvhAxGsMALj67
9rro+m5FN58b0Vp0CNZ3HjFgdGeDnayJs+29Yu2k/kKkzP0sxFXCTMPpcrYm
/13iRKfB0Vmt4H/SHUUWXFLsd0dhBliyyY+6w4HpVLfb7XXp98EeUmpr2mq1
2oNxrztoD03hgZGXB2OySrdmg+6+NvlOK221W2KVHxodzlTSG/aN+tYbdvax
ho8H7cG00+q1TaGe6cPM9KZnnprekIl9n4F09hDKzc6dUGiXyHkiyoglGh/s
U0c1/TVH0+gH+9QRq/5oVMazZD3Jl9nGyNqPr4MEaVNHu9k5KH+wdx1nbH59
WvPBfnWYn4OL5WxLm4ZyUmw3OdsSDx6sw6q/6adVJglddCv3jJo6MMRsZLUh
BK5Oq9NutFuNdv9te/S0P3za7/3J7iPrvEtyLdcxkAraw9aoVa5g8NRIgq3W
n+o72BiZjdEiAMZ5RknMkd3ioNaCjk/b5tMf4xN73DUa5pQgd5EPxMzKOhD3
+AfvnqEtnOL8zPyTLiinwjQ2HOdWkAg/mQP7rqarppbMWbg7xPe6g8Gwb3bT
YD423GAw7c777XnfcMDhZNwzSsyT6ihOpCnU09C+8DOzWV43CMu5rvFPjWme
r9GBBhof9FPDlpJ2pz8cTjuTJB11DHMZztNudzRstZN9NOd2K0mS7rCftieT
/qQ/S9ut0SztdcfT1qjfb9cP4M7rSZd60k77nXRmGEqrbYhgPpyP015rNpuP
591ee9Kd7dOT6XiSmBMkmQ/T1jQZmv+l4zSdzlqtUW/WHk9LPEf1b98oIj+E
qUwUcl+rByTmHAghcQ2cINiX6fxlqDv7Hjj9bMn6Q7BN675dVs6/sNg9x6D9
8O891uinerQNu93hnkaXQb877PYGk+GoO5LjbbRn0Z45rsyZMzbqob2b3rNo
v9PtdNJeD2dhl8/CPYu2v8GRee6OzMF437HWHJv7FrWn615HJ/3ce3zudXd3
z/FJp8/edfjH5zOIjLRx+OWj6pDj802n+azzqOPXq6P++HxEHTtPzwfr+P6+
D3ZeLH6Oglf0u289s7nIXP41SjuVv7U3jBWnJnEpg2M5Mg9MGD2FVCQqKHeF
8DZTLyehG7Ht3djsZ17CN461kA9Z369zyBFliDsBrQyxs/BpywhmMrla5oRF
i8ZKvlG+V1RWSK+9Tms+K6v7+0q3+E745kHr/WBV9cRTpDXXB9VvePkhfHPY
ewI3lDp2r329NSNFzWYGVzOgaemIu8W6tW1I8gsXfsYZ1zAXoXt7TJWkjSti
udVyHURU0Vb8PoLscjLptsVASfuf40FWbz/EVVc/mbmrrjPzFYP0acm/33QZ
WyEilCHKFyx1PwciQXj3AJUJ5apUyqs962tmtGZWd8xsvOfsSkM2KaM/0mFv
X2HBM03Wcof9GLFRQLQXnr8eGaXk/Z61UBaP1LIw7GryLcGT/Wvxd+qehSoy
k1F8BuKk1+23pvsKI0ZcHsw8h7hOZ2aEE6M/mH/n+wpDnlcfu+yJaaBDFe8r
oKD9niHUYRe/GdmGDBMkIu0tlg077OnX6pKL3qibdMlJb9geYIB7S5R90/U+
CYbzYc/8Ox9ad732vvJWO2m1er1JtzduDUedVrtv/tMydU26neF0HwsHhtOd
9NrjzmTWmXbTaac3SjrjTqfdT5NJr7+PvQfDabcn82Fi5OO005+2TW96w/G4
1ee52Xt1jJhq1sLMRd/81qXfO+nQCPmD7qPmpDXtjiZtNyfTdq8zGSeTZN9K
OkbK700mo+nQrFJ7kPS60/G4b1ilUXaTvfRN8zMxyuK4PzR6cn8wnkyGs6kh
+Pl49Lg5MQwcUviMRGtDIVNDMZ12j4bZ2Zfsu7PuxM1GMkjGs+lsPumOjMaZ
7Ev25mTtpb20nY7S0aBjpmM07cwm02HL8NW9V6fXTcbtrtm+s3Tc7XYn6eBh
PeFegfQeV7fP7kpK3VqXZY5sHVtVlmFnizcNwykbdOx5jq8qxvAnX1PmIb2i
OYgPES44zyiec8uerwUSSWw0rqMQoaw2DXF8mItnktx2JIoWcPn+SANGY7mK
FSe5x7rCGtLt9PoPO8N2IBfp0Bp03pDYh+SBW7rTdBLS/d6ydhZ/MX/ZBx1J
nQNpuD4P+pE+3gP2s+1tVdSgCvfxByVn0P0kkr1dRj2f0fWHLN98yAu4jZZd
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
JPr/LZU0v5NkAgA=

-->

</rfc>
