<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="February" day="16"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship-between-attestation-evidence-and-attestation-results" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>Many claims in Attestation Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the entity by the Verifier just through normal verification of the Attester's signature.
The UEID, <xref target="UEID" format="default"/>, and Location, <xref target="location" format="default"/>, are examples of claims that may be passed through.</t>
          <t>Some claims in Attestation Evidence will be verified by the Verifier by comparison to Reference Values.
These claims will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence" format="default"/>, compares it to Reference Values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults" format="default"/>.</t>
          <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location" format="default"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the Relying Party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="UEID" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It MUST never change for a given entity.</t>
        <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
            </tr>
          </tbody>
        </table>
        <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the Relying Party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Entity manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa. The essential requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>Hardware OEM Identification (oemid)</name>
        <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
        <section anchor="random-number-based-oemid" numbered="true" toc="default">
          <name>Random Number Based OEMID</name>
          <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
          <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
          <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
          <t>In JSON format tokens this MUST be base64url encoded.</t>
        </section>
        <section anchor="ieee-based-oemid" numbered="true" toc="default">
          <name>IEEE Based OEMID</name>
          <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
          <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
          <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
          <t>This format is always 3 bytes in size in CBOR.</t>
          <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
        </section>
        <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
          <name>IANA Private Enterprise Number Based OEMID</name>
          <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
          <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
          <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
          <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
        <name>Hardware Model Claim (hardware-model)</name>
        <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
        <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
        <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
        <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
        <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
        <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
        <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
      </section>
      <section anchor="software-name-claim" numbered="true" toc="default">
        <name>Software Name Claim</name>
        <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
      </section>
      <section anchor="software-version-claim" numbered="true" toc="default">
        <name>Software Version Claim</name>
        <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
        <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
        <dl>
          <dt>
1 - Unrestricted:  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2 - Restricted:  </dt>
          <dd>
            <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
          </dd>
          <dt>
3 - Secure-Restricted:  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
          </dd>
          <dt>
4 - Hardware:  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision SHOULD NOT be used.
They usually do not provide enough precision for a geographic location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
        <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic:  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration:  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning:  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance  </dt>
          <dd>
            <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession:  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
        <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
      </section>
      <section anchor="dloas" numbered="true" toc="default">
        <name>The DLOA (Digital Letter or Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
        <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
        <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
        <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
        <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
        <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
      </section>
      <section anchor="swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
      </section>
      <section anchor="swresults" numbered="true" toc="default">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
        <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported. TODO: defined objective</t>
        <section anchor="scheme" numbered="true" toc="default">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective" numbered="true" toc="default">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>
1 -- all:  </dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>
2 -- firmware:  </dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>
3 -- kernel:  </dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>
4 -- privileged:  </dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>
5 -- system-libs:  </dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>
6 -- partial:  </dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results" numbered="true" toc="default">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
          <dl>
            <dt>
1 -- verification-not-run:  </dt>
            <dd>
              <t>Indicates that no attempt was made to run the verification</t>
            </dd>
            <dt>
2 -- verification-indeterminite:  </dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>
3 -- verification-failed:  </dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
            </dd>
            <dt>
4 -- fully-verified:  </dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
            </dd>
            <dt>
5 -- partially-verified:  </dt>
            <dd>
              <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name" numbered="true" toc="default">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
        </section>
      </section>
      <section anchor="submods" numbered="true" toc="default">
        <name>Submodules (submods)</name>
        <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
        <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
        <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
        <section anchor="submodule-types" numbered="true" toc="default">
          <name>Submodule Types</name>
          <t>The following sections define the three types of submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
            <li>The digest of a detached Claims-Set</li>
          </ul>
          <section anchor="submodule-claims-set" numbered="true" toc="default">
            <name>Submodule Claims-Set</name>
            <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
            <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
            <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
          </section>
          <section anchor="nested-token" numbered="true" toc="default">
            <name>Nested Token</name>
            <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
            <t>The following two sections describe how to encode and decode a nested token.</t>
            <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR-Encoded</name>
              <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
              <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
              <t>If the nested token is JSON-encoded, then the data item MUST be a text string.
The text string MUST contain a JSON-encoded array of two items.
The first item is a string identifying the type of the token.
The second item is the JSON-encoded token.</t>
              <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
              <dl>
                <dt>
"JWT":  </dt>
                <dd>
                  <t>The second item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                </dd>
                <dt>
"UJCS":  </dt>
                <dd>
                  <t>The second item MUST be a UJCS-Message as defined in this document.</t>
                </dd>
                <dt>
"DEB":  </dt>
                <dd>
                  <t>The second item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                </dd>
              </dl>
              <t>The definition of additional types requires a standards action.</t>
              <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
              <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
            </section>
            <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is JSON-Encoded</name>
              <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
              <t>The nested token MUST be an array of two in the same format as described in the section above.</t>
              <t>A CBOR-encoded token nested inside a JSON-encoded MUST use the same array of two, but with the type as follows:</t>
              <dl>
                <dt>
"CBOR":  </dt>
                <dd>
                  <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                </dd>
              </dl>
              <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
              <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
            </section>
          </section>
          <section anchor="detached-submodule-digest" numbered="true" toc="default">
            <name>Detached Submodule Digest</name>
            <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
            <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
            <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
            <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
            <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
            <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
            <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
            <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
            <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="cddl-for-submods" numbered="true" toc="default">
          <name>CDDL for submods</name>
          <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 256
sueids-label = 257
oemid-label = 258
hardware-model-label = 259
hardware-version-label = 260
secure-boot-label = 262
debug-status-label = 263
location-label = 264
profile-label = 265
submods-label = 266


security-level-label = <TBD>
uptime-label = <TBD>
boot-seed-label = <TB>
intended-use-label = <TBD>
dloas-label = <TBD>
sw-name-label = <TBD>
sw-version-label = <TBD>
manifests-label = <TBD>
swevidence-label = <TBD>
swresults-label = <TBD>


]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

nonce-label /= "nonce"

ueid-label /= "ueid"
sueids-label /= "sueids"
oemid-label /= "oemid"
hardware-model-label /= "hwmodel"
hardware-version-label /= "hwversion"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
profile-label /= "eat-profile"
uptime-label /= "uptime"
boot-seed-label /= "bootseed"
intended-use-label /= "intuse"
dloas-label /= "dloas"
sw-name-label /= "swname"
sw-version-label /= "swversion"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
swresults-label /= "swresults"
submods-label /= "submods"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-20.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="26" month="January" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-20"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAGdrDWIAA+y9aXPbWJYg+h2/AqGseGlVkZS1eO3J7lFKyixlextLLne/
ehUZIAlSKJMAGwAlqz1Zv/2d/Z4LgLKraybixYup7kiLwMVdzz37Mh6Pk6bN
yvmv2aoq85dpW2/zpNjU9FfTHj1+/OLxUTLL2pdp086TZF7NymwNDed1tmjH
Rd4uxnXWNuM8a8errM2bNknuli/T96fXV+nHqv5UlMv057rabpLv0llVNnnZ
bJuX6ff3efM9PGq203XRNEVVtvcb6Pfy4vqnZFO8TNK0rWbajn7M8017A09O
8HdT1W2dL5rQorlfxw9m1XqTzVrXYjsNz8oKH9WLWT5v2vtVrs3aosUf1zd5
elHCj/v0tMVlZS3MMb2uPuVl+uji9Ho/yabTOr99mcKPJKvzDCZftnld5m3y
6Q72q1iWuPjMfT6bVjUseg4b9TI9enx4PD58nGTb9qaqXybjtChh+q8m6att
OZ+usnkOM+TtfpVt67yc5dGrqoaNvspn2xqnCTOu6vv01aszeJWvs2L1Ml0t
V/+9kQYtvZ/ADuhIP0/S13D299naxvm5qIv5TVa7FzTK/9hmK/hynV7ns5uy
WlXLIm9gvbMJ7iucRA57+uTZsyfp66rOb6ptk6fndXGL05zB4DDPrEzPi3xZ
4a7nS9iNl+lZtioWVV0WGR3XtmxraPnh6hR+bm4IIPf+cJg+f/I8ffrkMH0G
4LgXFrfmKf73/2iLyX/I/Pzyfpmkb78/r8pqebMNO/lLXufr+/jNty/x6NmL
9KesLuEcq+3yJn1fZXNbontB65njhn44PEmfvbqKFlgWbT5P/xWgY16tw1r/
cHKSHh49OUqPnx4fPn8RVvrXak6T7S81Kat6DbB1m+ONef/T2dHh4Qv589nh
E/vzyeGT8OdT+fP5ixPX4Fn4054+f/xY2x4e2WeHz070z+MXR/rn00Nr++xE
Ozt+8Tx89kTbvgCsgn/i/+Cfjz9fPT/h321WL3Gf927adtO8PDjIs7q9GRfl
opqUy2yyLlYHm5vNwby6K1ew9xP48S+LYpX/MKuqej6+WzbPT/a4K77IH9++
f3We/nzx9vzi+vIsvfr3q+uL1+nhi+cno/TNz6eTq+s355PHj4+f/no4eTx5
/CtNhjrQe4l/jxlG3tA1zlbpz3nVbOBHthrjpV+tiiVdz1P85z59BD3v04d2
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
3ul2uqPZfUXQ36A76o8Wo2GvMxwMhgP672A57Hfom36/l/a7JxRBjw06vUkv
6XUn3eVoVi7ylCK41u6kR82uK+aUjrjGczG9zijpdrv0/5PuZJSOTumI1Ddc
jgejIf6LERgNx5PR8NHRt7+LfjpTvHDBkNQlfl7WDf70ZxGVgqDVjqHTNaCI
vfKLjMTxCZWBzTK5caqEIxFhc4XCtmYsKHZqb1SIWJXgD2Uovf3WCmFl0u1P
J73etN8dOZ3yTvZMbSz9Hy9OUiuNftIbNGzJgwzEqncKqNtz3Ap+cTAwqXuG
1E3jfH4j/Xh11ag8HRba7aPadrft69VDR6jzIDYnqA38ebB7K6nYOvfXr2+n
vLnL1qn/VH6T2tzVAeKpRn7/KW37qflv1INeOCUP68Z9D31nU2nrotKA0dNC
N9vtNotz5bnuOHzQP5zXDUlv8BRgsTfp9/s0/b7fTj+njV+kPz9h4cuSh6Xh
U7FgbH+VJTs5p0l8W3HnN+Md5mNunoeAOR403goa5M6jvJiTGQiZ+fByvdrS
ictVk3H0wlrv0tqV1uLtf/zvCbdcr3/LDNp5ns1XiYvAtNb5T3j72et3cmOo
MfTuMvnVlV3efzJwOXctw5sp3t6GnjiOrKj28HjLf36/ZZw51mKRCoBRGWtR
HCrW+ba9/TrdXTM1szh14Oc2ONjL7K0UXN+XX6bliqdkdbtDOWNAJkIFLsas
75q8Xd9BPf64Sc4sfzjox89v+TfG/+4FXDsSrBJSUZtHshr2t1s+/crbe8Bl
7gvYcUVOa92C35y/vYr55AwfLs7v3G8NdpQbAndwTIT3ubpa20HLo4da6BNv
o3MgQfhGbzjCK53udLIcdpLBcjmad4aTUXduJYz6kzRxBXzzXgEOrJTecIIC
JlRpr/8IVvnlBfaEd5cG72bP+xIEKMDK6A2nKGE4mC7m6Xw+mU0n4/m4P54N
BumgsxzPR/3hPJ0ct450YOJvkpyxkVlmGFlALJsnQeP/WDAreiMasD83uu0+
rIC4+x3aLw7OZLffwB8ALm57R4vRDCY/jr2x2w8Dq+OqUtsYpgTZHMP2UGr7
mYcgPlu5aOCWHodi11DPfAjO5zO8SLPdHfZGw0GPZuzkk1tA40o99Ic3yd7l
F0r76rkXXuw019l6oUF34p0LNpnVbn5Y7XUVejOgwV804qdxZR8uCqFK4HSW
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
tsh3tFheHzGrn8SfW/Ms23EDWlz5aJiSWkq6veF4PO/NknTSI+UyXqb9/mRM
h+lTDF24VpL+eJh2Z7PhbLhIyVBepIP+dN6ZDIfd+g7cBi3poyXddNhLF6RQ
Ol0SguV4OU0HncViOV32B91Zf3FKS+bTWUI7SLIcp515Mqb/S6dpOl90OpPB
ojudl3SOXXWF94/6RycilpC7am3A1GmoIOkBiIHqQ7sunIa6ve+e3c+9Wb8J
djHvh01l/yu+dsc26B78R7c1/FW3tnG/Pz7xjDQa9sf9wWg2nvQnur1NTnx1
QNsV7TlTOs47p9KJrw57/V4vHQx4L+zLXnjiq92vecu88FvmqMZ1VvtXt22e
+qrbXU/aOvF35/Z52qH7+PaJ3efkMsLt8zmbjVg48uODytDt802v/bz3oO03
KKN++3xAGUd3z3vLuPOofzSE7yeL2dU//DvwCDhMTI8DCvjD7K0L5qvkD4if
T3I5GQFnpl5lOibhRQ3LYwJGuzRRudHLgxuHwhkAj8o9mj4oZ/46t7ceiKQR
fDLjeydOTlltgrwUrqx0rQSfOd9irHJtctBiA1V0h//w1B1bkHL5Bs6e3qVG
2mdnaYOcQg2kyh9beKCGAlrPgwaYjxVHNcdPYRfuVNGZtIsP166asqe/WK28
wRecGCfFLs01eMy3jpP4DxpdXUA41QF3FYaHtP9ZuRr17l4OKhsmCx9U9oye
Eq7Y8N7wH/M0x86GKJoQp3hVG2pABBE3lQGVoszIq93qa0a0ZlSPjGx84uhq
RQ4bOOzpeHCqrRDeDtcph9P0MJ0/rBVBZgz8Uvr7iaXgRiV1GoyXNYK4+ZvT
SwnX6sne7JLJROeekabD9Ied+am2CFnLo0Vw1dXrLcg2oeMD/Xd5qi0U5M/I
3Zt6Bnoo+FT7hOsfkKCO+/wvMm3gl4CFdLJVNu7JHV6nj9u4ST/p4z5u3JX7
uJMNyiE1fQi7cDke0H+XY5cY0z3V3Oomnc5gMOsPpp3xpNfp4ra4Q2XN+r3x
/BQHB3enPxt0p73Zojfvp/PeYJL0pr1ed5gms8HwFHcPd6fbnS3HCZnHaW84
71JrBuPptDOUsTl5dshKpbmgsRjSv/r4dy8dk40/6j9oTDrz/mTW9WMy7w56
s2kyS06+iSEjfzCbTeZjmqXuKBn059PpkFQlnXWTk46b9Dejs+J0OKZj8nA0
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
AA==

-->

</rfc>
