<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.0.4) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.6 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="16"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>3 - Secure-Restricted:</dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>4 - Hardware:</dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140"/> 
or those based on Common Criteria <xref target="Common.Criteria"/>.
See <xref target="dloas"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>

]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="swresults">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>1 -- all:</dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>2 -- firmware:</dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>3 -- kernel:</dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>4 -- privileged:</dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>5 -- system-libs:</dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>6 -- partial:</dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>1 -- verification-not-run:</dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>2 -- verification-indeterminite:</dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>3 -- verification-failed:</dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>4 -- fully-verified:</dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>5 -- partially-verified:</dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      secure-restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restriced",         2>
secure-restricted  = JC< "secure-restricted", 3>
hardware           = JC< "hardware",          4>


$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "nonce",      10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwvers",     260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "profile",    265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
swresults-label        = JC< "swresults" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "nonce" :    "lI-IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "nonce":    "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "secure-restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"

; The nonce was added to JWT in the IANA registry after the publication of
; RFC 7519
; TODO: what about multiple nonces in JSON?
; TODO: add reference to IANA and OpenID (or such document that defines nonce)
$$Claims-Set-Claims //=
    (nonce-label => nonce-type / [ 2* nonce-type ])
nonce-type = text


; TODO: nonce-label for JSON should probably be here
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
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
K9lBHoXIrGIZ4Hgwio9uK5tWkZ4+hf1JTe4Gbqb3FpeNTcrYhbMsY6Ch0dox
VOlBckXGhP1bJZcN8TPALmI8kMikWxrZ/Ch8z0ltpEBHM1IK5nmjjCPr76RD
db+WI2WycxyxNUc152aJ8LmQa6QQkhNijp6fn9Rgy86Tq0TUI26+ohwxI5Ej
E/U98dzQMB/jjmZUwJeiBZkg+7Fce6SzYV6EMR3OxI8uUIO1FnJOc8AvBM8K
LOo2j289qzM3rD2lxuBATsunk2UHN8NsrNmiKPNkXqSWdhTh9cJN0/G1MCBp
hFfJ9CL20DK5WRjfHa3v5iA64bxpDFjXCHeL9RMS1+S9PDl6/vTpybPjk2Ne
jan0a+YmRFA2rm7kIUFec1IzXjicJNzKFJATcaV4rEVBzRJmIdWeUm6NMY+N
WcDzqgHCcjcil0qdXIaIxwQRozkWn7+4ZAuP65ZI/I9OnEHExJme2NntPX5z
sp9LjAWzuYDrhfcKXp7v58NZs7qrM8kVUcW0JEipeaaeCny0X3z9nqq2SEuc
kr2iEApcLxQ3JluPHlQFpFAaZU/TBTmA4SgAHMuL2lyc+sLGckLKdSngh8kb
kDWzb+lg3WZOMCJfJBgHSyZarZhtyzm7ZNal6Gq2UvHVIJgFrhRRLctwhL0x
XV1OhlQkjjwR6tecSwCcYK6mvJ+7RuYWVUzTkAxJVCqB5kYKzbPGbrKRhSUT
rAhi306uSLy+dPZEvHj9Uf5YxURkFAV7ICuma/bTQ+iu8QeU5EjaIb80jZmb
RtZf6mDWNXkUPssUmomieiSoEgdg8slQ9rJ1Lp1TKtac/NnHqEpgZ/y92jS9
wRK9cXRlv6rtO5iV8b2LCTSgXeJPPdFrlddVdWg6OzNdyk5061XMQ0/RoK1I
CaUygEzY8XYhQvS4wLai8AZQCKruy9gEQLIZN/1XT873655NswJbuLmyp2UY
yJjj8hU0EkypArNYTUgRTmYdBldnMVL1umopNpOdLYtJbJgXOTeVxY1FFRly
SYbdaZxG1Qlq6CxXMTOZtUjN9AwXDt1gBrV6dWsmvmZaehAi6RrCDKf6y4YN
krJ9a02twn2xtNloNPxxNHmPErfBXx//oslvQLx+ispikwwnYp6PNX+k647c
1N6ODmBMCT+cqrGRqRtbx6STiPdmmzWjF6dgLBtseAzS9twQPjbpYUyfia2B
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

-->

</rfc>
