<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="March" day="22"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship-between-attestation-evidence-and-attestation-results" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>Many claims in Attestation Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the entity by the Verifier just through normal verification of the Attester's signature.
The UEID, <xref target="UEID" format="default"/>, and Location, <xref target="location" format="default"/>, are examples of claims that may be passed through.</t>
          <t>Some claims in Attestation Evidence will be verified by the Verifier by comparison to Reference Values.
These claims will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence" format="default"/>, compares it to Reference Values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults" format="default"/>.</t>
          <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location" format="default"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the Relying Party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="UEID" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It MUST never change for a given entity.</t>
        <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
            </tr>
          </tbody>
        </table>
        <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the Relying Party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Entity manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa. The essential requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>Hardware OEM Identification (oemid)</name>
        <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
        <section anchor="random-number-based-oemid" numbered="true" toc="default">
          <name>Random Number Based OEMID</name>
          <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
          <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
          <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
          <t>In JSON format tokens this MUST be base64url encoded.</t>
        </section>
        <section anchor="ieee-based-oemid" numbered="true" toc="default">
          <name>IEEE Based OEMID</name>
          <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
          <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
          <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
          <t>This format is always 3 bytes in size in CBOR.</t>
          <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
        </section>
        <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
          <name>IANA Private Enterprise Number Based OEMID</name>
          <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
          <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
          <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
          <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
        <name>Hardware Model Claim (hardware-model)</name>
        <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
        <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
        <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
        <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
        <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
        <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
        <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
      </section>
      <section anchor="software-name-claim" numbered="true" toc="default">
        <name>Software Name Claim</name>
        <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
      </section>
      <section anchor="software-version-claim" numbered="true" toc="default">
        <name>Software Version Claim</name>
        <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
        <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
        <dl>
          <dt>
1 - Unrestricted:  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2 - Restricted:  </dt>
          <dd>
            <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
          </dd>
          <dt>
3 - Secure-Restricted:  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
          </dd>
          <dt>
4 - Hardware:  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
      </section>
      <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
        <name>The Boot Odometer Claim (odometer)</name>
        <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (odometer-label => uint)
]]></sourcecode>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
        <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic:  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration:  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning:  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance  </dt>
          <dd>
            <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession:  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
        <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
      </section>
      <section anchor="dloas" numbered="true" toc="default">
        <name>The DLOA (Digital Letter or Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
        <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
        <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
        <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
        <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
        <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
      </section>
      <section anchor="swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
      </section>
      <section anchor="swresults" numbered="true" toc="default">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
        <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported. TODO: defined objective</t>
        <section anchor="scheme" numbered="true" toc="default">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective" numbered="true" toc="default">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>
1 -- all:  </dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>
2 -- firmware:  </dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>
3 -- kernel:  </dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>
4 -- privileged:  </dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>
5 -- system-libs:  </dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>
6 -- partial:  </dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results" numbered="true" toc="default">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
          <dl>
            <dt>
1 -- verification-not-run:  </dt>
            <dd>
              <t>Indicates that no attempt was made to run the verification</t>
            </dd>
            <dt>
2 -- verification-indeterminite:  </dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>
3 -- verification-failed:  </dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
            </dd>
            <dt>
4 -- fully-verified:  </dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
            </dd>
            <dt>
5 -- partially-verified:  </dt>
            <dd>
              <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name" numbered="true" toc="default">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
        </section>
      </section>
      <section anchor="submods" numbered="true" toc="default">
        <name>Submodules (submods)</name>
        <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
        <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
        <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
        <section anchor="submodule-types" numbered="true" toc="default">
          <name>Submodule Types</name>
          <t>The following sections define the three types of submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
            <li>The digest of a detached Claims-Set</li>
          </ul>
          <section anchor="submodule-claims-set" numbered="true" toc="default">
            <name>Submodule Claims-Set</name>
            <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
            <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
            <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
          </section>
          <section anchor="nested-token" numbered="true" toc="default">
            <name>Nested Token</name>
            <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
            <t>The following two sections describe how to encode and decode a nested token.</t>
            <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR-Encoded</name>
              <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
              <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
              <t>If the nested token is JSON-encoded, then the data item MUST be a text string.
The text string MUST contain a JSON-encoded array of two items.
The first item is a string identifying the type of the token.
The second item is the JSON-encoded token.</t>
              <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
              <dl>
                <dt>
"JWT":  </dt>
                <dd>
                  <t>The second item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                </dd>
                <dt>
"UJCS":  </dt>
                <dd>
                  <t>The second item MUST be a UJCS-Message as defined in this document.</t>
                </dd>
                <dt>
"DEB":  </dt>
                <dd>
                  <t>The second item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                </dd>
              </dl>
              <t>The definition of additional types requires a standards action.</t>
              <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
              <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
            </section>
            <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is JSON-Encoded</name>
              <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
              <t>The nested token MUST be an array of two in the same format as described in the section above.</t>
              <t>A CBOR-encoded token nested inside a JSON-encoded MUST use the same array of two, but with the type as follows:</t>
              <dl>
                <dt>
"CBOR":  </dt>
                <dd>
                  <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                </dd>
              </dl>
              <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
              <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
            </section>
          </section>
          <section anchor="detached-submodule-digest" numbered="true" toc="default">
            <name>Detached Submodule Digest</name>
            <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
            <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
            <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
            <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
            <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
            <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
            <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
            <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
            <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="cddl-for-submods" numbered="true" toc="default">
          <name>CDDL for submods</name>
          <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (odometer-label => uint)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 256
sueids-label = 257
oemid-label = 258
hardware-model-label = 259
hardware-version-label = 260
secure-boot-label = 262
debug-status-label = 263
location-label = 264
profile-label = 265
submods-label = 266


security-level-label = <TBD>
uptime-label = <TBD>
boot-seed-label = <TB>
odometer-label = <TBD>
intended-use-label = <TBD>
dloas-label = <TBD>
sw-name-label = <TBD>
sw-version-label = <TBD>
manifests-label = <TBD>
swevidence-label = <TBD>
swresults-label = <TBD>


]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

nonce-label /= "nonce"

ueid-label /= "ueid"
sueids-label /= "sueids"
oemid-label /= "oemid"
hardware-model-label /= "hwmodel"
hardware-version-label /= "hwversion"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
profile-label /= "eat-profile"
uptime-label /= "uptime"
boot-seed-label /= "bootseed"
odometer-label /= "odometer"
intended-use-label /= "intuse"
dloas-label /= "dloas"
sw-name-label /= "swname"
sw-version-label /= "swversion"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
swresults-label /= "swresults"
submods-label /= "submods"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAFLLOWIAA+y9aXPbWJYo+B2/AqGsmLSqSMpavHZn91NKyixl25afJZe7
p6IiAyJBCmUSYAOgZLVf1m+fs99zAVBWdb0XMTEx1R1pEbi467lnX8bjcdK0
WTn7NVtWZf46betNnhTrmv5q2oOnT189PUimWfs6bdpZksyqaZmtoOGszubt
uMjb+bjO2macZ+14mbV50ybJ3eJ1+uH46jL9VNWfi3KR/lxXm3XyXTqtyiYv
m03zOv3+Pm++h0fN5npVNE1Rle39Gvo9P7v6KVkXr5M0bauptqMfs3zd3sCT
I/zdVHVb5/MmtGjuV/GDabVaZ9PWtdhch2dlhY/q+TSfNe39MtdmbdHij6ub
PD0r4cd9etzisrIW5pheVZ/zMn1ydny1m2TX13V++zqFH0lW5xlMvmzzuszb
5PMd7FexKHHxmft8el3VsOgZbNTr9ODp/uF4/2mSbdqbqn6djNOihOm/maRv
NuXsepnNcpghb/ebbFPn5TSPXlU1bPRlPt3UOE2YcVXfp2/enMCrfJUVy9fp
crH8H400aOn9BHZAR/p5kr6Fs7/PVjbOz0VdzG6y2r2gUf7nJlvCl6v0Kp/e
lNWyWhR5A+udTnBf4SRy2NNnL148S99WdX5TbZo8Pa2LW5zmFAaHeWZlelrk
iwp3PV/AbrxOT7JlMa/qssjouDZlW0PLj5fH8HN9QwC584f99OWzl+nzZ/vp
CwDHnbC4FU/xf/xnW0z+U+bnl/fLJL34/rQqq8XNJuzkL3mdr+7jN49f4sGL
V+lPWV3COVabxU36ocpmtkT3gtYzww39uH+UvnhzGS2wLNp8lv4bQMesWoW1
/uHoKN0/eHaQHj4/3H/5Kqz0r9WMJttfalJW9Qpg6zbHG/Php5OD/f1X8ueL
/Wf257P9Z+HP5/Lny1dHrsGL8Kc9ffn0qbbdP7DP9l8c6Z+Hrw70z+f71vbF
kXZ2+Opl+OyZtn0FWAX/xP/BP59+vnx5xL/brF7gPu/ctO26eb23l2d1ezMu
ynk1KRfZZFUs99Y3671ZdVcuYe8n8ONf58Uy/2FaVfVsfLdoXh7tcFd8kT9d
fHhzmv58dnF6dnV+kl7+x+XV2dt0/9XLo1H67ufjyeXVu9PJ06eHz3/dnzyd
PP2VJkMd6L3Ev8cMI+/oGmfL9Oe8atbwI1uO8dIvl8WCrucx/nOfPoGed+lD
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
UxqCJqWMilkQuplKRRFOClsXLED7qLGVqqEBiRHkbHx6l1mZ3Bn7F5CPhyQX
hXYk2Wir7BbQNWWdENmpLVYWAR309tRHE4YlxYsb25dhptC1bgdq9UHD5CKP
10mRVs71xyLD7dbqxDGFWxQ1QeY2zBkPaJq06iFciTyrTGf9i8yVJ4ehgsAT
hPpM6oaqGVZyH/ek5ySJuK/vvQTpnAQnWwvf0gnEk9FEr1L11tLWapiEaJV9
Nka3dIUmqUwkA21b7iOvS5Qmq3dlqIQbHxylzZJJ9dMieQX6F1Kl+lts+2pF
Eaji4y65hhAD4Geh6ooiirYdCGcaiak8wzAXyTZu0ErnSWK4nLNzgWEPNSAf
HQ+1VyxUWa4tcRVMvnMY7RQhznLkF434SEj8Ct0mCjBxOTd5uOf7T6H74/U6
B+ryJT2FTVAnu/fAAcGA6rrCwYh+ILyg46J0ibunGsEPR7OupjeSJgcbcuQW
emVQTsJkvqwo/c54XWEXwCRzTWJV4n0sSejnzApiXpUUfaP044fzxjJCkHfL
h3Miob31vTp6hTbHK00hwQb7kE9TsGtIJws9+cgRbjWu6vGmLjQcwy39h/S7
55P9J/Dnbkhnycj6vGNYBRqDYR5ibwUyQ60C36JghSUnBg/nbJKiY4iwscS2
JMFExpjcMrQ4IKVxonSQv+fYkPHYwLoX9AVtcJG+jeVObNJ3cH/rYnqKep/I
ZUolkwOEOwfBE+gv3svhjlllf1HjgT664053dIjc5vDVy+fcpipm2MYNZVmA
gyGbCIcPjZ1VmFp3PAM0hbZdALcoSIUuFgLTzv7kYHLw7Olkf0d9vd4QvU0S
tEgx7R25HG6CWSjIhsgoeYZR6oSRKJxxizPKo4iRi7fiW08MF7HnlBILFaAh
BYCQKssBoDDea8GI9MqQd+lQqUZtzzlvA2cqD3omnxcoLvDhYjLVSU/GlzmJ
ilgZIazjJzbxRYGut5aJSJYm+SPUV1GOSx42olbkCmhYvbkQ4zhp3zFw08S9
kP9B3Bp5i7o3FBA17RxXLwnppURFEdtRgxNQJeEVlpa0QRfhmgskZ5wP0DTC
qCUoKECbeDnWQlvqfJe1bNAvo+ddwhtXwvyWWfk5b2PHGpg3e43weiNDCet0
YTyaJpvVhVmSDXCCJ9d6BsAAHo3D0V1Hxi1aHY5QJJrlTKoiWAhX3dFUc3W1
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
xv8q+hrrlwo65VLwRL1ZernJGxjMjm1ebD/QAvmL25SudM2z/f2y+MjbkYTO
2pHoVM1KNIerOA+qODXGAj5afMzbbiqN0MTDMhoZnNhx+jNMVCEyK5nJrOR1
84paIF5GAdFkq3S/WbHZslbBlxgt0Sx35rNma0zdvJlZP2yNcA8h8TDGNC2e
tyOeCSxuZmOEr+WGTNxFbNBkztvm3GKuVA3N9CLlxE+KpfLZiefol/nsxSlo
YruyE5KTt70JBlPwxEbTFZjpVcQ6zORm1xdpRxhxp1zOaSwZqubfFbdqv7jy
IIlqNnHI1pIp7gqG7sYrevEFp5LZM7gdwqtfvxcGBfz76j3rGEdBisME7DS+
vntz8eqeXy1mOIpPYt35+dZ8/o5esGIXhaFVFdsRChOplOlTnYQ1J9xxMiL6
x5r0Ic1pR360XVaiU1e6sXvLiUcT4oRNnEtDPW+/ep5OO9NOoDrFuY9bGDEi
N3IksD6KmP6Qh4ysfLvPdyf8Sqid++kT8cSEdPDgWT4J9IlaxzeqnVkF4Ssm
n5IascDmKsfqFW/J/UNLYuTE+88LcbYtsgUiJ6MwKoukoIVnPLXSBLg/pWCc
dLxBzKOlW6kkGawz7editYBry9IIvIgmwUF0m9vmw3ICn3vOlyx0ypLwDa/a
7J3G7WrlLBIArUadUvJJVeQbU3PU0s2HPZ16Qovflb0Jj2pacqVcvhcqNJzt
w35VXvMZtRSls8hFiQVTWIEx5TmsDqpJK5+WC6TL7uwe236yA0Z8QGfhZTvr
LoivSf4fb8OV/n5HAgA=

-->

</rfc>
