{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2022-04-06T21:40:39.058541+00:00",
  "repo": "ietf-rats-wg/eat",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "ready to close",
      "description": "",
      "color": "bfdadc"
    },
    {
      "name": "new claim",
      "description": "",
      "color": "006b75"
    },
    {
      "name": "Last Call blocking",
      "description": "",
      "color": "006b75"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "MDU6SXNzdWUzMzYzMzExNDY=",
      "title": "Manufacturer performing validation -- \"should\" or \"must\"",
      "url": "https://github.com/ietf-rats-wg/eat/issues/2",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready to close"
      ],
      "body": "Some comments so far in my reading (which is not yet complete):\r\n\r\n The Manufacturer.  The company that made the entity.  This may be a\r\n      chip vendor, a circuit board module vendor or a vendor of finished\r\n      consumer products.\r\n\r\nGiven that it may be three (or more) entities, and they each have different\r\nagendas, I think that it might be worth being specific about each level.\r\n\r\n  In this case the manufacturer should\r\n  perform the verification, because any release of the key material\r\n  would enable a participant other than the entity to create valid\r\n  signed EATs.\r\n\r\ns/manufacturer should/manufacturer MUST/",
      "createdAt": "2018-06-27T18:00:09Z",
      "updatedAt": "2021-08-31T17:26:39Z",
      "closedAt": "2021-08-31T17:26:39Z",
      "comments": [
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "We determined that definition of the trusted endpoint would be out of scope for RATS, at least initially. Normative requirements on how to manufacture a RATS device seems to fit the definition of what is out of scope.",
          "createdAt": "2019-07-22T18:05:57Z",
          "updatedAt": "2019-07-22T18:05:57Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "We can close this because the section this pertains to will be removed and go into the architecture document. Also as Ned says, normative requirements on how to manufacture are out of scope.",
          "createdAt": "2019-10-04T16:10:22Z",
          "updatedAt": "2019-10-04T16:10:22Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #129 ",
          "createdAt": "2021-08-31T17:26:39Z",
          "updatedAt": "2021-08-31T17:26:39Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "MDU6SXNzdWUzMzYzMzE3MzQ=",
      "title": "Add claims for public keys and similar",
      "url": "https://github.com/ietf-rats-wg/eat/issues/3",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "new claim"
      ],
      "body": "(From David Wheeler)\r\n\r\nWhat seems to be missing from the proposed structure is the ability to attach new key material into the EAT structure, with an attestation claim. The attestation claim can be that it was generated on the device, or generated inside the TEE and bound/sealed to the TEE. And perhaps even a purpose for the key material. A new attestation key, for example; or a special signing/authorization key for a particular application.\r\n \r\nMany times, IMHO, it is useful to generate a new key that is attested in some way, and then future operations use that key. In fact, OTrP/TEEP has this implication, with the AIK keys for new installed Apps, but (IMO) it is not really that clearly spelled out, although I think the intention is clear.\r\n \r\nOther attestation claims are also useful \u2013 the identity and cryptographic hash of the code of a particular TEE application; a DH public key to establish an encrypted channel; the set of root CA\u2019s this TEE will trust; \u2026",
      "createdAt": "2018-06-27T18:02:04Z",
      "updatedAt": "2020-11-25T18:25:27Z",
      "closedAt": "2020-11-25T18:25:27Z",
      "comments": [
        {
          "author": "mathias-arm",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It seems to me this effort is relevant to the issue: https://datatracker.ietf.org/doc/draft-ietf-ace-cwt-proof-of-possession/",
          "createdAt": "2019-04-25T18:09:11Z",
          "updatedAt": "2019-04-25T18:09:11Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "Attestation is different than proof of possession it is more like proof of protection or proof of integrity. In the TPM there is an added semantic that the key can only sign (attest to) data objects that are under the control of the TPM (TEE?). This avoids a possible confused deputy attack. If a key was not generated inside the trusted environment then it is possible the key could have been exposed to an attacker. This would make it less trustworthy as an attestation key because the key potentially could sign evidence that didn't pertain to the attester.",
          "createdAt": "2019-07-22T18:12:37Z",
          "updatedAt": "2019-07-22T18:12:37Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed with PR #71 ",
          "createdAt": "2020-11-25T18:25:27Z",
          "updatedAt": "2020-11-25T18:25:27Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "MDU6SXNzdWUzMzYzMzI1MTc=",
      "title": "Should there be both \"restricted\" and \"secure restricted\" security levels",
      "url": "https://github.com/ietf-rats-wg/eat/issues/4",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See seclevel discussion in mail list archive: https://mailarchive.ietf.org/arch/browse/eat/",
      "createdAt": "2018-06-27T18:04:43Z",
      "updatedAt": "2021-08-02T17:47:51Z",
      "closedAt": "2021-08-02T17:47:51Z",
      "comments": [
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "The link to mailarchive doesn't appear to show messages related to this issue. Difficult to get context. My feedback related to levels is there isn't a clear use case or security model for the levels defined here. For example, the Bell-LaPadula security model defines security levels which are meaningful in that context. However, it isn't possible to map the levels defined in EAT because BL levels also have compartments and require a TCB boundary definition. These elements are not defined by EAT. ",
          "createdAt": "2019-10-17T21:51:36Z",
          "updatedAt": "2019-10-17T21:51:36Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "The right link to the previous discussion that seems worth reading.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/eat/cCalQh6WIePUYgZr_amp6FfOHc4/",
          "createdAt": "2020-11-14T17:56:11Z",
          "updatedAt": "2020-11-14T17:56:11Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "This claim is oriented around resistance to attack. There seems to be some consensus around that the discussion in the mail archive. This claim is also in line with other efforts like that in FIDO.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/eat/cCalQh6WIePUYgZr_amp6FfOHc4/\r\n\r\nBell-LaPadula doesn't seem to be about resistance to attack and doesn't seem useful here.",
          "createdAt": "2020-11-14T17:59:29Z",
          "updatedAt": "2020-11-14T17:59:29Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "The proposal for this open issue is to reduce to three security levels from four.\r\n\r\nAlternatively we could go to five by adding a \"system services\" level that is roughly equivalent to root on Linux.",
          "createdAt": "2020-11-14T18:31:58Z",
          "updatedAt": "2020-11-14T18:31:58Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #116 ",
          "createdAt": "2021-08-02T17:47:51Z",
          "updatedAt": "2021-08-02T17:47:51Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "MDU6SXNzdWU0NTA0MDE0MzU=",
      "title": "Add guidance on registration of unused/lightly-used claims",
      "url": "https://github.com/ietf-rats-wg/eat/issues/9",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Section 5 contains guidance on the registration of EAT claims using the CWT registry.  There should be suggested guidance to the expert reviewers to avoid registration of claims intended to be used in EAT that will not achieve widespread adoption.\r\n\r\nSee https://mailarchive.ietf.org/arch/msg/rats/jBCYPK2hly554HGYTXZXa2t_AGw. ",
      "createdAt": "2019-05-30T16:45:01Z",
      "updatedAt": "2019-07-24T20:48:19Z",
      "closedAt": "2019-07-24T20:48:18Z",
      "comments": [
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "There needs to be guidance on what \"lightly\", \"wide-spread\" and \"will be\" are intended to portray. ",
          "createdAt": "2019-07-22T18:14:16Z",
          "updatedAt": "2019-07-22T18:14:16Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "As per consensus at IETF 105, it was decided that there does not need to be additional guidance on the use of the CWT/JWT registries.  Therefore this issue is closed.",
          "createdAt": "2019-07-24T20:48:18Z",
          "updatedAt": "2019-07-24T20:48:18Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "MDU6SXNzdWU0NTA0MDQxNjM=",
      "title": "Add guidance on registration of claims corresponding to YANG objects",
      "url": "https://github.com/ietf-rats-wg/eat/issues/10",
      "state": "OPEN",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "wontfix"
      ],
      "body": "See https://mailarchive.ietf.org/arch/msg/rats/jBCYPK2hly554HGYTXZXa2t_AGw.\r\n\r\nFuture claims could be added that correspond directly to YANG objects (https://tools.ietf.org/html/rfc6020).  There should be guidance in the document as to how such objects can be reflected in the CWT claims registry.\r\n\r\nFor CBOR claims, this could be as simple as providing a reference to https://datatracker.ietf.org/doc/draft-ietf-core-yang-cbor/.  It should be confirmed whether https://tools.ietf.org/html/rfc7951 is sufficient to address future JWT claims.",
      "createdAt": "2019-05-30T16:51:28Z",
      "updatedAt": "2021-08-23T14:53:14Z",
      "closedAt": null,
      "comments": [
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "Possibly it doesn't make sense to provide guidance unless it is thought to be needed by draft-birkholz-rats-basic-yang-module-01  and/or draft-fedorkow-rats-network-device-attestation-00 or if there is a use case that provides context for understanding how EAT tokens are used in the context of YANG encodings. Possibly, the information models in both EAT and YANG define claims that are semantically the same/similar. But the WG seems to be in favor of allowing this or at least relying on readers of the drafts to spot semantic differences. Even so, if no use case requires use of EAT (CBOR/JSON) and YANG encodings then possibly there is no compelling need to define this now.",
          "createdAt": "2019-10-17T22:07:28Z",
          "updatedAt": "2019-10-17T22:07:28Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "@nedmsmith \r\n\r\nI assume that there will be YANG claims that correspond to TPM information fields (as there already are in draft-birkholz-rats-basic-yang-module).  Having the guidance on how to add YANG claims to an EAT token (without actually specifying those claims) could allow developers to basically pick and choose which TPM information fields they would like if they wanted to enrich an EAT token, as opposed to sending an entire TPM attestation along with the EAT. ",
          "createdAt": "2019-10-17T22:58:50Z",
          "updatedAt": "2019-10-17T22:58:50Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "\ufeff\r\n\ufeffThe challenge is who signs the EAT token if legacy TPM doesn\u2019t know how to sign an EAT. Does it still make sense to say the same thing in an EAT if it is also said in the TPM Evidence?\r\n\r\nSent from my iPhone\r\n\r\nOn Oct 17, 2019, at 6:58 PM, gmandyam <notifications@github.com> wrote:\r\n\r\n\ufeff\r\n\r\n@nedmsmith<https://github.com/nedmsmith>\r\n\r\nI assume that there will be YANG claims that correspond to TPM information fields (as there already are in draft-birkholz-rats-basic-yang-module). Having the guidance on how to add YANG claims to an EAT token (without actually specifying those claims) could allow developers to basically pick and choose which TPM information fields they would like if they wanted to enrich an EAT token, as opposed to sending an entire TPM attestation along with the EAT.\r\n\r\n\u2014\r\nYou are receiving this because you were mentioned.\r\nReply to this email directly, view it on GitHub<https://github.com/ietf-rats-wg/eat/issues/10?email_source=notifications&email_token=ABPMCSFWLJR7EUR3EW7WQB3QPDU2XA5CNFSM4HRGZT22YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBRZNWQ#issuecomment-543397594>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ABPMCSFUZDO65ZPY66EYB7DQPDU2XANCNFSM4HRGZT2Q>.\r\n",
          "createdAt": "2019-10-18T05:17:50Z",
          "updatedAt": "2019-10-18T05:17:50Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": ">\ufeffThe challenge is who signs the EAT token if legacy TPM doesn\u2019t know how to sign an EAT. Does it still make sense to say the same thing in an EAT if it is also said in the TPM Evidence?\r\n\r\nIf one was to attempt such an operation, then I think it would look a lot like the  signing operation described in the webauthn specification - see https://www.w3.org/TR/webauthn/#tpm-attestation.  In that case, a digest is created of the data to be signed and the digest is presented to the TPM in the TPMS_ATTEST.extraData field.  So any RP that would try to verify the EAT token would have to know what digest to expect.    If there is any information contained in the EAT token that is dynamic in nature (e.g. location in a mobile device), then I don't know how that would work.\r\n\r\nThat is why I think that if an implementation requires information equivalence between the TPM attestation and EAT, it is preferable to add the desired TPM information fields to the EAT (e.g. via a YANG claim) rather than the other way.",
          "createdAt": "2019-10-22T17:39:24Z",
          "updatedAt": "2019-10-22T17:39:24Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "The architectural question relates to what environment is the \u201cAttesting env\u201d and whether or not that environment is able to support an IETF RATS format (CBOR, JSON, YANG). The TPM versions support binary and in TPM2 an optional X.509 (BER) format. If the expectation of RATS is that an EAT token is needed that encapsulates the TPM attested evidence, then one should ask whether the thing creating the EAT is an \u201cAttesting\u201d environment. If it is, but isn\u2019t a TPM then the use cases (or some other specification) should inform as to whether that makes sense. Having a spec that says \u201csomething that might not be an attesting env should create an EAT except for the fact that the spec mandates it\u201d doesn\u2019t seem right.\r\n\r\nIf the idea is to use the TPMS_ATTEST.extraData field to cause the TPM (aka attesting env) to sign the EAT. However the TPM may refuse to sign with an attestation key because these keys refuse to sign data that is opaque (to the attesting env). Even so, it would be\r\n\r\nThe correct use of TPMS_ATTEST.extraData would be as a nonce to show freshness of the attestation event. This could be an EAT.nonce value. I\u2019m having difficulty understanding the use case where the EAT contains an encapsulation of the TPM signed Evidence.\r\n\r\n-Ned\r\n\r\nOn 10/22/19, 10:39 AM, \"gmandyam\" <notifications@github.com<mailto:notifications@github.com>> wrote:\r\n\r\n\r\nThe challenge is who signs the EAT token if legacy TPM doesn\u2019t know how to sign an EAT. Does it still make sense to say the same thing in an EAT if it is also said in the TPM Evidence?\r\n\r\nIf one was to attempt such an operation, then I think it would look a lot like the signing operation described in the webauthn specification - see https://www.w3.org/TR/webauthn/#tpm-attestation. In that case, a digest is created of the data to be signed and the digest is presented to the TPM in the TPMS_ATTEST.extraData field. So any RP that would try to verify the EAT token would have to know what digest to expect. If there is any information contained in the EAT token that is dynamic in nature (e.g. location in a mobile device), then I don't know how that would work.\r\n\r\nThat is why I think that if an implementation requires information equivalence between the TPM attestation and EAT, it is preferable to add the desired TPM information fields to the EAT (e.g. via a YANG claim) rather than the other way.\r\n\r\n\u2014\r\nYou are receiving this because you were mentioned.\r\nReply to this email directly, view it on GitHub<https://github.com/ietf-rats-wg/eat/issues/10?email_source=notifications&email_token=ABPMCSEWNORPHJEZM5GEJN3QP43E3A5CNFSM4HRGZT22YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEB6ST3A#issuecomment-545073644>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ABPMCSBPF636LGY44OBPCEDQP43E3ANCNFSM4HRGZT2Q>.\r\n",
          "createdAt": "2019-10-22T18:01:04Z",
          "updatedAt": "2019-10-22T18:01:04Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "The TPM discussion aside, it seems this is about how to relate definitions of YANG objects to claims in CBOR or JSON and vice versa.\r\n\r\nLooks to me YANG objects are defined in YANG modules and that there are a LOT of them. There's no registry. It looks like a real chore to reconcile all the YANG objects with CWT/JWT claims. Does that sound right?\r\n\r\nA use case here might be one were the Verifier receives some attestation evidence in YANG format and needs to produce attestation results in EAT format. Having the same claims or similar claims in both would make that work much better.\r\n\r\nIs there a YANG module for attestation? We could limit ourselves to that and some reconciliation might be doable.\r\n",
          "createdAt": "2021-08-04T07:37:31Z",
          "updatedAt": "2021-08-04T07:37:31Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "MDU6SXNzdWU0NjM5MzMxNDg=",
      "title": "Should minimum size of UEID be larger than 128 bits?",
      "url": "https://github.com/ietf-rats-wg/eat/issues/12",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready to close"
      ],
      "body": "Ben commented that 128 bits is not enough. Is my analysis correct?\r\n\r\n128 bits (16 bytes) is enough for one trillion humans to each have one trillion devices and the probability of collision less than a trillion (log base 10 of 2^ 128 = 38; log base 10 of a trillion is 12; 3 * 12 < 38) So 128 bits seems like enough, but take it out to 256 bits because SHA-256 is popular and good and there is some extra margin.",
      "createdAt": "2019-07-03T20:12:32Z",
      "updatedAt": "2020-11-03T18:35:33Z",
      "closedAt": "2020-11-03T18:35:33Z",
      "comments": [
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "Simply anticipating a namespace large enough to create a universally unique value doesn't ensure there will not be collisions. Often there is a namespace authority that applies a formula for testing uniqueness / collisions. This implies the namespace authority plays a role. For example, X.509 serial numbers are unique within the context of the issuing CA. The issuing CA is the namespace authority. The EUID definition implies namespace authorities exist for example the first 8 bytes of an IMEI identifies the mobile equipment vendor. Presumably the serial numbers are chosen by the vendor. \r\nIt isn't clear that all EUIDs will have bits reserved for namespace authorities and that there will be some way to register them.",
          "createdAt": "2019-07-22T18:28:00Z",
          "updatedAt": "2019-07-22T18:28:00Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #35 includes a full probabilistic analysis rather than the poor one in my comment above.\r\n\r\n@nedmsmith -- the details in the EAT draft propose several types of UEIDs, some based on existing on device ID schemes guaranteed by a central database and one based purely on cryptographic quality large random numbers.",
          "createdAt": "2019-10-07T04:17:19Z",
          "updatedAt": "2019-10-07T04:18:23Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #35",
          "createdAt": "2020-02-29T16:51:04Z",
          "updatedAt": "2020-02-29T16:51:04Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "MDU6SXNzdWU0Njc4ODYxODM=",
      "title": "Add privacy considerations for location claim",
      "url": "https://github.com/ietf-rats-wg/eat/issues/13",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-07-14T21:23:58Z",
      "updatedAt": "2020-11-30T20:47:37Z",
      "closedAt": "2020-11-30T20:47:37Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with #85",
          "createdAt": "2020-11-30T20:47:36Z",
          "updatedAt": "2020-11-30T20:47:36Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "MDU6SXNzdWU0Njg0MzQwNzQ=",
      "title": "CDDL in section 4.4.1 for location is wrong",
      "url": "https://github.com/ietf-rats-wg/eat/issues/14",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "missing \"=\"\r\n",
      "createdAt": "2019-07-16T03:52:30Z",
      "updatedAt": "2019-07-17T03:58:30Z",
      "closedAt": "2019-07-17T03:58:29Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed and pushed.",
          "createdAt": "2019-07-17T03:58:29Z",
          "updatedAt": "2019-07-17T03:58:29Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "MDU6SXNzdWU0Njg0MzQ5ODY=",
      "title": "should / must consistency",
      "url": "https://github.com/ietf-rats-wg/eat/issues/15",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Last Call blocking"
      ],
      "body": "",
      "createdAt": "2019-07-16T03:57:08Z",
      "updatedAt": "2021-11-10T14:55:47Z",
      "closedAt": "2021-11-10T14:55:47Z",
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "Recommend closing this issue as there has not been any specific proposals related to the existing specification language.  If there are remaining should/must/SHOULD/MUST issues with the specification then it should be addressed based on Last Call feedback.",
          "createdAt": "2021-10-31T20:53:22Z",
          "updatedAt": "2021-10-31T20:53:22Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as per discussion at IETF 112.",
          "createdAt": "2021-11-10T14:55:47Z",
          "updatedAt": "2021-11-10T14:55:47Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "MDU6SXNzdWU0Njg1NjkxMTU=",
      "title": "Definition and usage of the term 'entity'",
      "url": "https://github.com/ietf-rats-wg/eat/issues/16",
      "state": "CLOSED",
      "author": "carl-wallace",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In section 1.2, it seems odd that the definition of the term \"entity\" is limited to things that implement this draft. The last sentence of this section and the definition of \"The Entity\" in section 1.3 bear this out. Generally, 'entity' is used pretty loosely throughout the draft.",
      "createdAt": "2019-07-16T10:15:16Z",
      "updatedAt": "2022-01-05T21:19:41Z",
      "closedAt": "2022-01-05T21:19:41Z",
      "comments": [
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "The architecture and terminology draft should define 'entity' and other terms that are consistently used within related drafts. Given they are progressing at different rates, it may be appropriate for EAT draft to qualify its use of terms at least temporarily. ",
          "createdAt": "2019-07-22T19:12:23Z",
          "updatedAt": "2019-07-22T19:12:23Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "This can be closed because of the expectation that the architecture document will define entity.",
          "createdAt": "2019-10-04T16:12:39Z",
          "updatedAt": "2019-10-04T16:12:39Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "Agree.\r\n\r\nArchitecture defines Entity as:\r\n   Entity:  a user, organization, device or computing environment.\r\n\r\n   Principal:  an Entity that implements RATS Roles and creates provable\r\n      Claims or Attestation Results (see [ABLP] and [Lampson2007]).\r\n\r\nIf these semantics align with expected EAT semantics then it seems like the issue can be closed.\r\n\r\n-Ned\r\n\r\nOn 10/4/19, 9:12 AM, \"Laurence Lundblade\" <notifications@github.com<mailto:notifications@github.com>> wrote:\r\n\r\n\r\nThis can be closed because of the expectation that the architecture document will define entity.\r\n\r\n\u2014\r\nYou are receiving this because you commented.\r\nReply to this email directly, view it on GitHub<https://github.com/ietf-rats-wg/eat/issues/16?email_source=notifications&email_token=ABPMCSBZKEW6N5ABYPX6NODQM5TPTA5CNFSM4ID7KXSKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEAMEYSQ#issuecomment-538463306>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABPMCSCQC6PK3Q7OLEKVG63QM5TPTANCNFSM4ID7KXSA>.\r\n",
          "createdAt": "2019-10-04T17:22:41Z",
          "updatedAt": "2019-10-04T17:22:41Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "EAT and Architecture are absolutely NOT aligned on the term entity. See my recent email comments on the architecture document.\r\n\r\nMy basis for closure is that the architecture document will define some term that is the is used to refer to the subject of the attestation. Maybe we shouldn't close this until the architecture doc starts tracking issues formally.",
          "createdAt": "2019-10-04T17:27:32Z",
          "updatedAt": "2019-10-04T17:27:32Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "The architecture defines:\r\n\r\n  *   Entity:  a user, organization, device or computing environment.\r\n  *   Principal:  an Entity that implements RATS Roles and creates provable Claims or Attestation Results (see [ABLP] and [Lampson2007]).\r\n  *   Attesting Computing Environment:  a Computing Environment capable of monitoring and attesting a target Computing Environment.\r\n  *   Attested Computing Environment:  a target Computing Environment that is monitored and attested by an Attesting Computing Environment.\r\n\r\nThe attested computing environment is the subject of attestation which clearly is creating provable claims.\r\n\r\nThe \u2018attested\u2019 environment may be less clearly a Principal. At one point the list suggested the architecture should define a term \u201ctarget of attestation\u201d or \u201cattestation target\u201d (or something similar). The term \u201cattested computing environment\u201d seems close to this. Do we think the attested environment is semantically the same as \u201csubject of the attestation\u201d?\r\n\r\nUsing Lampson\u2019s definition of Principal, an expression of attributes (aka claims) is itself a principal.\r\n\r\nThere are lots of cases where \u2018entity\u2019 is used to refer to organizations and users (see https://csrc.nist.gov/glossary/term/entity ). Given the broad use of the term to mean: a \u201cuser, organization, device or process\u201d it might not make sense for RATs to change its scope. The RATS Arch used the term \u201ccomputing environment\u201d instead of process because not every computing environment has an operating system.\r\n\r\nAn \u201cattested computing environment\u201d is clearly intended to be a \u201ccomputing environment\u201d and hence is an Entity according to the arch draft.\r\n\r\nIf the EAT draft\u2019s use of entity is semantically equal to the architecture draft use of \u201cattested computing environment\u201d then possibly it makes sense for the EAT draft to begin using this term instead?\r\n\r\nThe architecture draft potentially could be more clear as to whether an \u201cAttested computing environment\u201d is both an entity and a principal or just an entity. It seems clear that an \u201cattesting computing environment\u201d is a Principal.\r\n\r\nNed\r\n\r\nOn 10/4/19, 10:27 AM, \"Laurence Lundblade\" <notifications@github.com<mailto:notifications@github.com>> wrote:\r\n\r\n\r\nEAT and Architecture are absolutely NOT aligned on the term entity. See my recent email comments on the architecture document.\r\n\r\nMy basis for closure is that the architecture document will define some term that is the is used to refer to the subject of the attestation. Maybe we shouldn't close this until the architecture doc starts tracking issues formally.\r\n\r\n\u2014\r\nYou are receiving this because you commented.\r\nReply to this email directly, view it on GitHub<https://github.com/ietf-rats-wg/eat/issues/16?email_source=notifications&email_token=ABPMCSG6S47KPNKHPDRK3TDQM54ILA5CNFSM4ID7KXSKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEAMLBKY#issuecomment-538489003>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABPMCSAPK5BFFBWNGO2SLZTQM54ILANCNFSM4ID7KXSA>.\r\n",
          "createdAt": "2019-10-04T17:56:42Z",
          "updatedAt": "2019-10-04T17:56:42Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "On Fri, Oct 4, 2019 at 1:56 PM Smith, Ned <ned.smith@intel.com> wrote:\n\n> The architecture defines:\n>\n>    - Entity:  a user, organization, device or computing environment.\n>    - Principal:  an Entity that implements RATS Roles and creates\n>    provable Claims or Attestation Results (see [ABLP] and [Lampson2007]).\n>    - Attesting Computing Environment:  a Computing Environment capable of\n>    monitoring and attesting a target Computing Environment.\n>    - Attested Computing Environment:  a target Computing Environment that\n>    is monitored and attested by an Attesting Computing Environment.\n>\n>\n>\n> The attested computing environment is the subject of attestation which\n> clearly is creating provable claims.\n>\n>\n>\n> The \u2018attested\u2019 environment may be less clearly a Principal. At one point\n> the list suggested the architecture should define a term \u201ctarget of\n> attestation\u201d or \u201cattestation target\u201d (or something similar). The term\n> \u201cattested computing environment\u201d seems close to this. Do we think the\n> attested environment is semantically the same as \u201csubject of the\n> attestation\u201d?\n>\n>\n>\n> Using Lampson\u2019s definition of Principal, an expression of attributes (aka\n> claims) is itself a principal.\n>\n>\n>\n> There are lots of cases where \u2018entity\u2019 is used to refer to organizations\n> and users (see https://csrc.nist.gov/glossary/term/entity ). Given the\n> broad use of the term to mean: a \u201cuser, organization, device or process\u201d it\n> might not make sense for RATs to change its scope. The RATS Arch used the\n> term \u201ccomputing environment\u201d instead of process because not every computing\n> environment has an operating system.\n>\n>\n>\n> An \u201cattested computing environment\u201d is clearly intended to be a \u201ccomputing\n> environment\u201d and hence is an Entity according to the arch draft.\n>\n\nAnd from a review of the EAT draft (again), I am reading this as the\nattestation based on the installed code with the attestation performed at\nboot to match what was installed.  This would verify that the code was what\nthe system administrator installed and configured.  As opposed to code\nbeing attested by the creator, which might be done with the same format,\nbut would assure the code was as he creator expected.\n\nI'm asking about this clarification in light of supply chain and the flow\ndocument:\nhttps://datatracker.ietf.org/doc/draft-fedorkow-rats-network-device-attestation/?include_text=1\n\nDoes the supply chain use case hold in these definitions or is there some\nreason why we might not care about attestations on code from the originator\nthat might include code it relies upon when chained attestations are\nconsidered?  This would expand out the definition of entity as well.\n\n\n>\n> If the EAT draft\u2019s use of entity is semantically equal to the architecture\n> draft use of \u201cattested computing environment\u201d then possibly it makes sense\n> for the EAT draft to begin using this term instead?\n>\n>\n>\n> The architecture draft potentially could be more clear as to whether an\n> \u201cAttested computing environment\u201d is both an entity and a principal or just\n> an entity. It seems clear that an \u201cattesting computing environment\u201d is a\n> Principal.\n>\n\nIs EAT limited to 'attested computing environments' or a broader definition\nof entity?\n\nKathleen\n\n\n>\n> Ned\n>\n>\n>\n> On 10/4/19, 10:27 AM, \"Laurence Lundblade\" <notifications@github.com>\n> wrote:\n>\n>\n>\n> EAT and Architecture are absolutely NOT aligned on the term entity. See my\n> recent email comments on the architecture document.\n>\n> My basis for closure is that the architecture document will define some\n> term that is the is used to refer to the subject of the attestation. Maybe\n> we shouldn't close this until the architecture doc starts tracking issues\n> formally.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ietf-rats-wg/eat/issues/16?email_source=notifications&email_token=ABPMCSG6S47KPNKHPDRK3TDQM54ILA5CNFSM4ID7KXSKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEAMLBKY#issuecomment-538489003>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABPMCSAPK5BFFBWNGO2SLZTQM54ILANCNFSM4ID7KXSA>\n> .\n> _______________________________________________\n> RATS mailing list\n> RATS@ietf.org\n> https://www.ietf.org/mailman/listinfo/rats\n>\n\n\n-- \n\nBest regards,\nKathleen\n",
          "createdAt": "2019-10-04T19:17:05Z",
          "updatedAt": "2019-10-04T19:17:05Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "See inline [nms]\r\n\r\nOn 10/4/19, 12:17 PM, \"Kathleen Moriarty\" <kathleen.moriarty.ietf@gmail.com<mailto:kathleen.moriarty.ietf@gmail.com>> wrote:\r\n\r\n\r\n\r\nOn Fri, Oct 4, 2019 at 1:56 PM Smith, Ned <ned.smith@intel.com<mailto:ned.smith@intel.com>> wrote:\r\nThe architecture defines:\r\n\r\n\u00b7 Entity:  a user, organization, device or computing environment.\r\n\r\n\u00b7 Principal:  an Entity that implements RATS Roles and creates provable Claims or Attestation Results (see [ABLP] and [Lampson2007]).\r\n\r\n\u00b7 Attesting Computing Environment:  a Computing Environment capable of monitoring and attesting a target Computing Environment.\r\n\r\n\u00b7 Attested Computing Environment:  a target Computing Environment that is monitored and attested by an Attesting Computing Environment.\r\n\r\nThe attested computing environment is the subject of attestation which clearly is creating provable claims.\r\n\r\nThe \u2018attested\u2019 environment may be less clearly a Principal. At one point the list suggested the architecture should define a term \u201ctarget of attestation\u201d or \u201cattestation target\u201d (or something similar). The term \u201cattested computing environment\u201d seems close to this. Do we think the attested environment is semantically the same as \u201csubject of the attestation\u201d?\r\n\r\nUsing Lampson\u2019s definition of Principal, an expression of attributes (aka claims) is itself a principal.\r\n\r\nThere are lots of cases where \u2018entity\u2019 is used to refer to organizations and users (see https://csrc.nist.gov/glossary/term/entity ). Given the broad use of the term to mean: a \u201cuser, organization, device or process\u201d it might not make sense for RATs to change its scope. The RATS Arch used the term \u201ccomputing environment\u201d instead of process because not every computing environment has an operating system.\r\n\r\nAn \u201cattested computing environment\u201d is clearly intended to be a \u201ccomputing environment\u201d and hence is an Entity according to the arch draft.\r\n\r\nAnd from a review of the EAT draft (again), I am reading this as the attestation based on the installed code with the attestation performed at boot to match what was installed.  This would verify that the code was what the system administrator installed and configured.  As opposed to code being attested by the creator, which might be done with the same format, but would assure the code was as he creator expected.\r\n\r\nI'm asking about this clarification in light of supply chain and the flow document:\r\nhttps://datatracker.ietf.org/doc/draft-fedorkow-rats-network-device-attestation/?include_text=1\r\n\r\nDoes the supply chain use case hold in these definitions or is there some reason why we might not care about attestations on code from the originator that might include code it relies upon when chained attestations are considered?  This would expand out the definition of entity as well.\r\n[nms] The RATS architecture describes the \u201cattestations on code from the originator\u201d as \u201cEndorsements\u201d from \u201cAsserters\u201d. The architecture tries to avoid using the term \u201cattestation\u201d in this context as collection of reference values (Endorsements) isn\u2019t the same as providing proof and evidence (and the charter ruled this out of scope for now). The NIST definition of Entity includes supply chain entities (aka Asserters).\r\n\r\nIf the RATS charter were updated to allow definition of \u201cEndorsements\u201d it might make sense to propose using JWT/CWT as a binding. The Architecture draft defines endorsements [here] as a specialization of Claims. Claims in Evidence can be semantically linked to claims in Endorsements. This is intentional so that verification is less susceptible to semantic misdirection.\r\n[here]\r\n\r\n  *   Endorsements are reference Claims about the environment protecting the Attesters capabilities to create believable Evidence (e.g. the type of protection for an attestation key).  It answers the question \"why Evidence is believable\".\r\n\r\n\r\nIf the EAT draft\u2019s use of entity is semantically equal to the architecture draft use of \u201cattested computing environment\u201d then possibly it makes sense for the EAT draft to begin using this term instead?\r\n\r\nThe architecture draft potentially could be more clear as to whether an \u201cAttested computing environment\u201d is both an entity and a principal or just an entity. It seems clear that an \u201cattesting computing environment\u201d is a Principal.\r\n\r\nIs EAT limited to 'attested computing environments' or a broader definition of entity?\r\n\r\nKathleen\r\n\r\n\r\nNed\r\n\r\nOn 10/4/19, 10:27 AM, \"Laurence Lundblade\" <notifications@github.com<mailto:notifications@github.com>> wrote:\r\n\r\n\r\nEAT and Architecture are absolutely NOT aligned on the term entity. See my recent email comments on the architecture document.\r\n\r\nMy basis for closure is that the architecture document will define some term that is the is used to refer to the subject of the attestation. Maybe we shouldn't close this until the architecture doc starts tracking issues formally.\r\n\r\n\u2014\r\nYou are receiving this because you commented.\r\nReply to this email directly, view it on GitHub<https://github.com/ietf-rats-wg/eat/issues/16?email_source=notifications&email_token=ABPMCSG6S47KPNKHPDRK3TDQM54ILA5CNFSM4ID7KXSKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEAMLBKY#issuecomment-538489003>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABPMCSAPK5BFFBWNGO2SLZTQM54ILANCNFSM4ID7KXSA>.\r\n_______________________________________________\r\nRATS mailing list\r\nRATS@ietf.org<mailto:RATS@ietf.org>\r\nhttps://www.ietf.org/mailman/listinfo/rats\r\n\r\n\r\n--\r\n\r\nBest regards,\r\nKathleen\r\n",
          "createdAt": "2019-10-04T19:53:33Z",
          "updatedAt": "2019-10-04T19:53:33Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "On Fri, Oct 4, 2019 at 3:53 PM Smith, Ned <ned.smith@intel.com> wrote:\n\n> See inline [nms]\n>\n>\n>\n> On 10/4/19, 12:17 PM, \"Kathleen Moriarty\" <\n> kathleen.moriarty.ietf@gmail.com> wrote:\n>\n>\n>\n>\n>\n>\n>\n> On Fri, Oct 4, 2019 at 1:56 PM Smith, Ned <ned.smith@intel.com> wrote:\n>\n> The architecture defines:\n>\n> \u00b7 Entity:  a user, organization, device or computing environment.\n>\n> \u00b7 Principal:  an Entity that implements RATS Roles and creates provable\n> Claims or Attestation Results (see [ABLP] and [Lampson2007]).\n>\n> \u00b7 Attesting Computing Environment:  a Computing Environment capable of\n> monitoring and attesting a target Computing Environment.\n>\n> \u00b7 Attested Computing Environment:  a target Computing Environment that is\n> monitored and attested by an Attesting Computing Environment.\n>\n>\n>\n> The attested computing environment is the subject of attestation which\n> clearly is creating provable claims.\n>\n>\n>\n> The \u2018attested\u2019 environment may be less clearly a Principal. At one point\n> the list suggested the architecture should define a term \u201ctarget of\n> attestation\u201d or \u201cattestation target\u201d (or something similar). The term\n> \u201cattested computing environment\u201d seems close to this. Do we think the\n> attested environment is semantically the same as \u201csubject of the\n> attestation\u201d?\n>\n>\n>\n> Using Lampson\u2019s definition of Principal, an expression of attributes (aka\n> claims) is itself a principal.\n>\n>\n>\n> There are lots of cases where \u2018entity\u2019 is used to refer to organizations\n> and users (see https://csrc.nist.gov/glossary/term/entity ). Given the\n> broad use of the term to mean: a \u201cuser, organization, device or process\u201d it\n> might not make sense for RATs to change its scope. The RATS Arch used the\n> term \u201ccomputing environment\u201d instead of process because not every computing\n> environment has an operating system.\n>\n>\n>\n> An \u201cattested computing environment\u201d is clearly intended to be a \u201ccomputing\n> environment\u201d and hence is an Entity according to the arch draft.\n>\n>\n>\n> And from a review of the EAT draft (again), I am reading this as the\n> attestation based on the installed code with the attestation performed at\n> boot to match what was installed.  This would verify that the code was what\n> the system administrator installed and configured.  As opposed to code\n> being attested by the creator, which might be done with the same format,\n> but would assure the code was as he creator expected.\n>\n>\n>\n> I'm asking about this clarification in light of supply chain and the flow\n> document:\n>\n>\n> https://datatracker.ietf.org/doc/draft-fedorkow-rats-network-device-attestation/?include_text=1\n>\n>\n>\n> Does the supply chain use case hold in these definitions or is there some\n> reason why we might not care about attestations on code from the originator\n> that might include code it relies upon when chained attestations are\n> considered?  This would expand out the definition of entity as well.\n>\n> [nms] The RATS architecture describes the \u201cattestations on code from the\n> originator\u201d as \u201cEndorsements\u201d from \u201cAsserters\u201d. The architecture tries to\n> avoid using the term \u201cattestation\u201d in this context as collection of\n> reference values (Endorsements) isn\u2019t the same as providing proof and\n> evidence (and the charter ruled this out of scope for now). The NIST\n> definition of Entity includes supply chain entities (aka Asserters).\n>\n>\n>\n> If the RATS charter were updated to allow definition of \u201cEndorsements\u201d it\n> might make sense to propose using JWT/CWT as a binding.\n>\n\nCould an endorsement be a form of attestation so the charter does not need\nto be updated?  If we wind up with lots of formats, it'll be impossible to\nmanage with code being used by an entity for which they each chose their\nown format. From the submitted flow draft that covers this scenario, I'm\nnot sure the terminology was clear enough on the point to separate those\nout and intentionally exclude endorsements.\n\n\n> The Architecture draft defines endorsements [here] as a specialization of\n> Claims. Claims in Evidence can be semantically linked to claims in\n> Endorsements. This is intentional so that verification is less susceptible\n> to semantic misdirection.\n>\n> [here]\n>\n>    - Endorsements are reference Claims about the environment protecting\n>    the Attesters capabilities to create believable Evidence (e.g. the type of\n>    protection for an attestation key).  It answers the question \"why Evidence\n>    is believable\".\n>\n>\n>\nThis was helpful, thank you.\nKathleen\n\n>\n>\n> If the EAT draft\u2019s use of entity is semantically equal to the architecture\n> draft use of \u201cattested computing environment\u201d then possibly it makes sense\n> for the EAT draft to begin using this term instead?\n>\n>\n>\n> The architecture draft potentially could be more clear as to whether an\n> \u201cAttested computing environment\u201d is both an entity and a principal or just\n> an entity. It seems clear that an \u201cattesting computing environment\u201d is a\n> Principal.\n>\n>\n>\n> Is EAT limited to 'attested computing environments' or a broader\n> definition of entity?\n>\n>\n>\n> Kathleen\n>\n>\n>\n>\n>\n> Ned\n>\n>\n>\n> On 10/4/19, 10:27 AM, \"Laurence Lundblade\" <notifications@github.com>\n> wrote:\n>\n>\n>\n> EAT and Architecture are absolutely NOT aligned on the term entity. See my\n> recent email comments on the architecture document.\n>\n> My basis for closure is that the architecture document will define some\n> term that is the is used to refer to the subject of the attestation. Maybe\n> we shouldn't close this until the architecture doc starts tracking issues\n> formally.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ietf-rats-wg/eat/issues/16?email_source=notifications&email_token=ABPMCSG6S47KPNKHPDRK3TDQM54ILA5CNFSM4ID7KXSKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEAMLBKY#issuecomment-538489003>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABPMCSAPK5BFFBWNGO2SLZTQM54ILANCNFSM4ID7KXSA>\n> .\n>\n> _______________________________________________\n> RATS mailing list\n> RATS@ietf.org\n> https://www.ietf.org/mailman/listinfo/rats\n>\n>\n>\n>\n> --\n>\n>\n>\n> Best regards,\n>\n> Kathleen\n>\n\n\n-- \n\nBest regards,\nKathleen\n",
          "createdAt": "2019-10-04T20:02:35Z",
          "updatedAt": "2019-10-04T20:02:35Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "TL;DR yes, endorsements are a \"form of attestation\", but they are not attestation evidence. Endorsements are part of the attestation provisioning workflows.\r\n\r\n\r\nDuring the chartering, the proponents made their case for a complete inclusion of remote attestation procedures and the resulting consensus was to do phases via chartering. There was a split into the \"attestation evidence workflows\", which is currently chartered, and the \"attestation provisioning workflows\", which is not currently chartered.\r\n\r\nIn achieving this compromise, the proponents where also adamant about including both workflows in the architecture I-D from the very beginning (as an \"exception\" so to speak) and luckily this also reached consensus - otherwise the document would not really make sense.\r\n\r\nTo answer your question: yes, endorsements are a \"form of attestation\". Nevertheless they are not attestation evidence, but part of the attestation provisioning workflows. This is also the reason why the RATS terminology is rather complex. To simply \"attest to something\" or \"conduct attestation\" is semantically mixing two quite separate and distinct workflows.\r\n\r\nThe authors of the architecture I-D are very invested in unifying as much as they can in this first phase though. Currently, the architecture I-D defines Evidence, Endorsements & Reference Values to be composed of Claims. The context gives them different scope, audience and intent, e.g. Attestation Evidence in the form of an EAT. That means we are using assertions and claims basically as synonyms, which is a bit tricky because in the IETF a Claim is a specialization of assertion and a data model concept used in web tokens. In RATS and especially in the RATS EAT I-D, Claims MAY be key value pairs in JWT or CWT that can be registered in IANA registries, but Claims MAY also be assertions that are represented in other data models (most prominently attributes in pub-key/identity or attribute certificates and YANG modules).\r\n\r\n\"Winding up with lots of formats\": We surely want to prevent that, but we have to take into account what is used today globally.\r\n\r\n\"Terminology in the submitted flow draft that covers this scenario\": While draft-fedorkow-rats-network-device-attestation makes use of concepts such as IDevID, LDevID, IAK and LAK, it does not elaborate on Endorsements and EK, which is okay, because they are.. well, currently out-of-scope. I know (obviously) that draft-birkholz-rats-tuda does use endorsement documents and corresponding endorsement keys, but that work was started before the chartering of RATS.",
          "createdAt": "2019-10-04T21:44:49Z",
          "updatedAt": "2019-10-04T21:44:49Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "@laurencelundblade, @henkbirkholz, @nedmsmith \r\n\r\nEntity does not seem to have been explicitly defined in the Architecture doc.  Can we keep the current entity description in https://datatracker.ietf.org/doc/html/draft-ietf-rats-eat#section-1.3 as it stands?  If so, then we can potentially tag this issue as 'wontfix'.",
          "createdAt": "2021-08-24T04:11:19Z",
          "updatedAt": "2021-08-24T04:11:19Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Various other comments on this term. Have a plan to fix it with reference to RFC4949.",
          "createdAt": "2021-12-22T20:07:52Z",
          "updatedAt": "2021-12-22T20:07:52Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #148 ",
          "createdAt": "2022-01-05T21:19:41Z",
          "updatedAt": "2022-01-05T21:19:41Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "MDU6SXNzdWU0Njg1NzAyOTg=",
      "title": "SHOULD or MUST re: cryptographic verifiability",
      "url": "https://github.com/ietf-rats-wg/eat/issues/17",
      "state": "CLOSED",
      "author": "carl-wallace",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Last Call blocking"
      ],
      "body": "This is possibly subsumed by issue 15. In section 1.2, why state \"the attestation should be cryptographically verifiable by the EAT consumer\"? Is the intent that some EAT consumers won't recognize the root of trust or that some EATs need not be cryptographically verifiable at all? If the former, maybe change from should to MUST and add qualifying words about root of trust for relying parties. ",
      "createdAt": "2019-07-16T10:17:55Z",
      "updatedAt": "2021-10-31T20:47:07Z",
      "closedAt": "2021-10-31T20:47:07Z",
      "comments": [
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "Issue #23 seems to assert that claims are optional (except where Verifier policies make them mandatory). Issue #15 may have to do with how claims are packaged and attested (e.g. signed). It is possible for signing to take place at the data layer (aka via a signed manifest structure) or at a protocol layer (aka TLS). If the requirement for attestation is that claims MUST be signed. It seems there could be flexibility regarding what layer the signature is applied (protocol or data structure). It would not (likely) make sense to sign using the same key twice simply to satisfy normative that places the signing at the data structure layer.",
          "createdAt": "2019-07-22T19:10:02Z",
          "updatedAt": "2019-07-22T19:10:02Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Section 1.2 is intended as general introductory text to help the reader orient. \r\n\r\nMy proposed solution here is to remove the \"should\" and generally soften into more descriptive language. ",
          "createdAt": "2019-07-23T16:01:13Z",
          "updatedAt": "2019-07-23T16:01:13Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "Have not seen a proposal on this issue.  In my opinion, the language \"should be cryptographically verifiable\" is also desirable as it can cover future use cases such as UCCS (unsigned EAT's).  Closing.",
          "createdAt": "2021-10-31T20:47:07Z",
          "updatedAt": "2021-10-31T20:47:07Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "MDU6SXNzdWU0NzA1MDgwMTU=",
      "title": "Consider adding verification procedures",
      "url": "https://github.com/ietf-rats-wg/eat/issues/18",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready to close"
      ],
      "body": "Guidance on verification procedures not covered in document.  It is touched upon in Sec. 1.3, but not to the level described in comparable specifications (see https://www.w3.org/TR/webauthn/#defined-attestation-formats).",
      "createdAt": "2019-07-19T19:39:58Z",
      "updatedAt": "2021-08-23T20:31:37Z",
      "closedAt": "2021-08-23T20:31:36Z",
      "comments": [
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "The architecture draft should define the scope of verification semantics in terms of 'duties' and if it is appropriate for the Attester to be allowed to specify 'verification procedures' that the Verifier should follow. Verifiers are presumed to be authoritative entities regarding evaluation of evidence. It isn't clear if there is a goal to define interoperability between multiple verifier entities (something that isn't currently anticipated by the architecture IMO.)",
          "createdAt": "2019-07-22T19:02:17Z",
          "updatedAt": "2019-07-22T19:02:17Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "EAT inherits verification procedures from JWT and CWT so no need for it in the EAT document. \r\n\r\nWe could add some things over and above CWT and JWT, but I don't see anything obvious.\r\n\r\nStuff could also go in the architecture document or in individual profile documents.\r\n\r\n",
          "createdAt": "2019-07-23T15:49:28Z",
          "updatedAt": "2019-07-23T15:49:28Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "@laurencelundblade @nedmsmith \r\n\r\nI had some motivations for raising this issue:\r\n\r\na) To improve readability of the document by grouping all verification guidance into one section.  This would apply even if we think the guidance can be limited to \"Use COSE verification procedures\" and/or \"the verifier can ignore claims that it has no interest in or cannot interpret\" (as crude examples).\r\n\r\nb) Since EAT is a CWT (or JWT - still to be confirmed by group), it inherits the claim set from CWT.  There are some claims in CWT whose relationship to EAT claims is not obvious and could be subject to varying interpretations.  Some examples:\r\n    i. aud claim.  If present, does the verifier have to have a relationship with the entity identified by 'aud'?    Should the token be rejected if the verifier does not recognize 'aud'?\r\n   ii. iat and age/uptime claims.  Should the verifier treat iat independently of age/uptime, or can the verifier cast them to a common timeline?  This may affect how the verifier assesses the claims in the context of security (e.g. stale location state with respect to when the token was created).\r\n\r\nWe don't need to be prescriptive, but we can provide general guidance in the processing of claims.\r\n\r\nc) Verification of nested EATs and aggregated EATs.  If different verifiers are employed for different EAT's in a nested or aggregated structure, how do the verifiers interoperate?  Note that this may be better handled in the architecture doc, but the -01 version of the document treats the verifier as a monolith.  I believe this is also the nature the comment by @nedmsmith above.",
          "createdAt": "2019-07-23T16:37:40Z",
          "updatedAt": "2019-07-23T16:37:40Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Saying this in a different way -- EAT inherits verification from CWT (and JWT). It would only not inherit if we explicitly said so. I don't think we should do that.\r\n\r\nNote that the verification text in CWT and JWT result in a valid map payload. It doesn't go into anything about the claims details at all.\r\n\r\nIt seems we have an overload on the word \"verify\" in that some of the larger RATS architecture docs use the term for checking that the claims have acceptable values. \r\nThis is different from the verification in CWT and JWT. \r\n\r\nSo net-net, I don't think the EAT draft should discuss either forms of verification.\r\n\r\nI think the issue of claims meaning being different in the EAT context is an issue and you should file a separate GitHub issue for it.\r\n\r\n",
          "createdAt": "2019-07-23T18:07:16Z",
          "updatedAt": "2019-07-23T18:07:16Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "+1 on a) and b)\r\n\r\nRegarding c) the TEEP WG observed yesterday that there can be multiple TEEs in a platform/device each having the ability to attest to something. That implies there will be different keys used to attest to claims (assertions) that are specific to the respective TEE. It was also observed that there will be a mix of vendor specific and vendor independent claims that could be asserted. I expect there will be vendor specific opaque values that only a vendor-specific verifier will be able to crack. All of the above needs to be conveyed by the attestation mechanisms. Verifiers will need to be able to navigate the complexity somehow.\r\n\r\nOn 7/23/19, 12:37 PM, \"gmandyam\" <notifications@github.com<mailto:notifications@github.com>> wrote:\r\n\r\n\r\n@laurencelundblade<https://github.com/laurencelundblade> @nedmsmith<https://github.com/nedmsmith>\r\n\r\nI had some motivations for raising this issue:\r\n\r\na) To improve readability of the document by grouping all verification guidance into one section. This would apply even if we think the guidance can be limited to \"Use COSE verification procedures\" and/or \"the verifier can ignore claims that it has no interest in or cannot interpret\" (as crude examples).\r\n\r\nb) Since EAT is a CWT (or JWT - still to be confirmed by group), it inherits the claim set from CWT. There are some claims in CWT whose relationship to EAT claims is not obvious and could be subject to varying interpretations. Some examples:\r\ni. aud claim. If present, does the verifier have to have a relationship with the entity identified by 'aud'? Should the token be rejected if the verifier does not recognize 'aud'?\r\nii. iat and age/uptime claims. Should the verifier treat iat independently of age/uptime, or can the verifier cast them to a common timeline? This may affect how the verifier assesses the claims in the context of security (e.g. stale location state with respect to when the token was created).\r\n\r\nWe don't need to be prescriptive, but we can provide general guidance in the processing of claims.\r\n\r\nc) Verification of nested EATs and aggregated EATs. If different verifiers are employed for different EAT's in a nested or aggregated structure, how do the verifiers interoperate? Note that this may be better handled in the architecture doc, but the -01 version of the document treats the verifier as a monolith. I believe this is also the nature the comment by @nedmsmith<https://github.com/nedmsmith> above.\r\n\r\n\u2014\r\nYou are receiving this because you were mentioned.\r\nReply to this email directly, view it on GitHub<https://github.com/ietf-rats-wg/eat/issues/18?email_source=notifications&email_token=ABPMCSFGOFUATI4ZWIRC5ZDQA4XVNA5CNFSM4IFLG3C2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2TWW5I#issuecomment-514288501>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABPMCSG3GPY76XZ3ZJFQR73QA4XVNANCNFSM4IFLG3CQ>.\r\n",
          "createdAt": "2019-07-24T14:14:03Z",
          "updatedAt": "2019-07-24T14:14:03Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "Depending on the disposition of https://github.com/ietf-rats-wg/eat/issues/27, this issue may become moot.  If the operating models section is removed, then the role of verification doesn't need to be discussed anywhere else in the document.",
          "createdAt": "2019-08-08T00:39:06Z",
          "updatedAt": "2019-08-08T00:39:06Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Can be closed because CWT and JWT cover this. Any additional coverage will go in the architecture or other documents.",
          "createdAt": "2019-10-04T16:24:36Z",
          "updatedAt": "2019-10-04T16:24:36Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing it.",
          "createdAt": "2019-10-04T16:43:51Z",
          "updatedAt": "2019-10-04T16:43:51Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that any residual verification procedures (i.e. those that are not already covered in RFC 8392 and RFC 7519) could go into an architecture doc.  The current architecture doc (-02 of https://datatracker.ietf.org/doc/draft-birkholz-rats-architecture/) does not have such a section yet, however.",
          "createdAt": "2019-10-04T16:52:03Z",
          "updatedAt": "2019-10-04T16:52:03Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing again. Not sure why it is still open.\r\n\r\nTo reiterate, the signature verification parts are covered by CWT and JWT. The evidence verification is covered by discussion of appraisal in the architecture document.\r\n",
          "createdAt": "2021-08-23T20:31:36Z",
          "updatedAt": "2021-08-23T20:31:36Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "MDU6SXNzdWU0NzA1Mjk4MTc=",
      "title": "Should ephemeral keys be allowed for signing EAT's?",
      "url": "https://github.com/ietf-rats-wg/eat/issues/19",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready to close"
      ],
      "body": "As per https://mailarchive.ietf.org/arch/msg/rats/d4GYkpwEMmh0VjD3Gmjd1h82Wpc -\r\n\r\n> \"The EAT is always signed by the attestation key material provisioned by the manufacturer.\"\r\n>This seems to prevent nested_eat use cases (e.g., cloud workloads with container/VM entities) where the outer EAT is signed with an \"ephemeral\" attestation key associated with the instance that is itself attested by the inner EAT signed with the AKM.  I suggest removing the sentence. ",
      "createdAt": "2019-07-19T20:29:19Z",
      "updatedAt": "2021-08-31T17:24:59Z",
      "closedAt": "2021-08-31T17:24:59Z",
      "comments": [
        {
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "body": "Given the growing range of use cases for EAT, the alternative to manufacturer provisioned keys may not just be ephemeral keys, but could be keys obtained via an enrollment operation into some service and securely stored e.g. for anonymization reasons or to reflect a set of claims relevant to some service interaction. Agree that the simplest solution here may be to just drop this sentence but consider also whether the rest of the para, starting \"In all operating models, the manufacturer provisions some secret attestation key material...\" needs revising. I like the idea of a separate security section which could discuss the trust alternatives for the signing key.",
          "createdAt": "2019-07-22T13:32:03Z",
          "updatedAt": "2019-07-22T13:32:03Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "A stronger definition of what is meant by 'ephemeral' may be required. This relates to Issue 24.",
          "createdAt": "2019-07-22T18:52:32Z",
          "updatedAt": "2019-07-22T18:52:32Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Pretty sure the resolution here is to remove most of the operational and architectural model text so EAT is just claims definitions like CWT and JWT.\r\n\r\nDiscussion of key material can go in other documents or profiles.",
          "createdAt": "2019-10-01T13:46:05Z",
          "updatedAt": "2019-10-01T13:46:05Z"
        },
        {
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "body": "That would be an ideal resolution",
          "createdAt": "2019-10-01T15:34:08Z",
          "updatedAt": "2019-10-01T15:34:08Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "This can be closed because this will go into the architecture document and profiles.",
          "createdAt": "2019-10-04T16:19:57Z",
          "updatedAt": "2019-10-04T16:19:57Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #129",
          "createdAt": "2021-08-31T17:24:59Z",
          "updatedAt": "2021-08-31T17:24:59Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "MDU6SXNzdWU0NzA3OTgxOTQ=",
      "title": "Typo issues with -01",
      "url": "https://github.com/ietf-rats-wg/eat/issues/20",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "They can be addressed in a -02 version.\r\n\r\nSec. 3:  Change \"\"It also mentions several claims defined by CWT and JWT are  particularly important for EAT.\" to 'that are particularly important'\r\n\r\nSec. 3:  Correct \"* All claims are optional * No claims are mandatory *.\"  Redundant.\r\n\r\nSec. 3.11:  \"Typically, one will be the device-wide EAT that is low to medium  security and another from a Secure Element or similar that is high security.\u201d  Consider changing \"Typically\" to \"For example\".\r\n\r\nSec. 3.11:  \"The contents of the \"eat\" claim must be a fully signed, ...\".  \"eat\" claim should be \"nested_eat\" claim. ",
      "createdAt": "2019-07-21T16:13:41Z",
      "updatedAt": "2019-07-22T17:52:37Z",
      "closedAt": "2019-07-22T17:52:36Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "I fixed the last two and pushed to GitHub.\r\n\r\nI like the first two the way they are.\r\n",
          "createdAt": "2019-07-22T17:23:00Z",
          "updatedAt": "2019-07-22T17:23:00Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Update: fixe the first one now that I see the missing \"that\".\r\n\r\nHave created a separate issue for claim optionality: https://github.com/ietf-rats-wg/eat/issues/23\r\n",
          "createdAt": "2019-07-22T17:52:36Z",
          "updatedAt": "2019-07-22T17:52:36Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "MDU6SXNzdWU0NzA3OTgzODk=",
      "title": "RAND UEID's - minimum requirements to prevent clashes from different manufacturers",
      "url": "https://github.com/ietf-rats-wg/eat/issues/21",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready to close"
      ],
      "body": "Current text (-01) does not state assumptions on rand generation that would be necessary to minimize the probability of collisions from different manufacturers.  This could be added to the Security Considerations section.",
      "createdAt": "2019-07-21T16:15:51Z",
      "updatedAt": "2020-11-03T18:34:58Z",
      "closedAt": "2020-11-03T18:34:58Z",
      "comments": [
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "An attacker might purposefully reuse an existing EUID (random or not). The security of attestation should not depend on a convention for whether the generation algorithm includes entropy. Even if values are guessable, there should be an understanding by the Verifier for how to detect that the value is authentic / spoofed. The entity (vendor) creating the EUID is not motivated to issue duplicates. Whether they select a method based on entropy or assigned values should be a vendor specific choice (IMO).",
          "createdAt": "2019-07-22T18:42:48Z",
          "updatedAt": "2019-07-22T18:42:48Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "@nedmsmith Addressing your comment from July 22, 2019. The relying party has to trust the UEID based on the fact that it was signed by the attester. They trust the attester because of endorsements. There's nothing more that can be done.\r\n\r\nThe vendor can choose the type they want, random, MAC address.... They can even switch from one day to the next.",
          "createdAt": "2020-02-29T16:57:18Z",
          "updatedAt": "2020-02-29T16:57:18Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this is fixed with #35",
          "createdAt": "2020-02-29T16:57:31Z",
          "updatedAt": "2020-02-29T16:57:31Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "MDU6SXNzdWU0NzA4MDEwMTk=",
      "title": "Sec. 3.7.6 (-01):  Should debug disable states be an array or a choice option?",
      "url": "https://github.com/ietf-rats-wg/eat/issues/22",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready to close"
      ],
      "body": "Sec. 2.2.2 of RFC 8610 allows for a choice expression based on a '/' delimiter between options.  In order to avoid expression of potentially conflicting debug disable states (e.g. debug full permanent disable being true while debug disabled since boot being false), this could be an alternative.",
      "createdAt": "2019-07-21T16:45:47Z",
      "updatedAt": "2020-11-03T18:34:28Z",
      "closedAt": "2020-11-03T18:34:28Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "I think I agree with this with the concept being that you claim the highest level of debug disable that is true for the device at the moment. That means selecting a higher level of debug disabling requires all the lower levels of debug disabling are true. \r\n",
          "createdAt": "2019-10-04T17:48:24Z",
          "updatedAt": "2019-10-04T17:48:24Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with #36 ",
          "createdAt": "2020-03-19T18:09:02Z",
          "updatedAt": "2020-03-19T18:09:14Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "MDU6SXNzdWU0NzEyMjI1NjM=",
      "title": "Claims optionality and profiles",
      "url": "https://github.com/ietf-rats-wg/eat/issues/23",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready to close"
      ],
      "body": "Current text:\r\n* All claims are optional\r\n* No claims are mandatory\r\n* All claims that are not understood by implementations MUST be ignored\r\n\r\n\u2022Should profiles be allowed to override this?\r\n\u2022Should there be text that says they can?\r\n\u2022How does this relate to JWT/CWT optionality?",
      "createdAt": "2019-07-22T17:49:50Z",
      "updatedAt": "2021-08-08T06:46:39Z",
      "closedAt": "2021-08-08T06:46:39Z",
      "comments": [
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "Verifier policies ultimately determine which claims matter and how to respond appropriately. Saying \"all claims are optional\" is different from saying \"all claims not understood by implementations MUST be ignored\". The latter potentially contradicts verifier policy that may NOT wish to process unknown claims as these may have obligatory requirements to protecting the confidentiality or integrity.\r\n\r\nDefinition of Verifier policies may be out of scope for RATS, though it should be anticipated that Verifiers have them.",
          "createdAt": "2019-07-22T18:49:12Z",
          "updatedAt": "2019-07-22T18:49:12Z"
        },
        {
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "body": "The intent of proposing the use of a referenced profile in draft-tschofenig-rats-psa-token is that it would be a description of the rules applied by the attesting implementation to the production of the EAT. A verifier would use this document to understand how to implement sufficient verification. The document would be normally be human readable rather than machine readable, though the latter case is not eliminated.\r\nThe profile will contain a full description of the standard claims and custom claims included, their usage (incl optionality), expected token signing, and any any verification specifics e.g. token structure such as submod usage.",
          "createdAt": "2019-07-23T09:51:57Z",
          "updatedAt": "2019-07-23T09:51:57Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "CWT text seems pretty good:\r\n>Specific applications of CWTs will require implementations to\r\n   understand and process some claims in particular ways.  However, in\r\n   the absence of such requirements, all claims that are not understood\r\n   by implementations MUST be ignored.",
          "createdAt": "2019-07-23T19:05:44Z",
          "updatedAt": "2019-07-23T19:05:44Z"
        },
        {
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "body": "I agree that the CWT text makes sense. \r\nIn trying to answer your queries posed in the initial Issue it seems to raise the question of whether there should be a mechanism for an implementation to declare the exact nature of its operation. What I probably should have added to my comment above is the suggestion that EAT should include a standard claim for 'profile' which would support such a mechanism. Previously that seemed supplementary to this specific issue but I'm not sure by what other form of submission you would like that proposal?\r\n",
          "createdAt": "2019-07-24T09:10:40Z",
          "updatedAt": "2019-07-24T09:10:40Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "We can close this because there is consensus that the CWT and JWT text for optionality is fine and because there is a separate issue for profiles, #32",
          "createdAt": "2019-10-04T16:18:39Z",
          "updatedAt": "2019-10-04T16:18:39Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "#121 is needed to address this. The CWT wording is short but critically addressed Ned's point above.",
          "createdAt": "2021-08-02T06:38:26Z",
          "updatedAt": "2021-08-02T06:38:26Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #121 ",
          "createdAt": "2021-08-08T06:46:39Z",
          "updatedAt": "2021-08-08T06:46:39Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "MDU6SXNzdWU0NzEyNDk0ODg=",
      "title": "Should there be key usage constraints for attestation?",
      "url": "https://github.com/ietf-rats-wg/eat/issues/24",
      "state": "CLOSED",
      "author": "nedmsmith",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "It isn't clear whether an key used for attestation is restricted to signing evidence that is controlled by a trusted environment. The risk of not having constraints is the key may be subject to a confused deputy attack where claims are presented as opaque data that then receive a signature and a verifier presumes the attester made the claims. \r\n\r\nShould it be mandatory for EAT claims to reside within the security perimeter of a trusted environment such as a TEEP TEE / TEEP Agent?",
      "createdAt": "2019-07-22T18:33:52Z",
      "updatedAt": "2021-05-27T17:32:27Z",
      "closedAt": "2021-05-27T17:32:27Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we must allow EATs to be generated in any environment, even Android apps, Windows Apps and such. \r\n\r\nSigning key protection requirements are for user case policy documents, certification and such. Probably these should come from organizations like FIDO, GP and TCG, not IETF. \r\n\r\nSimilarly, whether the key is used to sign attestation and whether the all the things is signs are as authentic as expected is a policy thing. \r\n\r\nHowever, I DO think EAT should allow signing and labeling of claims from outside the main protection boundary. This is in the current draft as a \"submod\". Note that this is not pegging security to any absolute level, just indicating some claims have different security than others.\r\n\r\n",
          "createdAt": "2019-07-23T13:50:34Z",
          "updatedAt": "2019-07-23T13:50:34Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Where you thinking of defining a new key use type for attestation? That could be in PKIX and/or COSE and/or JSON Web Key.\r\n\r\nAlternatively it could be a security recommendation that attestation keys are only used for attestation.\r\n\r\nFIDO has this notion of separation. FIDO has some enforcement through its certification program. IETF has no such program, so the best IETF can do is text in the security considerations section.\r\n",
          "createdAt": "2019-10-11T17:02:03Z",
          "updatedAt": "2019-10-11T17:02:03Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Attestation might be big enough and important enough to add a key op type for it here in the key op type registry for JWS and COSE https://www.iana.org/assignments/jose/jose.xhtml#web-key-operations but I'm not convinced yet. Unless there is some expression for support for this, I'm going to close this issue.",
          "createdAt": "2021-05-20T22:49:24Z",
          "updatedAt": "2021-05-20T22:49:24Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this since there is no further concern expressed.",
          "createdAt": "2021-05-27T17:32:27Z",
          "updatedAt": "2021-05-27T17:32:27Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "MDU6SXNzdWU0NzgxOTUwNzc=",
      "title": "Boot state text corrections:  ver. -01",
      "url": "https://github.com/ietf-rats-wg/eat/issues/25",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready to close"
      ],
      "body": "Sec.'s 3.7.3, 3.7.4 and 3.7.5 start out with the term \"this claim\".  These are actually not claims as per the definition in Sec. 3.7, but boolean values included in the boot_state claim.    ",
      "createdAt": "2019-08-08T00:27:48Z",
      "updatedAt": "2020-11-03T18:25:50Z",
      "closedAt": "2020-11-03T18:25:50Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed. Wording should be fixed.",
          "createdAt": "2019-10-04T16:34:09Z",
          "updatedAt": "2019-10-04T16:34:09Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #36 ",
          "createdAt": "2020-02-29T16:48:43Z",
          "updatedAt": "2020-02-29T16:48:43Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "MDU6SXNzdWU0NzgxOTU1MDI=",
      "title": "The list of claims in 4.5 does not match the list in 4.4.1",
      "url": "https://github.com/ietf-rats-wg/eat/issues/26",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-08-08T00:29:46Z",
      "updatedAt": "2020-11-09T21:37:06Z",
      "closedAt": "2020-11-09T21:37:06Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, submods is missing.",
          "createdAt": "2019-10-04T16:42:47Z",
          "updatedAt": "2019-10-04T16:42:47Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "This was fixed with the CDDL build stuff from Thomas",
          "createdAt": "2020-11-09T21:37:06Z",
          "updatedAt": "2020-11-09T21:37:06Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "MDU6SXNzdWU0NzgxOTcwMDU=",
      "title": "Remove Sec. 1.3 EAT Operating Models (ver. -01)",
      "url": "https://github.com/ietf-rats-wg/eat/issues/27",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Last Call blocking"
      ],
      "body": "2 reasons:\r\n\r\na) Neither RFC 8392 (CWT) nor RFC 7519 (JWT) have operational models.  Since EAT is derived from these specifications, it would be desirable to maintain consistency.\r\n\r\nb) This topic is better covered in an architecture specification. ",
      "createdAt": "2019-08-08T00:37:34Z",
      "updatedAt": "2021-08-31T17:24:37Z",
      "closedAt": "2021-08-31T17:24:37Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Can be closed because the plan is to move this to architecture",
          "createdAt": "2019-10-04T16:21:23Z",
          "updatedAt": "2019-10-04T16:21:23Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #129",
          "createdAt": "2021-08-31T17:24:37Z",
          "updatedAt": "2021-08-31T17:24:37Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "MDU6SXNzdWU1MDA5MTI0MzQ=",
      "title": "Add a claim definition for SW inventory",
      "url": "https://github.com/ietf-rats-wg/eat/issues/30",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "new claim"
      ],
      "body": "The claim would list SW on the entity. It would probably include name the name and version of each SW component.  This is probably a complicated claim to define.\r\n\r\nSee also issue #31 \r\n\r\nThis might include a signer ID like https://tools.ietf.org/html/draft-tschofenig-rats-psa-token-02 does",
      "createdAt": "2019-10-01T13:53:31Z",
      "updatedAt": "2021-05-28T18:29:37Z",
      "closedAt": "2021-05-28T18:29:37Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "There was good humming in favor of this in Singapore.\r\n\r\nThis seems like the obvious choice: https://tools.ietf.org/html/draft-ietf-sacm-coswid-13\r\n\r\nI'm planning to make a pull request",
          "createdAt": "2019-11-20T23:58:00Z",
          "updatedAt": "2019-11-20T23:58:00Z"
        },
        {
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "body": "I agree CoSWID does seem an obvious choice and would meet the needs of many scenarios. Beware though that on a constrained system CoSWID has considerable structural overhead, especially if the SW module being described is as a result of discovery e.g. a firmware module during measured boot where only minimal information is available to populate the claim. I'm aware there are some discussions underway which would reduce the 'considerable' description I used above but it will need to come down significantly to be workable for this purpose.",
          "createdAt": "2020-12-11T15:10:18Z",
          "updatedAt": "2020-12-11T15:11:42Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed with #102 ",
          "createdAt": "2021-05-28T18:29:37Z",
          "updatedAt": "2021-05-28T18:29:37Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "MDU6SXNzdWU1MDA5MTU2MDg=",
      "title": "Add a claim definition for SW measurement and/or integrity status",
      "url": "https://github.com/ietf-rats-wg/eat/issues/31",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "new claim"
      ],
      "body": "This claim would list measurements made on parts of the entity. Typically a measurement is a hash of some region. This may by SW component or it may be more of a run time integrity measuring memory images.\r\n\r\nFor TEE-based implementations, it is possible to evaluate the measurement on the device and only list the integrity status as a Boolean rather than a measurement. \r\n\r\nSee also issue #30 ",
      "createdAt": "2019-10-01T13:58:09Z",
      "updatedAt": "2021-05-28T18:31:20Z",
      "closedAt": "2021-05-28T18:31:20Z",
      "comments": [
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "The claim should either be a measurement claim or a boolean claim corresponding to some sort of status being asserted. There shouldn't be an assumption that all TEEs work a certain way. The TEE status claim should be discussed separately from this claim IMO.",
          "createdAt": "2019-12-03T18:59:21Z",
          "updatedAt": "2019-12-03T18:59:21Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed with #102 ",
          "createdAt": "2021-05-28T18:31:20Z",
          "updatedAt": "2021-05-28T18:31:20Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "MDU6SXNzdWU1MDA5NDg2MDk=",
      "title": "Add claim to name profile used by the token",
      "url": "https://github.com/ietf-rats-wg/eat/issues/32",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "new claim"
      ],
      "body": "Profiles are very concrete, use case specific, documents that say which claims are mandatory and which are optional and other.  For example there might be a profile for payments, one for automotive, one for a specific IoT industry and such. This claim would name the profile in use for this token, perhaps with a reference to its defining document. \r\n\r\nThis is used in https://tools.ietf.org/html/draft-tschofenig-rats-psa-token-02",
      "createdAt": "2019-10-01T14:47:57Z",
      "updatedAt": "2021-01-11T06:16:01Z",
      "closedAt": "2021-01-11T06:16:01Z",
      "comments": [
        {
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "body": "Some further background on the profiles document, from the discussions that lead to its inclusion in the PSA token doc.  The intent behind a profile document is that its a (human readable) description of the token. It would normally contain:\r\n - Details of the token signing\r\n- The list of expected standard EAT claims used\r\n- The list of any Custom claims used\r\n- The status of the claims (optional / mandatory / recommended)\r\n- A full description of the semantic usage of the claims.\r\n- Any information required to perform verification of claims.\r\n- Any expected structure (e.g. submods) that may need to be understood to interpret the token\r\n\r\nThere is a question on how profiles would be located if not just assumed to be informational to an existing RP/supplier relationship. One possibility might be to form a new IANA registry containing a mapping of profiles names (as used in this claim) to locations. Another might be for this claim structure to either be a text string identifying the document or a URL to the location.",
          "createdAt": "2019-10-03T08:57:22Z",
          "updatedAt": "2019-10-03T08:57:22Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Proposed #86 to address this.\r\n",
          "createdAt": "2020-12-09T04:59:54Z",
          "updatedAt": "2020-12-09T04:59:54Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "#86 addresses this",
          "createdAt": "2021-01-11T06:16:01Z",
          "updatedAt": "2021-01-11T06:16:01Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "MDU6SXNzdWU1MDA5NDk0Mjk=",
      "title": "HW Version claim",
      "url": "https://github.com/ietf-rats-wg/eat/issues/33",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "new claim"
      ],
      "body": "https://tools.ietf.org/html/draft-tschofenig-rats-psa-token-02 defines this in terms of EAN-13. This seems like a good thing to do.",
      "createdAt": "2019-10-01T14:49:16Z",
      "updatedAt": "2020-11-20T19:00:19Z",
      "closedAt": "2020-11-20T19:00:19Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed with #68 ",
          "createdAt": "2020-11-20T19:00:19Z",
          "updatedAt": "2020-11-20T19:00:19Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "MDU6SXNzdWU1MDA5NTEyODU=",
      "title": "Add boot seed claim",
      "url": "https://github.com/ietf-rats-wg/eat/issues/34",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "new claim"
      ],
      "body": "This is a random value that is generated each time the entity boots. \r\n\r\nhttps://tools.ietf.org/html/draft-tschofenig-rats-psa-token-02 defines this.",
      "createdAt": "2019-10-01T14:52:09Z",
      "updatedAt": "2021-05-25T06:17:40Z",
      "closedAt": "2021-05-25T06:17:40Z",
      "comments": [
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "It should be clearly documented that the seed value isn't a secret (if that is the case?). If so, then it would be more correct to call it a 'salt' rather than a 'seed'. A seed that seeds a PRNG or a key gen function is a secret since PRNGs have deterministic results given the same seed. ",
          "createdAt": "2019-12-03T19:03:07Z",
          "updatedAt": "2019-12-03T19:03:07Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Added in -06 draft. \r\n\r\nPrivate/public concern of Ned's is clearly addressed.\r\n\r\nA fix for the section number for it is coming in the -10 draft.\r\n",
          "createdAt": "2021-05-25T06:17:40Z",
          "updatedAt": "2021-05-25T06:17:40Z"
        }
      ]
    },
    {
      "number": 37,
      "id": "MDU6SXNzdWU1MDc5NDMwODE=",
      "title": "Sort out cti, jti and nonce claims from CWT and JWT",
      "url": "https://github.com/ietf-rats-wg/eat/issues/37",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready to close"
      ],
      "body": "Which CWT / JWT field is really the nonce?",
      "createdAt": "2019-10-16T15:54:41Z",
      "updatedAt": "2020-11-03T18:26:28Z",
      "closedAt": "2020-11-03T18:26:28Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in #42",
          "createdAt": "2020-02-29T17:02:39Z",
          "updatedAt": "2020-02-29T17:02:39Z"
        }
      ]
    },
    {
      "number": 38,
      "id": "MDU6SXNzdWU1MDc5NDQ0NzU=",
      "title": "OEM claim improvements",
      "url": "https://github.com/ietf-rats-wg/eat/issues/38",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready to close"
      ],
      "body": "Need references to IEEE OUI and to fill in details",
      "createdAt": "2019-10-16T15:57:03Z",
      "updatedAt": "2020-11-03T18:26:14Z",
      "closedAt": "2020-11-03T18:26:14Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #41 ",
          "createdAt": "2020-02-29T16:59:07Z",
          "updatedAt": "2020-02-29T16:59:07Z"
        }
      ]
    },
    {
      "number": 39,
      "id": "MDU6SXNzdWU1MDc5NDQ5NDc=",
      "title": "Origination claim needs refinement",
      "url": "https://github.com/ietf-rats-wg/eat/issues/39",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-10-16T15:57:49Z",
      "updatedAt": "2021-05-29T20:36:49Z",
      "closedAt": "2021-05-29T20:36:49Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Removed claim in #87",
          "createdAt": "2021-05-29T20:36:49Z",
          "updatedAt": "2021-05-29T20:36:49Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "MDU6SXNzdWU1MDc5NDU1MTg=",
      "title": "Add examples of submod and nested EAT tokens",
      "url": "https://github.com/ietf-rats-wg/eat/issues/40",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Last Call blocking"
      ],
      "body": "",
      "createdAt": "2019-10-16T15:58:50Z",
      "updatedAt": "2021-10-20T20:14:41Z",
      "closedAt": "2021-10-20T20:14:41Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "#132 ",
          "createdAt": "2021-10-09T19:11:37Z",
          "updatedAt": "2021-10-09T19:11:37Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with #132, though it wouldn't hurt to have a little more, maybe doubly nested.",
          "createdAt": "2021-10-20T20:14:40Z",
          "updatedAt": "2021-10-20T20:14:40Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "MDU6SXNzdWU1MTYxNzgzMTU=",
      "title": "Claims that go from verifier to relying party",
      "url": "https://github.com/ietf-rats-wg/eat/issues/44",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "EAT is used to convey claims from the entity / device to the verifier, but it can also be used to convey the output of the verifier to the relying party.\r\n\r\nFor example, the input to the verifier may be software measurements. The output of the verifier might be a Boolean that the measurements were correct. \r\n\r\nAlso, some implicit claims might be made explicit. For example, if the verifier knows that the device will never send an attestation is the boot and debug state are not locked down, then the verifier can add those claims.",
      "createdAt": "2019-11-01T15:20:55Z",
      "updatedAt": "2020-11-20T19:40:19Z",
      "closedAt": "2020-11-20T19:40:19Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Supplanted by #63",
          "createdAt": "2020-11-20T19:40:18Z",
          "updatedAt": "2020-11-20T19:40:18Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "MDU6SXNzdWU1MjY5NDYxMjM=",
      "title": "Align oemid and UEID with IDevID?",
      "url": "https://github.com/ietf-rats-wg/eat/issues/45",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "RIV uses IDevID which has a manufacturer and serial number. If this goes into attestation result then maybe it should be expressible in EAT.\r\n",
      "createdAt": "2019-11-22T02:15:32Z",
      "updatedAt": "2021-06-03T21:41:40Z",
      "closedAt": "2021-06-03T21:41:40Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed by #101",
          "createdAt": "2021-06-03T21:41:40Z",
          "updatedAt": "2021-06-03T21:41:40Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "MDU6SXNzdWU1MjcyODIzMDc=",
      "title": "(Signed) CoSWID, (Signed) ISO SWID & SUIT Manifest Claims",
      "url": "https://github.com/ietf-rats-wg/eat/issues/46",
      "state": "CLOSED",
      "author": "henkbirkholz",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-11-22T16:06:16Z",
      "updatedAt": "2021-05-28T18:29:00Z",
      "closedAt": "2021-05-28T18:29:00Z",
      "comments": [
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "Proposal:\r\n\r\nWrite-up for Claim Definitions for inclusion in drat-ietf-rats-eat (OR separate EAT flavor I-D as on option to expedite wglc/adoption process):\r\n\r\nAt minimum, nine additional CWT/EAT Claims MUST be defined.\r\n\r\n1. Unsigned CoSWID Evidence Claim (including corresponding Security Consideration)\r\n2. Signed CoSWID Evidence Claim including corresponding COSE guidance and Security Consideration)\r\n3. Unsigned CoSWID Payload Claim (including at minimum corresponding Security Consideration)\r\n4. Signed CoSWID Payload Claim (including at minimum corresponding COSE guidance and Security Consideration)\r\n5. Unsigned ISO SWID Evidence Claim (including at minimum corresponding Security Consideration)\r\n6. Signed ISO SWID Evidence Claim (including at minimum corresponding NIST SR 8060 guidance and Security Consideration)\r\n7. Unsigned ISO SWID Payload Claim (including at minimum corresponding Security Consideration)\r\n8. Signed ISO SWID Evidence Claim (including at minimum corresponding NIST SR 8060 guidance and Security Consideration), ad\r\n9. SUIT Manifest Claim (potentially signed and including corresponding Security Consideration)\r\n\r\nDave Waltermire and Henk Birkholz discussed this proposal with respect to:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/sacm/qrliM4reggLvDu0ft9ianypYFLM\r\nand\r\nhttps://mailarchive.ietf.org/arch/msg/rats/HKUTLMy843rcnhdjnLvnLx9NUuE\r\nrespectively.\r\n\r\nThe proposal includes the notion to avoid blocking or delaying changes to CBOR tag & content-type definitions of corresponding I-D via additions to the EAT Claim Definition set. Therefore expediting related I-D progress and assuring interoperability between SUIT, SACM & RATS at the same time.",
          "createdAt": "2019-11-22T16:30:46Z",
          "updatedAt": "2019-11-22T16:30:46Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "What is the difference between \"Evidence\" claims and \"Payload\" claims?",
          "createdAt": "2019-11-22T22:37:00Z",
          "updatedAt": "2019-11-22T22:37:00Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "Both term in the context of *SWID are defined here:\r\n\r\nhttps://tools.ietf.org/html/draft-ietf-sacm-coswid-13#section-2.3\r\n\r\nthere is an corresponding answer with more details in the rats email list here:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/rats/kn_fOc0qofTvyKlUvod1BSgpO3o",
          "createdAt": "2019-11-24T15:55:23Z",
          "updatedAt": "2019-11-24T15:55:23Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "#102",
          "createdAt": "2021-03-30T16:24:45Z",
          "updatedAt": "2021-03-30T16:24:45Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed with #102 ",
          "createdAt": "2021-05-28T18:29:00Z",
          "updatedAt": "2021-05-28T18:29:00Z"
        }
      ]
    },
    {
      "number": 49,
      "id": "MDU6SXNzdWU1NjM5ODU4Njg=",
      "title": "Disallow floating point time stamps in EAT?",
      "url": "https://github.com/ietf-rats-wg/eat/issues/49",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The nbf, exp and iat claims in CWT are allowed to be floating point. EAT inherits from them.\r\n\r\nFloating point is not universally supported by CPUs, particularly small ones for IoT. Even if the CPU supports it, the compiler and OS might not (I\u2019ve seen this happen once).\r\n\r\nI don\u2019t think fractional seconds are of any value for these claims, so we are forcing EAT decoders to support this for no good reason. I\u2019m not sure why CWT allowed floating point for these claims other than just inheriting from the CBOR epoch time format.\r\n\r\nIt is possible to use SW to decode a float and turn it into an integral value, but that is not fun to write and seems a waste.\r\n\r\nI\u2019d like to specify in EAT that floating point is not allowed for these claims.\r\n\r\n(Separately, we do need floating point for GPS location, but that claim will be used much less frequently and it is a good reason for using floating point).",
      "createdAt": "2020-02-12T13:02:55Z",
      "updatedAt": "2020-11-23T22:24:36Z",
      "closedAt": "2020-11-23T22:24:36Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolved by #61",
          "createdAt": "2020-11-23T22:24:36Z",
          "updatedAt": "2020-11-23T22:24:36Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "MDU6SXNzdWU1NjQ2NTUwNjY=",
      "title": "Are latitude and longitude optional in location claim?",
      "url": "https://github.com/ietf-rats-wg/eat/issues/50",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Clearly most part of the location claim are optional. For example you don't have to specify speed.  Should latitude and longitude also be optional? Can you just specify altitude if you want to?\r\n",
      "createdAt": "2020-02-13T12:37:39Z",
      "updatedAt": "2020-11-30T19:30:22Z",
      "closedAt": "2020-11-30T19:30:22Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "No. They should not. They are not optional for CBOR tag 103, nor for the W3C Geolocation API.",
          "createdAt": "2020-11-30T19:30:22Z",
          "updatedAt": "2020-11-30T19:30:22Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "MDU6SXNzdWU1NjQ2NjY5Mzk=",
      "title": "Should issuer, subject and audience claims allow URI tag?",
      "url": "https://github.com/ietf-rats-wg/eat/issues/51",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "RFC8392 doesn't say whether the URI tag #6.32 should or should not be used on the issuer, subject and audience claims. Without it the decoder would use a URI syntax matcher to decide between it being text or a URI.",
      "createdAt": "2020-02-13T13:00:19Z",
      "updatedAt": "2021-05-27T17:25:26Z",
      "closedAt": "2021-05-27T17:25:26Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #107 ",
          "createdAt": "2021-05-27T17:25:26Z",
          "updatedAt": "2021-05-27T17:25:26Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "MDU6SXNzdWU1NjQ2OTk0NzU=",
      "title": "Sort out CWT and COSE tag usage",
      "url": "https://github.com/ietf-rats-wg/eat/issues/53",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "When should the CWT and COSE tags be used with an EAT?",
      "createdAt": "2020-02-13T13:56:06Z",
      "updatedAt": "2020-11-27T18:42:27Z",
      "closedAt": "2020-11-27T18:42:27Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with #67 ",
          "createdAt": "2020-11-27T18:42:27Z",
          "updatedAt": "2020-11-27T18:42:27Z"
        }
      ]
    },
    {
      "number": 54,
      "id": "MDU6SXNzdWU1NjY4OTk3Mzc=",
      "title": "Accommodate \"GP unendorsed\" tokens",
      "url": "https://github.com/ietf-rats-wg/eat/issues/54",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Consider making an EAT a \"CWT Claims Set\" as defined in CWT (and JWT) to accommodate GP's desired for unsigned tokens.",
      "createdAt": "2020-02-18T13:39:54Z",
      "updatedAt": "2020-11-27T18:42:08Z",
      "closedAt": "2020-11-27T18:42:08Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with #67 and the eventual publication of Henk's UCCS draft.",
          "createdAt": "2020-11-27T18:42:08Z",
          "updatedAt": "2020-11-27T18:42:08Z"
        }
      ]
    },
    {
      "number": 55,
      "id": "MDU6SXNzdWU1NzIyNzg2NjE=",
      "title": "Clarify on seclevel/security-level in example",
      "url": "https://github.com/ietf-rats-wg/eat/issues/55",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Re:  https://tools.ietf.org/html/draft-ietf-rats-eat-03#appendix-A.2\r\n\r\n'seclevel' is showing up in the example.  Two issues:\r\n\r\na) seclevel is actually security-level in the current doc.\r\n\r\nb) For a submod is not providing attestation info in the form of an (endorsed) EAT, is there any value in providing security-level?  If it is there, what entity is performing the security level assessment?",
      "createdAt": "2020-02-27T18:42:27Z",
      "updatedAt": "2020-03-28T21:10:04Z",
      "closedAt": "2020-03-28T21:10:04Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed a). \r\n\r\nb) is the same as #58",
          "createdAt": "2020-03-19T18:19:40Z",
          "updatedAt": "2020-03-19T18:19:40Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "Close and will track via https://github.com/ietf-rats-wg/eat/issues/58",
          "createdAt": "2020-03-28T21:10:03Z",
          "updatedAt": "2020-03-28T21:10:03Z"
        }
      ]
    },
    {
      "number": 57,
      "id": "MDU6SXNzdWU1NzQ5NDEwMDI=",
      "title": "Consider 'context' claim",
      "url": "https://github.com/ietf-rats-wg/eat/issues/57",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See https://tools.ietf.org/html/draft-mandyam-rats-qwestoken-00#section-3.3\r\n\r\nAn optional context claim can provide information on intended usage to the recipient of the attestation token.",
      "createdAt": "2020-03-03T21:01:32Z",
      "updatedAt": "2020-11-30T19:46:17Z",
      "closedAt": "2020-11-30T19:46:17Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged #60 and closed.",
          "createdAt": "2020-11-30T19:46:17Z",
          "updatedAt": "2020-11-30T19:46:17Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "MDU6SXNzdWU1ODM5NTk3MzI=",
      "title": "Who assigns the security level of a submodule?",
      "url": "https://github.com/ietf-rats-wg/eat/issues/58",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "wontfix"
      ],
      "body": "",
      "createdAt": "2020-03-18T19:39:58Z",
      "updatedAt": "2021-08-23T14:46:10Z",
      "closedAt": null,
      "comments": [
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "My assumption that only the creator of the EAT that includes the nested structure can ultimately in charge of assigning a \"security-level\" (I am not super happy with that concept to begin with). There can be claims about the... claimed \"security level\" inside the nested structure itself, of course. But only trust relationships / trust decisions of the EAT creator that embeds these nested structures can provide a basis to convey a notion of trustworthiness here, I think. Thoughts? ",
          "createdAt": "2020-11-11T11:03:36Z",
          "updatedAt": "2020-11-11T11:03:36Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "MDU6SXNzdWU2NDM4Nzg3ODE=",
      "title": "EAT document should say it can be used for Attestation Results",
      "url": "https://github.com/ietf-rats-wg/eat/issues/63",
      "state": "CLOSED",
      "author": "mcr",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/ietf-rats-wg/architecture/issues/92 topic 3 has some points about EAT.\r\n\r\nTopic 3: EAT. If accurate, I'd like to see a clear acknowledgement that the Verifier may need to act as an Attester for the Relying Party since I'd like to then see specifically how the IETF EAT specification covers this circumstance. In other words, for an EAT that represents an AttestationResult, would the Evidence for the Verifier be embedded or discovered? If embedded, how are submods distinguished for the Verifier's Evidence versus the AttestationResult's embedded claims, including nested EAT's?",
      "createdAt": "2020-06-23T14:15:00Z",
      "updatedAt": "2021-05-20T18:20:59Z",
      "closedAt": "2021-05-20T18:20:58Z",
      "comments": [
        {
          "author": "gkostal",
          "authorAssociation": "NONE",
          "body": "@mcr , thanks for opening this issue in EAT based on a portion of an issue I opened against the architecture document.  \r\n\r\nI would title this issue ***\"EAT guidance on how to share the information used to establish trust of Verifier by a Relying Party?\"***\r\n\r\nUsing the nomenclature of the IETF RATS Architecture document, I believe the following is true:\r\n1. EAT defines the claims used as \"Evidence\" or \"Attestation Results\" in the [RATS architecture diagram](https://www.ietf.org/id/draft-ietf-rats-architecture-04.html#name-architectural-overview)\r\n1. The \"Verifier\" in the RATS architecture can be a separate entity from the Relying Party.  Hence, it's necessary that the Verifier be able to provide information to the Relying Party to establish this trust.  The [Trust Model](https://www.ietf.org/id/draft-ietf-rats-architecture-04.html#name-trust-model) section in the RATS Architecture document discusses this requirement.\r\n1. This information may take the form of \"Evidence\" describing the Verifier's execution environment, which is distinct from the \"Evidence\" it analyzes to produce a specific \"Attestation Result\".\r\n\r\nMany (most? all?) \"Verifiers\" will need to share this trust establishing information with Relying Parties.  A Relying Party may work with more than one \"Verifier\".  Is it in scope for EAT to give some guidance on how a Verifier shares this information?  If not EAT, is it (or should it be) in scope for any other standardization process?  Left unaddressed, each Verifier will implement an ad-hoc mechanism, leaving Relying Parties unable to trust EAT tokens without first writing vendor specific logic for each Verifier they work with.\r\n",
          "createdAt": "2020-06-26T16:15:50Z",
          "updatedAt": "2020-06-26T16:15:50Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "I strongly recommend not to mix conceptual messages here. While composite evidence can include attestation results and vice versa, I think that actually makes it even more important to differentiate theses very clearly and consistently. Yes, we need a corresponding definition of Claims for CWT and (CWT Claims Sets maybe) in order to create unified Attestation Results. Alas, if we start to mix many different meanings under the \"catch-all\" concept that is EAT, it will become harder and harder to figure out what an EAT instance is actually intended to represent and facilitate. Trust in understanding the meaning of an EAT is quite vital to RATS.",
          "createdAt": "2020-11-11T10:56:54Z",
          "updatedAt": "2020-11-11T10:56:54Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Very many EAT claims will be passed through the Verifier to the RP. After all the original EAT design didn't distinguish the Verifier from the RP. It would be silly and confusing to redefine each claim for Results when they are already defined for Evidence.\r\n\r\nThere will of course be some claims that don't belong in evidence and vice versa. Maybe some claims will have slightly different semantics as Results than as Evidence, but I can't think of anything obvious so far.\r\n\r\nWe could use Giri's context claim (see #60) to distinguish results from evidence. We'd add a new value to indicate the EAT is Attestation Results. That or we have a new, perhaps mandatory claim, that says whether the EAT (CWT, JWT or UCCS) is Evidence or Results.\r\n",
          "createdAt": "2020-11-20T19:23:35Z",
          "updatedAt": "2020-11-20T19:23:35Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "This supplants #44",
          "createdAt": "2020-11-20T19:39:57Z",
          "updatedAt": "2020-11-20T19:39:57Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Proposal to address this in #103 ",
          "createdAt": "2021-03-30T17:12:56Z",
          "updatedAt": "2021-03-30T17:12:56Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #103 ",
          "createdAt": "2021-05-20T18:20:58Z",
          "updatedAt": "2021-05-20T18:20:58Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "MDU6SXNzdWU2NDQ3ODY3OTQ=",
      "title": "looking for example of EAT with PCR quote",
      "url": "https://github.com/ietf-rats-wg/eat/issues/64",
      "state": "CLOSED",
      "author": "mcr",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "It would be good to have a clear example on how to carry a TPM-2 style PCR Quote in as an example of evidence carried by EAT.\r\n",
      "createdAt": "2020-06-24T17:31:11Z",
      "updatedAt": "2021-08-21T19:16:41Z",
      "closedAt": "2021-08-21T19:16:41Z",
      "comments": [
        {
          "author": "tomoveu",
          "authorAssociation": "NONE",
          "body": "Indeed @mcr . Thank you for rising this issue. Would be great to have an example how a TPM2 Quote fits with EAT or RATS in general. Open-source code that we can see and test.",
          "createdAt": "2020-07-01T17:33:00Z",
          "updatedAt": "2020-07-01T17:33:00Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "Hi Dimi, \r\nwith respect to running code, at the moment we decompose TPM structures in https://github.com/Fraunhofer-SIT/charra\r\n\r\nThe corresponding CBOR items are currently composed according to the following CDDL spec:\r\n\r\nhttps://ietf-rats.github.io/draft-birkholz-rats-reference-interaction-model/draft-birkholz-rats-reference-interaction-model.html#section-appendix.a\r\n\r\nThe arrays used include label notation for the human reader. These can be used 1:1 as Claim definitions for EAT today (via a nested Claims Set) called tpm2-quote-request and tpm2-quote response, for example.\r\n\r\nIf there is demand for that, it would be relatively straight forward for us to add corresponding CDDL in the EAT style that  to the I-D. Everything needed is already defined in that section.\r\n\r\n",
          "createdAt": "2020-07-01T17:43:15Z",
          "updatedAt": "2020-07-01T17:43:15Z"
        },
        {
          "author": "tomoveu",
          "authorAssociation": "NONE",
          "body": "Thank you, Henk!\r\n\r\nHere is the recording of your explanation on the TPMdev call - [https://developers.tpm.dev/posts/7112151](https://developers.tpm.dev/posts/7112151) Made things very clear.\r\n\r\nThe link to the document(Appendix A) also helped a lot. What exactly do you think can go in Appendix B as a format regarding TPM2 Quote & EAT?\r\n\r\nps: I tried tagging you on the post in the forum, but it seems you do not have an account there or maybe you use a nickname and I could not recognize you",
          "createdAt": "2020-07-01T22:28:27Z",
          "updatedAt": "2020-07-01T22:30:26Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "https://mailarchive.ietf.org/arch/msg/rats/q4yiqt7I6qkk49bwwrkul2u6mFg/",
          "createdAt": "2021-08-21T19:16:41Z",
          "updatedAt": "2021-08-21T19:16:41Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "MDU6SXNzdWU3MjQ5NTUxNjg=",
      "title": "nested token submods should be byte-string wrapped",
      "url": "https://github.com/ietf-rats-wg/eat/issues/65",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Right now, the second type of submod, the embedding of a full signed EAT token inside surrounding token is \"direct\".\r\n\r\nI think it needs to be wrapped in a byte string to make it reasonable to implement. When decoding the surrounding token, the nested token will be returned as a byte string that can be easily passed to the COSE/CWT/EAT decoder as these will typically take a byte string as input. \r\n\r\nIf it is not a byte string, then you have to convince the CBOR decoder to return the CWT Tag as a byte string even though it is not a byte string or the same or related instance of the CBOR decoder used to decode the outside EAT must be used to decode the inside EAT.\r\n\r\nNo semantics would change. This is only for a practical consideration of the APIs used for decoding CBOR, COSE, CWT and EAT.",
      "createdAt": "2020-10-19T20:34:05Z",
      "updatedAt": "2020-11-27T18:43:41Z",
      "closedAt": "2020-11-27T18:43:41Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with #67 ",
          "createdAt": "2020-11-27T18:43:41Z",
          "updatedAt": "2020-11-27T18:43:41Z"
        }
      ]
    },
    {
      "number": 74,
      "id": "MDU6SXNzdWU3NDMwNzExMzE=",
      "title": "Extensibility of claims' semantics",
      "url": "https://github.com/ietf-rats-wg/eat/issues/74",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If I wanted to expand the semantics of \"Debug Disable\" or \"Security Level\" with my own local semantics, how would I do that?\r\n\r\nShould I create a new claim?  Or could I extend the claim\u2019s type?  If the latter, how? \r\n\r\nIt\u2019d be useful that the doc explicitly stated the rules of this game.\r\n",
      "createdAt": "2020-11-14T20:10:56Z",
      "updatedAt": "2020-11-25T18:26:45Z",
      "closedAt": "2020-11-25T18:26:45Z",
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@laurencelundblade  [comment on the mailing list](https://mailarchive.ietf.org/arch/msg/rats/DVCR2E_Dozx0JhHz9Pd5w3RdADU/) :\r\n\r\n\r\nI don\u2019t think these should be extensible. You can\u2019t make up\r\nyour own corporate bond rating category or restaurant hygene\r\nrating category and such. If that is allowed the scheme becomes\r\nmuch less useful. \r\n\r\nI\u2019ve added text for that in this PR #73  . It says that when you can\u2019t live\r\nwith the defined security level schema, omit the claim, make up\r\nyour own claim or do both.\r\n\r\nAlso, see this old but unresolved discussion #4 on security level.\r\nOne thing nice about a very simple three-level scheme is that it\r\nbecomes clear this is a very rough top-level characterization only.\r\n```",
          "createdAt": "2020-11-14T20:18:08Z",
          "updatedAt": "2020-11-14T20:20:34Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed with #82 and #73 ",
          "createdAt": "2020-11-25T18:26:45Z",
          "updatedAt": "2020-11-25T18:26:45Z"
        }
      ]
    },
    {
      "number": 75,
      "id": "MDU6SXNzdWU3NDMwNzExOTk=",
      "title": "Nonce missing from JSON labels",
      "url": "https://github.com/ietf-rats-wg/eat/issues/75",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There\u2019s a typo in Section 4.3.1: the \u201cnonce\u201d label is missing.\r\n",
      "createdAt": "2020-11-14T20:11:15Z",
      "updatedAt": "2020-11-20T19:37:27Z",
      "closedAt": "2020-11-20T19:37:27Z",
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@laurencelundblade [comment on the mailing list](https://mailarchive.ietf.org/arch/msg/rats/DVCR2E_Dozx0JhHz9Pd5w3RdADU/):\r\n\r\nThe JWT nonce was already in the IANA registry for JWT. I added CDDL for it and note that some of the CDDL in EAT is for things defined elsewhere before there was CDDL.  See this PR #72 .",
          "createdAt": "2020-11-14T20:22:09Z",
          "updatedAt": "2020-11-14T20:22:09Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed with merge of #72 ",
          "createdAt": "2020-11-20T19:37:27Z",
          "updatedAt": "2020-11-20T19:37:27Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "MDU6SXNzdWU3NDMwNzEzOTY=",
      "title": "JSON:CBOR equivalency",
      "url": "https://github.com/ietf-rats-wg/eat/issues/76",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The JSON story is nearly OK, except for two things:\r\n* the Submods claim where the JSON:CBOR equivalency is broken by allowing unbounded\r\nint keys in CBOR that can't have an equivalent in JSON;\r\n* the StringOrURI type whose semantics can\u2019t be preserved when transcoding.\r\n\r\n(Possibly the former could be addressed by only allowing string labels, the latter by declaring we only deal with strings.)\r\n",
      "createdAt": "2020-11-14T20:12:28Z",
      "updatedAt": "2020-11-20T19:03:26Z",
      "closedAt": "2020-11-20T19:03:26Z",
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@laurencelundblade [comment on the mailing list](https://mailarchive.ietf.org/arch/msg/rats/DVCR2E_Dozx0JhHz9Pd5w3RdADU/):\r\n\r\nPushed a fix for StringOrURI to master.\r\n\r\nMade submodule names string only as part of this PR #67 . Was thinking that they should only be strings myself. \r\n",
          "createdAt": "2020-11-14T20:23:45Z",
          "updatedAt": "2020-11-14T20:23:45Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Also this fix: https://github.com/ietf-rats-wg/eat/commit/c39f92f49675a27aa67ed3ba65143cbfc002c38f",
          "createdAt": "2020-11-20T19:03:26Z",
          "updatedAt": "2020-11-20T19:03:26Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "MDU6SXNzdWU3NDMwNzE0Njk=",
      "title": "CWT CDDL needs some adjusting",
      "url": "https://github.com/ietf-rats-wg/eat/issues/77",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The CDDL for CWT claims needs some adjusting: it\u2019d allow only one CWT claim at a time in the EAT map.\r\n\r\nScaling up a bit, we should probably have a CDDL socket for EAT extensions in the top-level map - and exercise this extension point starting from CWT claims.",
      "createdAt": "2020-11-14T20:12:55Z",
      "updatedAt": "2020-11-18T19:49:50Z",
      "closedAt": "2020-11-18T19:49:50Z",
      "comments": []
    },
    {
      "number": 78,
      "id": "MDU6SXNzdWU3NDMwNzE1Mzg=",
      "title": "Add normative language to the CBOR interop section",
      "url": "https://github.com/ietf-rats-wg/eat/issues/78",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The CBOR interoperability section should have RFC2119/8174 language where needed.  Please also double check that there are no copy-pasted requirements from other documents without an explicit ref -- e.g., the stray \"Duplicate map keys are not allowed.\" should have a ref to 7049.\r\n",
      "createdAt": "2020-11-14T20:13:19Z",
      "updatedAt": "2021-01-16T20:42:55Z",
      "closedAt": "2021-01-16T20:42:55Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed by #88 ",
          "createdAt": "2021-01-16T20:42:55Z",
          "updatedAt": "2021-01-16T20:42:55Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "MDU6SXNzdWU3NDMwNzE2MjU=",
      "title": "Debug Disable naming considerations",
      "url": "https://github.com/ietf-rats-wg/eat/issues/79",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Here are a couple of typographic thoughts about Debug Disable claim.\r\n\r\nThe \"disable\" in \"Debug disable\" looks redundant: it'd be better renaming it as just \"Debug\" or \"Debug status\u201d.\r\n\r\nA bit more consistent wording wouldn\u2019t hurt too. e.g.:\r\n* \"Not disabled\" => \u201cenabled\u201d -- this, combined with the above suggestion, would move us from \"debug disable not disabled\" to a simpler to digest \"debug enabled\" :-)\r\n* \"Permanent disable\" => \"disabled permanently\"\r\n* \"Full permanent disable\" => \"disabled fully and permanently\"\r\n\r\n",
      "createdAt": "2020-11-14T20:13:47Z",
      "updatedAt": "2020-11-25T18:26:01Z",
      "closedAt": "2020-11-25T18:26:00Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed with #82 ",
          "createdAt": "2020-11-25T18:26:00Z",
          "updatedAt": "2020-11-25T18:26:00Z"
        }
      ]
    },
    {
      "number": 83,
      "id": "MDU6SXNzdWU3NTEwODM2MzQ=",
      "title": "location claim doesn't fully specify heading and speed",
      "url": "https://github.com/ietf-rats-wg/eat/issues/83",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "WGS84 seems only to cover latitude and longitude\r\n",
      "createdAt": "2020-11-25T19:58:27Z",
      "updatedAt": "2020-11-30T20:46:50Z",
      "closedAt": "2020-11-30T20:46:49Z",
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "Current text states \"The location coordinate claims are consistent with the WGS84 coordinate system\", which is in line with comparable standards such as https://www.w3.org/TR/geolocation-API/#coordinates_interface.  This does not mean that WGS84 defines exactly how implementations derive speed or altitude (WGS84 actually defines both geodetic and orthometric height).\r\n\r\nNote also that different implementations may leverage WGS84 coordinates, but allow for runtime configuration for how altitude calculation is performed.  See https://docs.microsoft.com/en-us/uwp/api/windows.devices.geolocation.altitudereferencesystem?view=winrt-19041 as an example.\r\n\r\nI would recommend that the EAT spec not be overly prescriptive in defining how derived values such as altitude and speed are actually calculated.",
          "createdAt": "2020-11-25T21:34:10Z",
          "updatedAt": "2020-11-25T21:34:10Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Corrected the title to say heading and speed, not altitude and speed, are the problem. There is no specification for heading and speed and no specification at all is a problem.\r\n\r\nI think this should just use tag 103 which seems to be a good simple WGS84-based specification of lat, long, altitude and accuracy. \r\n\r\nHeading and speed aren't really location. They should be in a different claim called \"travel\" or such.\r\n\r\nHeading and speed were included because Qualcomm's location API included them. They can still be included in a token, but as part of different claim.\r\n",
          "createdAt": "2020-11-27T20:22:00Z",
          "updatedAt": "2020-11-27T20:22:00Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": ">Heading and speed were included because Qualcomm's location API included them. They can still be included in a token, but as part of different claim\r\n\r\nActually that was not my intention when I wrote this section - these attributes were included to maintain compatibility with W3C geoloc API coordinates I/F (https://www.w3.org/TR/geolocation-API/#coordinates_interface), which dates back to 2008.  Maintaining compatibility with this interface has the additional benefit of allowing browsers to leverage existing geoloc. API permissions framework to suppress all geoloc-related information in the attestation if so required by the end user - see https://www.w3.org/TR/webauthn/#browser-permissions-framework-extensions for a description of a comparable example, the location extension in WebAuthn API.  \r\n\r\nNote also that the W3C Geoloc API has been defined at a level of abstraction beyond platform-specific location enablers (for better or worse).  If we go back to 2008, this meant that the positions I/F was meant to be compatible with BREW IPosdet (maybe this is what you were referring to as the \"Qualcomm location API\"?) and JSR 179.   The compatibility is still maintained with more recent enablers such as Android Location Manager.  So keeping compatibility with the W3C coordinates I/F should allow for maximum leverage across platforms.\r\n\r\nI would not recommend bifurcating this claim.",
          "createdAt": "2020-11-28T19:27:45Z",
          "updatedAt": "2020-11-28T19:27:45Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "OK. Fixed this up with #85 \r\nThanks for the W3C reference.\r\nI will merge this in a day or two as it seems straight forward and we are aligned.\r\n\r\nAlso, I started to implement tag 103, but have come to not like it because it allows *any number* format including things like decimal fractions. There is no need for anything but double and single precision float numbers here. Anything else just causes interoperability problems.",
          "createdAt": "2020-11-30T19:42:22Z",
          "updatedAt": "2020-11-30T19:42:22Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with #85",
          "createdAt": "2020-11-30T20:46:49Z",
          "updatedAt": "2020-11-30T20:46:49Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "MDU6SXNzdWU4MDc1NzEwNDI=",
      "title": "Modify wording for location claim",
      "url": "https://github.com/ietf-rats-wg/eat/issues/91",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As per sec. 3.13 of ver. 8:\r\n\r\nFrom Santeri Paavolainen:\r\n\r\n\"If the device is stationary, the heading is NaN (floating-point not-a-number).\"\r\n\r\nBut heading -- for some devices -- may be accurately determined even when the device is stationary. For example, a directional radio mast (permanent or adjustable orientation) is (at least hopefully) very stationary, but it includes an accurate directional indication.\r\n\r\nI would suggest writing this as\r\n\r\n\"If the device's heading can not be accurately determined, the heading is NaN (floating-point not-a-number).\"\r\n\r\nI would also point out that many devices may have an initial accurate heading, but it may drift over time if they are stationary even if they can be accurately positioned. For example, a gyrocompass without an orientation reset will lose its accuracy over time (i.e. it will drift, but the drift may be not consistent so in reality its the error that increases). Is there a consideration to include orientation accuracy in a way similar to positional accuracy?\r\n",
      "createdAt": "2021-02-12T21:53:53Z",
      "updatedAt": "2021-06-07T22:38:43Z",
      "closedAt": "2021-06-07T22:38:43Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Need to check in on what WGS84 says about this. Consistency with it is critical. Note also that the references to WGS84 are broken, even the Wikipedia ones.",
          "createdAt": "2021-05-20T22:39:19Z",
          "updatedAt": "2021-05-20T22:39:19Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Still haven't figured out where WGS84 is these days, but W3C definitely agrees with the text in the document NOT with the proposed wording. I would like to leave it as is unless some explanation is given for why this should diverge from W3C.\r\n",
          "createdAt": "2021-05-24T04:53:59Z",
          "updatedAt": "2021-05-24T04:54:10Z"
        }
      ]
    },
    {
      "number": 92,
      "id": "MDU6SXNzdWU4MTE3MTQzNTg=",
      "title": "sec level and debug state values should be strings in JSON",
      "url": "https://github.com/ietf-rats-wg/eat/issues/92",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "They should not be 1, 2, 3, but \"enabled\", \"restricted\" and such for the sake of human readability.",
      "createdAt": "2021-02-19T05:45:35Z",
      "updatedAt": "2021-05-27T17:31:30Z",
      "closedAt": "2021-05-27T17:31:30Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #106 ",
          "createdAt": "2021-05-27T17:31:29Z",
          "updatedAt": "2021-05-27T17:31:29Z"
        }
      ]
    },
    {
      "number": 94,
      "id": "MDU6SXNzdWU4MjAzMDIxODY=",
      "title": "json string names for age and timestamp in location",
      "url": "https://github.com/ietf-rats-wg/eat/issues/94",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "string names are not correct for JSON for parts of location",
      "createdAt": "2021-03-02T19:07:47Z",
      "updatedAt": "2021-05-27T17:31:11Z",
      "closedAt": "2021-05-27T17:31:11Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually seems like it is all of the location claim that is lacking string labels.\r\n\r\nThis is fixed in #106",
          "createdAt": "2021-05-25T19:08:21Z",
          "updatedAt": "2021-05-25T19:08:21Z"
        }
      ]
    },
    {
      "number": 95,
      "id": "MDU6SXNzdWU4MjIxOTE4OTU=",
      "title": "duplicate text in profile description",
      "url": "https://github.com/ietf-rats-wg/eat/issues/95",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "```suggestion\r\n```\r\nthese two lines are duplicates of L973-974\r\n\r\n_Originally posted by @thomas-fossati in https://github.com/ietf-rats-wg/eat/pull/93#discussion_r584310735_",
      "createdAt": "2021-03-04T14:36:38Z",
      "updatedAt": "2021-03-05T01:01:02Z",
      "closedAt": "2021-03-05T01:01:02Z",
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed by editing the .md file.  Did not edit PR since it was already merged.",
          "createdAt": "2021-03-05T01:01:02Z",
          "updatedAt": "2021-03-05T01:01:02Z"
        }
      ]
    },
    {
      "number": 96,
      "id": "MDU6SXNzdWU4MjIxOTMzMTg=",
      "title": "profile OIDs (and URIs) should be \"absolute\"",
      "url": "https://github.com/ietf-rats-wg/eat/issues/96",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "```suggestion\r\nA profile is identified by either an absolute URI {{!RFC3896}} or\r\nan absolute OID (ASN.1 Type \"OBJECT IDENTIFIER\").\r\n```\r\n\r\n_Originally posted by @thomas-fossati in https://github.com/ietf-rats-wg/eat/pull/93#discussion_r584311652_",
      "createdAt": "2021-03-04T14:38:09Z",
      "updatedAt": "2021-03-26T17:07:29Z",
      "closedAt": "2021-03-26T17:07:29Z",
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There are two reasons for this:\r\n1. a philosophical one: we want the profile claim to not clash;\r\n2. a technical one: by unwrapping the CBOR tag (i.e., `~oid`) the decoder looses the ability to distinguish between \"absolute\" OIDs and relative OIDs.  So, we need to explicitly say which type is legal.  Given point 1. above it's the absolute form that should be preferred.",
          "createdAt": "2021-03-04T14:42:38Z",
          "updatedAt": "2021-03-04T14:42:38Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Given point 1. above it's the absolute form that should be preferred.\r\n\r\nNote that this is not ideal since it removes the ability to express PENs in a succinct manner.\r\n",
          "createdAt": "2021-03-04T16:06:22Z",
          "updatedAt": "2021-03-04T16:06:22Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "I think I prefer the absolute for simplicity and because it doesn't save that much.\r\n\r\nConsider the PEN 50000.2 that might be used to indicate a profile. PEN assignments are up over 50,000 now. \r\n\r\nAs an absolute OID this is 1.3.6.1.4.1.50000.2 and encodes in 11 bytes.\r\n\r\nIf we allow use of the relative PEN, then by not unwrapping then we get 3 bytes for the tag and 6 bytes for the RDN for a total of 9. We're saving 2 bytes for PENs.  But this adds 3 bytes for absolute OIDs.\r\n\r\nIt is always possible to go between a PEN and an absolute OID because the PEN prefix is well known. Are there any use cases where we need relative OIDs where the prefix is not well known? Maybe there is some OID prefix for the whole token from some context outside the token? Probably not I think. That would also be taking EAT further down the ASN.1 path where I hope not to go.\r\n",
          "createdAt": "2021-03-04T17:32:03Z",
          "updatedAt": "2021-03-04T17:32:03Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If we allow use of the relative PEN, then by not unwrapping then we get 3 bytes for the tag and 6 bytes for the RDN for a total of 9. We're saving 2 bytes for PENs. But this adds 3 bytes for absolute OIDs.\r\n\r\nI think it's two bytes for the tag not three, but that doesn't change the substance of your (very reasonable) conclusion.\r\n\r\n> Are there any use cases where we need relative OIDs where the prefix is not well known? Maybe there is some OID prefix for the whole token from some context outside the token? Probably not I think.\r\n\r\nI don't think so too.  Let's go with absolute then :-)\r\n\r\n",
          "createdAt": "2021-03-04T18:56:15Z",
          "updatedAt": "2021-03-04T18:56:15Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in https://github.com/ietf-rats-wg/eat/commit/41685066d17a580679e7bdb038d1a30042966920",
          "createdAt": "2021-03-26T17:07:29Z",
          "updatedAt": "2021-03-26T17:07:29Z"
        }
      ]
    },
    {
      "number": 97,
      "id": "MDU6SXNzdWU4MjI2MzY2NDE=",
      "title": "Sec. 1.3:  revise language on root-of-trust",
      "url": "https://github.com/ietf-rats-wg/eat/issues/97",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\"It is assumed that any entity that can create an   EAT does so by means of a dedicated root-of-trust (RoT).\"\r\n\r\nRecommend removing this sentence all-together.  There are examples of attestations that are created in user space (e.g. Android SafetyNet).",
      "createdAt": "2021-03-05T00:49:37Z",
      "updatedAt": "2021-05-20T22:13:04Z",
      "closedAt": "2021-05-20T22:13:04Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed for draft -10.",
          "createdAt": "2021-05-20T22:13:04Z",
          "updatedAt": "2021-05-20T22:13:04Z"
        }
      ]
    },
    {
      "number": 98,
      "id": "MDU6SXNzdWU4MjI2Mzk3ODM=",
      "title": "Can UEID change during lifecycle of entity?",
      "url": "https://github.com/ietf-rats-wg/eat/issues/98",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Sec. 3.4:  \"The UEID should be permanent.\"\r\n\r\nFIDO IoT Device Onboard spec uses GUID for UEID (https://fidoalliance.org/specs/FDO/FIDO-Device-Onboard-RD-v1.0-20201202.html#guid, https://fidoalliance.org/specs/FDO/FIDO-Device-Onboard-RD-v1.0-20201202.html#DevAttnProt).  However, the UEID is only permanent with respect to the lifecycle state of the entity.\r\n\r\nCurrent text is a 'should' requirement, so in one possible reading of the EAT doc the FIDO spec is compliant.  However, a clarification may be in order.\r\n\r\nSuggested additional text:  \r\n\r\n\"In some attestation situations, exposure of the permanent UEID creates an undesirable correlation between subsequent attestations.  In such situations, a temporary UEID of type RAND can be used so long as the EAT recipient can derive the generator of the EAT without the permanent UEID, such as by external mapping to the temporary UEID, or by using a signature with cryptographic indistinguishability.  The same device / entity should use a permanent UEID when such correlation is not an issue.\"\r\n\r\n",
      "createdAt": "2021-03-05T00:57:20Z",
      "updatedAt": "2021-06-03T21:41:18Z",
      "closedAt": "2021-06-03T21:41:18Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "What about a UEID and an SUEID, where the UEID is permanent and SUEID is semi-permanent? An EAT can have both, one, or the other. The RP use which ever one they want when there are both.\r\n\r\nSemi-permanent generally means that the UEID may change when a device changes owners, managers, is factory reset or such. To know exactly when it is reset consult the profile document.\r\n\r\nAnother privacy solution is to authenticate the RP and generate an RP-specific UEID. That is what Haven Token did.\r\n\r\nOthers may have other problems with the UEID permanence and maybe other solutions are possible for those other problems.\r\n",
          "createdAt": "2021-03-08T17:55:38Z",
          "updatedAt": "2021-03-08T17:55:38Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Coxed by #101",
          "createdAt": "2021-06-03T21:41:17Z",
          "updatedAt": "2021-06-03T21:41:17Z"
        }
      ]
    },
    {
      "number": 100,
      "id": "MDU6SXNzdWU4MzIyMjI4MjY=",
      "title": "Use normative language in profile expectations?",
      "url": "https://github.com/ietf-rats-wg/eat/issues/100",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Last Call blocking"
      ],
      "body": "All the things in the profile are described as \"should\" right now.\r\n\r\nIf we are going to start using \"must\" then we are describing a formal protocol for creating profile documents to the degree that some profiles comply with EAT and some don't. That seems like an overreach and a tall order.\r\n\r\nMy leaning is to leave it as \"should\", but we can have a larger discussion about more formalism here. Maybe do this by filing a separate issue for it.\r\n\r\n_Originally posted by @laurencelundblade in https://github.com/ietf-rats-wg/eat/pull/99#discussion_r594585117_",
      "createdAt": "2021-03-15T21:53:22Z",
      "updatedAt": "2021-10-31T20:08:57Z",
      "closedAt": "2021-10-31T20:08:57Z",
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing issue as there has been no proposals, much less discussion on whether there should be any normative requirements for profile documents.  Moreover, as per Sec. 5.18 of https://datatracker.ietf.org/doc/draft-ietf-rats-eat/:\r\n\r\n\"There is no requirement that the named document be publicly accessible.  The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.\"\r\n\r\nIt will be difficult to enforce normative requirements on a private profile.\r\n\r\nIn addition, in Sec.7:\r\n\r\n\"This EAT specification does not guarantee that implementations of it will interoperate. \"",
          "createdAt": "2021-10-31T20:08:57Z",
          "updatedAt": "2021-10-31T20:08:57Z"
        }
      ]
    },
    {
      "number": 108,
      "id": "MDU6SXNzdWU5MDU4Njg3MDM=",
      "title": "Add a claim that describes measurement results",
      "url": "https://github.com/ietf-rats-wg/eat/issues/108",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In some scenarios, it is desirable that only the positive or negative result of a measurement, possibly only a Boolean value, is reported in a token. This is in contrast to reporting the measurements (e.g., the hashes) themselves.\r\n\r\nOne scenarios is when a TEE or similar is able to conduct a full measurement and evaluation of that measurement on some other part of the system.\r\n\r\nAnother is when a Verifier checks the measurement against reference values and only reports the result to the Relying Party.",
      "createdAt": "2021-05-28T18:35:36Z",
      "updatedAt": "2021-07-15T05:21:28Z",
      "closedAt": "2021-07-15T05:21:27Z",
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "Would the following (CDDL) work?\r\n\r\nmeasurement-type = {\r\n   ? check => boolean, / Set true if measurement met criteria for pass\r\n   ? hash => bstr(32..64) / Variable-length hash; must be minimum of 256\r\n   }\r\n\r\nmeasurement = {\r\n     value => measurement-type\r\n    }  / Array of measurements\r\n\r\nThis way each measurement value can provide a check, hash, both, or neither (e.g. if the measurement wasn't carried out for some reason).",
          "createdAt": "2021-06-07T22:48:14Z",
          "updatedAt": "2021-06-07T22:48:14Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "I think there should be digest claim that can be used for evidence claims (and for attestation results too). Coswid defines hash-entry which is a tuple consisting of a digest value and a hash algorithm. \r\n\r\nFor firmware measurements (anything that doesn't have a filesystem) coswid is problematic because measurements have to be given a filesystem context. Given there is a submods context already, it doesn't make sense to require a filesystem context that requires some sort of mapping to a device context. E.g. submod-name has to match file-name or whatever.\r\n\r\nBuilding hash-entry into an array of hash-entry has value for algorithm agility. A device can produce multiple digests of the same object with different algorithms. The overhead is small in CDDL. Device vendors don't have to implement algorithm agility, but it is good for those who do.\r\n\r\nIf the 'digests' type is a stand-alone claim then it can be combined with other claims (such as boolean result) or can stand-alone as a digest of attestation results. \r\n\r\nIf there were a measurement-name claim then it would be easier to associate the name of the object with the digest of the object. submod-name could be used - it would be helpful if it was a bstr / tstr instead of just tstr so its easier to assign numeric names. \r\n\r\n",
          "createdAt": "2021-06-08T00:38:08Z",
          "updatedAt": "2021-06-08T00:38:08Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "After a side discussion with Henk, folks from Arm and other, I took the approach of pluggable evidence formats. EAT doesn't have one format for evidence, it has a place where it can carry evidence formats defined by others.\r\n\r\nHenk and the Arm folks are working on CoRIM and CoMID as an alternative to CoSWID. It's for the reason you mention -- CoSWID is file oriented.\r\n\r\nI concluded that CoSWID is here to stay and must be accommodated, but that it isn't sufficient, so I took the pluggable approach. \r\n\r\nI don't think there's a draft for CoMID / CoRIM yet. Try here: https://github.com/ietf-rats/draft-birkholz-rats-corim/blob/master/draft-birkholz-rats-corim.md.  I don't have an opinion of whether this is good, or meets your needs or such. Maybe you want to define your own format instead. If so, it can plug into EAT. :-)\r\n\r\nAll that said, the point of this open issue is not about carrying hash values. It is about reporting to the RP whether the measurements compared correctly to the reference values. Perhaps just a simple Boolean, but probably more.\r\n\r\n\r\n\r\n",
          "createdAt": "2021-06-08T18:21:24Z",
          "updatedAt": "2021-06-08T18:21:24Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with #112 ",
          "createdAt": "2021-07-15T05:21:27Z",
          "updatedAt": "2021-07-15T05:21:27Z"
        }
      ]
    },
    {
      "number": 110,
      "id": "MDU6SXNzdWU5MTk4Njc4Mzg=",
      "title": "Add a recommendation that claim value should not be interdependent",
      "url": "https://github.com/ietf-rats-wg/eat/issues/110",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "wontfix"
      ],
      "body": "It is probably better that every claim value stand on its own as much as possible. Claims should be designed this way. If some attribute or information about an entity needs several data items to describe it, it should be all in one claim rather than in several. This is to reduce interdependence between claims.\r\n\r\nI'm not completely sure that is necessary, but it seems like a good idea.",
      "createdAt": "2021-06-13T19:41:04Z",
      "updatedAt": "2021-08-23T14:46:40Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't know whether this can work as general guidance.  Take for instance something like an app dependency declared in an Android manifest (i.e. intent).  If the attestable entity in question is that Android application, it would have to enumerate _all_ the attestable data from other entities (e.g. other Android applications) on which it has a dependency.  \r\n\r\nOn another note, I am not convinced that the current CoSWID spec (https://datatracker.ietf.org/doc/html/draft-ietf-sacm-coswid-16.txt) covers the notion of something like Android intents (or predecessors such as BREW extensions).  If I am correct in my interpretation, then this is a spec deficiency that should be fixed.",
          "createdAt": "2021-06-13T20:38:08Z",
          "updatedAt": "2021-06-13T20:38:08Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't want a prohibition against interdependency. It could occur if needed.\r\n\r\nHere's an example of what I'd like to discourage -- one claim says what the format/type of another claim is. Instead, build the type/format determination into the claim like is done for the swevidence and manifests claim. It's pretty simple stuff.\r\n\r\nI understand why a manifest for downloading SW needs to list needed dependencies and extensions, but I'm not sure that is necessary for attestation. That said, this is not a battle I'm going to go fight (have too much other work). I am mostly assuming the designers of CoSWID, CoMID and CoRIM know what they are doing.\r\n\r\n",
          "createdAt": "2021-06-16T00:56:09Z",
          "updatedAt": "2021-06-16T00:56:09Z"
        }
      ]
    },
    {
      "number": 111,
      "id": "MDU6SXNzdWU5MjQzMTgwMzA=",
      "title": "svn claim",
      "url": "https://github.com/ietf-rats-wg/eat/issues/111",
      "state": "OPEN",
      "author": "nedmsmith",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "wontfix"
      ],
      "body": "https://cwe.mitre.org/data/definitions/1328.html provides context for svn (security version number). There are many systems that use it. It would be helpful if EAT could include a claim for svn.\r\n\r\nSomething like:\r\n\r\nsvn-type = int\r\nsvn-claim = ( svn => svn-type)\r\n\r\nI can help contribute text if needed.\r\n",
      "createdAt": "2021-06-17T20:41:29Z",
      "updatedAt": "2021-09-27T21:34:18Z",
      "closedAt": null,
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "If I understand, the claim would report the value of the (hopefully) immutable rollback counter that the HW is storing. This could also be thought of as the minimum firmware version. The counter / version for the firmware that is installed is reported separately from this. In most cases they will be the same. In some cases the installed firmware version may be ahead. If the installed firmware version is behind, then something very bad has happened.\r\n\r\nSo, yes, this seems like a good thing to add. Thank you.\r\n\r\nWould be better to call it \"minfw\" (minimum firmware version), or \"firmware rollback counter\"? \r\n\r\nI reused the CoSWID version scheme classification for HW version numbers. See the -10 draft. It seems like that would be the thing to do here. Just clone the hw-version claim and call it \"minfw\"?\r\n\r\nI expect the version of the installed firmware to be reported as part of the swevidence claim, most likely in a CoRIM/CoMID (CoSWIDs don't seem very good for firmware since they are file path oriented).\r\n",
          "createdAt": "2021-06-18T20:00:57Z",
          "updatedAt": "2021-06-18T20:00:57Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think this blocks last call unless Ned or someone else wants this.",
          "createdAt": "2021-08-23T18:23:15Z",
          "updatedAt": "2021-08-23T18:23:15Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "@nedmsmith - do you feel this is LC blocking?  If not, we can deprioritize this issue.",
          "createdAt": "2021-08-24T04:02:41Z",
          "updatedAt": "2021-08-24T04:02:41Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "MDU6SXNzdWU5NDQ5NzMwNjU=",
      "title": "WGS84 reference link is bad",
      "url": "https://github.com/ietf-rats-wg/eat/issues/115",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "WGS84 changed...  Lots of standards are affected.",
      "createdAt": "2021-07-15T03:55:43Z",
      "updatedAt": "2021-07-15T05:00:57Z",
      "closedAt": "2021-07-15T05:00:56Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed",
          "createdAt": "2021-07-15T05:00:56Z",
          "updatedAt": "2021-07-15T05:00:56Z"
        }
      ]
    },
    {
      "number": 117,
      "id": "MDU6SXNzdWU5NDUwMTE2MDM=",
      "title": "Submodule type that is a hash of the detached submodule token",
      "url": "https://github.com/ietf-rats-wg/eat/issues/117",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Last Call blocking"
      ],
      "body": "The submodule is not a nested token or a sub set of claims, but is a hash of some claims.\r\n\r\nThis is useful for a HW block that takes as input some hashed data that can be used to cover a whole submodule.\r\n\r\nThis may also need some way of carrying detached submodules.",
      "createdAt": "2021-07-15T05:25:02Z",
      "updatedAt": "2021-10-07T19:56:58Z",
      "closedAt": "2021-10-07T19:56:58Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "See #123 ",
          "createdAt": "2021-08-09T20:06:23Z",
          "updatedAt": "2021-08-09T20:06:23Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #123 ",
          "createdAt": "2021-10-07T19:56:58Z",
          "updatedAt": "2021-10-07T19:56:58Z"
        }
      ]
    },
    {
      "number": 118,
      "id": "MDU6SXNzdWU5NDUwMTY0NTc=",
      "title": "Review Android Attestation for possible claims ",
      "url": "https://github.com/ietf-rats-wg/eat/issues/118",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "wontfix"
      ],
      "body": "It would be nice for standard EAT to be able to represent most of Android attestation.\r\n\r\nA starting point for the review: https://source.android.com/security/keystore/attestation",
      "createdAt": "2021-07-15T05:35:35Z",
      "updatedAt": "2021-10-20T20:13:29Z",
      "closedAt": "2021-10-20T20:13:29Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Did the review and created an example in the examples appendix.",
          "createdAt": "2021-10-20T20:13:29Z",
          "updatedAt": "2021-10-20T20:13:29Z"
        }
      ]
    },
    {
      "number": 119,
      "id": "MDU6SXNzdWU5NTIxOTYyNDc=",
      "title": "Some rework to use RATS architecture draft terminology",
      "url": "https://github.com/ietf-rats-wg/eat/issues/119",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Last Call blocking"
      ],
      "body": "The earlier sections pre-date RATS architecture. They include some architecture of their own and use different terminology. They should be re worked to be based on RATS architecture and its terminology.\r\n\r\n",
      "createdAt": "2021-07-25T04:48:55Z",
      "updatedAt": "2021-08-31T17:24:21Z",
      "closedAt": "2021-08-31T17:24:21Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #129",
          "createdAt": "2021-08-31T17:24:20Z",
          "updatedAt": "2021-08-31T17:24:20Z"
        }
      ]
    },
    {
      "number": 120,
      "id": "MDU6SXNzdWU5NTMzMTg0NTg=",
      "title": "Early assignment for chip-version-scheme",
      "url": "https://github.com/ietf-rats-wg/eat/issues/120",
      "state": "CLOSED",
      "author": "dthaler",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "TEEP needs early assignment for the chip-version-scheme claim but it's not listed in section 7.3.1\r\n",
      "createdAt": "2021-07-26T21:55:41Z",
      "updatedAt": "2021-10-30T19:30:59Z",
      "closedAt": "2021-10-30T19:30:59Z",
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "Is the request for IANA assignment of hw-version?  If so, I believe this is covered under https://github.com/ietf-rats-wg/eat/issues/131 and this issue can be closed as it is already being tracked separately.",
          "createdAt": "2021-10-30T19:08:17Z",
          "updatedAt": "2021-10-30T19:08:17Z"
        },
        {
          "author": "dthaler",
          "authorAssociation": "NONE",
          "body": "Closing since the draft now has TBD26",
          "createdAt": "2021-10-30T19:30:59Z",
          "updatedAt": "2021-10-30T19:30:59Z"
        }
      ]
    },
    {
      "number": 122,
      "id": "MDU6SXNzdWU5NjQyNDY1OTU=",
      "title": "Register a device URN for UEID",
      "url": "https://github.com/ietf-rats-wg/eat/issues/122",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-09T18:15:12Z",
      "updatedAt": "2021-08-23T18:20:26Z",
      "closedAt": "2021-08-23T18:20:26Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #125 ",
          "createdAt": "2021-08-23T18:20:26Z",
          "updatedAt": "2021-08-23T18:20:26Z"
        }
      ]
    },
    {
      "number": 130,
      "id": "MDU6SXNzdWU5ODc5MTg2MDM=",
      "title": "CDDL for UCCS -- interdependence with UCCS draft",
      "url": "https://github.com/ietf-rats-wg/eat/issues/130",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See https://github.com/ietf-rats-wg/draft-ietf-rats-uccs/issues/4 which proposes that cwt-claims-set get defined in the UCCS draft and that EAT reference it for CBOR-based claims.\r\n\r\nThis doesn't quite solve the problem for CDDL for JSON based claims. Maybe UCCS should define that too?",
      "createdAt": "2021-09-03T16:06:36Z",
      "updatedAt": "2021-10-07T19:56:22Z",
      "closedAt": "2021-10-07T19:56:22Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #123 ",
          "createdAt": "2021-10-07T19:56:22Z",
          "updatedAt": "2021-10-07T19:56:22Z"
        }
      ]
    },
    {
      "number": 131,
      "id": "I_kwDOCEWCXc48R0Pn",
      "title": "Fill in list for IANA of all to-be-registered claims",
      "url": "https://github.com/ietf-rats-wg/eat/issues/131",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-09-29T18:14:31Z",
      "updatedAt": "2022-02-17T19:30:06Z",
      "closedAt": "2022-02-17T19:30:05Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed with #152 ",
          "createdAt": "2022-02-17T19:30:05Z",
          "updatedAt": "2022-02-17T19:30:05Z"
        }
      ]
    },
    {
      "number": 135,
      "id": "I_kwDOCEWCXc49ySqY",
      "title": "Say that submodules relate to target environments",
      "url": "https://github.com/ietf-rats-wg/eat/issues/135",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Need to think it through, but it seems that RATs architecture Target Environments correspond to submodules in EAT and that this could be mentioned in the document.",
      "createdAt": "2021-10-26T18:05:26Z",
      "updatedAt": "2021-10-26T18:05:26Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 136,
      "id": "I_kwDOCEWCXc492Rvc",
      "title": "Add claims for non-nonce freshness",
      "url": "https://github.com/ietf-rats-wg/eat/issues/136",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "RATS architecture and other documents describe architecture for freshness that doesn't use a nonce. EAT should support them.",
      "createdAt": "2021-10-27T16:46:23Z",
      "updatedAt": "2021-10-31T21:31:13Z",
      "closedAt": "2021-10-31T21:31:13Z",
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "With reference to https://datatracker.ietf.org/doc/html/draft-ietf-rats-architecture#section-10, there are two non-nonce approaches to freshness:  timestamp and epoch ID.\r\n\r\nEAT builds upon CWT.  Timestamp can be addresses by the iat claim (https://datatracker.ietf.org/doc/html/rfc8392#section-3.1.6).  Epoch ID can be addressed by the cwt id (https://datatracker.ietf.org/doc/html/rfc8392#section-3.1.7) .  In that regards, EAT supports three forms of replay protection.\r\n\r\nRecommend closing this issue, and perhaps filing an issue on the architecture document.  It is strange that the architecture document is using language such as timestamp and Epoch ID in place of conventional terminology related to claims used for replay protection in RFC 8392 and 7519.",
          "createdAt": "2021-10-30T19:00:20Z",
          "updatedAt": "2021-10-31T21:31:08Z"
        }
      ]
    },
    {
      "number": 138,
      "id": "I_kwDOCEWCXc4-bmKi",
      "title": "Meet TEEP requirements for non-TEEP/SUIT specific claims",
      "url": "https://github.com/ietf-rats-wg/eat/issues/138",
      "state": "OPEN",
      "author": "dthaler",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "wontfix"
      ],
      "body": "https://datatracker.ietf.org/doc/html/draft-ietf-teep-architecture#section-7 and \r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-teep-protocol#section-4.3.1 have requirements to be able to somehow express, in some fashion (ideally not TEEP specific):\r\n\r\n- [X] Device unique identifier - I think \"ueid\" meets this, if I understand correctly (and this was mentioned in the mailing list thread)\r\n- [X] Vendor of the device - I think \"oemid\" can now do this\r\n- [ ] Class of the device\r\n- [X] TEE firmware type - I think \"software-name\" can now do this\r\n- [X] TEE firmware version - I think \"software-version\" can now do this\r\n\r\nhttps://datatracker.ietf.org/doc/draft-birkholz-rats-suit-claims/ proposed claims that are not TEEP/SUIT specific for all of the above:\r\n* vendor-identifier, class-identifier, device-identifier, component-identifier, version\r\n\r\nThe TEEP protocol spec has a normative dependency on those, and we agreed they are not TEEP or SUIT specific.   This issue requests adding them, or some other way of expressing similar information, into the base EAT spec.  This has been discussed on the RATS mailing list and asked for in multiple past RATS meetings, so now tracking via this issue.\r\n\r\nThe latest version of draft-ietf-rats-eat added software-name and software-version which I believe are sufficient to meet the firmware type and version requirements, so this now just tracks anything remaining, which I think is just device class.\r\n",
      "createdAt": "2021-11-08T13:01:46Z",
      "updatedAt": "2022-01-13T20:12:57Z",
      "closedAt": null,
      "comments": [
        {
          "author": "dthaler",
          "authorAssociation": "NONE",
          "body": "Here's some of the discussion links, there are more (earlier ones) I can dig up later if needed:\r\n\r\n* RATS email thread: https://mailarchive.ietf.org/arch/msg/rats/NRVt_SCZ7yH8M3SRbUZqlO448MY/\r\n* Slides from IETF 111: https://datatracker.ietf.org/meeting/111/materials/slides-111-rats-sessc-rats-session-2-3-slide-bundle-03 slides 53-59\r\n* Notes from IETF 111: https://notes.ietf.org/notes-ietf-111-rats",
          "createdAt": "2021-11-08T13:09:59Z",
          "updatedAt": "2021-11-08T13:09:59Z"
        },
        {
          "author": "dthaler",
          "authorAssociation": "NONE",
          "body": "The relevant part of draft-birkholz-rats-suit-claims that is not specific to SUIT or TEEP is:\r\n\r\n> 3.1.1.  vendor-identifier\r\n> \r\n>    A RFC 4122 UUID representing the vendor of the Attester or one of its\r\n>    hardware and/or software components.\r\n> \r\n>    $$system-property-claim //= ( vendor-identifier => RFC4122_UUID )\r\n\r\nI believe above is now obsoleted by oemid.\r\n\r\n> 3.1.2.  class-identifier\r\n> \r\n>    A RFC 4122 UUID representing the class of the Attester or one of its\r\n>    hardware and/or software components.\r\n> \r\n>    $$system-property-claim //= ( class-identifier => RFC4122_UUID )\r\n\r\nThere is currently no equivalent in EAT, and the ueid text actually says so (\"It does not identify types, models or classes of devices.\")  So we need a separate claim that can hold such information.  TEEP doesn't care whether it's a UUID, or a string that is up to the vendor specified in oemid, or whatever else.\r\n\r\n> 3.1.3.  device-identifier\r\n> \r\n>    A RFC 4122 UUID representing the Attester.\r\n> \r\n>    $$system-property-claim //= ( device-identifier => RFC4122_UUID )\r\n\r\nI suspect ueid obsoletes the above.\r\n\r\n> 3.1.4.  component-identifier\r\n> \r\n>    A sequence of binary identifiers that is intended to identify a\r\n>    software-component of an Attester uniquely.  A binary identifier can\r\n>    represent a CoSWID [I-D.ietf-sacm-coswid] tag-id.\r\n> \r\n>    $$system-property-claim //=  ( class-identifier => [ + identifier ] )\r\n\r\nI suspect software-name obsoletes the above, although an array as Henk proposed may provide better uniqueness guarantees than a string as software-name uses in EAT today.",
          "createdAt": "2021-11-08T13:20:46Z",
          "updatedAt": "2021-11-08T16:47:33Z"
        },
        {
          "author": "bremoran",
          "authorAssociation": "NONE",
          "body": "From a SUIT perspective, many things can affect compatibility. Many software and hardware components can play a role. Some may even come from different vendors. We should not come under the illusion that a device has a single \"oem.\" Devices may have a myriad of OEMs. Imagine a fleet tracking device that contains:\r\n\r\n* An application processor\r\n* A GPS module for obtaining location\r\n* A WiFi module for when the vehicle is at a supported facility\r\n* A LTE module for when the vehicle is in a city\r\n* A Satellite communication module for when the vehicle is not in a city.\r\n\r\nWhy does it have so many communication interfaces? Because each one is more expensive to use than the previous.\r\n\r\nEach of the modules has a separate vendor, hardware version, firmware version, and root of trust. The device *as a whole* has an OEM, but so do each of the modules. Which OEM are you reporting? Is that good enough? Your device has a hierarchical structure, so your data should too.\r\n\r\nYou also need to apply this logic to hardware and firmware revisions. As a device of a particular \"model\" evolves, it may continue to have changes to these modules. A wifi module from a second source could be used as a replacement without changing the \"function\" of the device. Some companies are keen to hide this, so they will attempt to keep the model of the overall device the same. But from a reporting perspective, that is a problem; presumably you want to know what firmware each of the modules within your device is running, otherwise how do you patch security problems?\r\n\r\nSuit's data structure may not look it, but it enables this. By setting a component ID and then testing vendor identifier and class identifier, you can test all the modules in your system. It also allows multiple class identifiers per component ID, so you can use one for hardware revision and one for firmware revision (where relevant).\r\n\r\nThis is why the list of class identifiers is so important. It needs to stay.",
          "createdAt": "2021-11-11T11:45:03Z",
          "updatedAt": "2021-11-11T11:51:35Z"
        },
        {
          "author": "dthaler",
          "authorAssociation": "NONE",
          "body": "My understanding is that each claimset can have an oemid and describe a different component.  A device can have a set of claimsets, one per component, organized in a layered fashion, or a composite fashion.   As long as \"oemid\" can be used to hold a vendor id, then it's really a vendor id not an \"OEM\" id per se.   Someone please correct me if my understanding is incorrect.\r\n\r\nThanks,\r\nDave\r\n\r\nFrom: Brendan Moran ***@***.***>\r\nSent: Thursday, November 11, 2021 3:45 AM\r\nTo: ietf-rats-wg/eat ***@***.***>\r\nCc: Dave Thaler ***@***.***>; Author ***@***.***>\r\nSubject: Re: [ietf-rats-wg/eat] Meet TEEP requirements for non-TEEP/SUIT specific claims (Issue #138)\r\n\r\n\r\nFrom a SUIT perspective, many things can affect compatibility. Many software and hardware components can play a role. Some may even come from different vendors. We should not come under the illusion that a device has a single \"oem.\" Devices may have a myriad of OEMs. Imagine a fleet tracking device that contains:\r\n\r\n  *   An application processor\r\n  *   A GPS module for obtaining location\r\n  *   A WiFi module for when the vehicle is at a supported facility\r\n  *   A LTE module for when the vehicle is in a city\r\n  *   A Satellite communication module for when the vehicle is not in a city.\r\n\r\nWhy does it have so many communication interfaces? Because each one is more expensive to use than the previous.\r\n\r\nEach of the modules has a separate vendor, hardware version, firmware version, and root of trust. The devices as a whole has an OEM, but so do each of the modules. Which OEM are you reporting? Is that good enough? Your device has a hierarchical structure, so your data should too.",
          "createdAt": "2021-11-11T14:39:26Z",
          "updatedAt": "2021-11-12T14:21:59Z"
        },
        {
          "author": "dthaler",
          "authorAssociation": "NONE",
          "body": "TEEP discussed this thread in the WG meeting this morning, where\r\nmany of the people who weighed in on the joint RATS/TEEP email thread were present\r\n(thanks!)   Nancy did two polls during the meeting to get a sense\r\nof the room.\r\n\r\nMy takeaway is that TEEP (with various participants from SUIT \r\nand RATS who weighed in) believes that RATS should define\r\na claim in the EAT spec, but leave the *values* to be defined by\r\nprofiles and by vendors (i.e., both categories are needed).\r\nThe TEEP profile would define values used by TEEP use cases,\r\nas would other profiles.  Vendors would be able to define\r\nvendor-specific values in addition to standard values defined in profiles.\r\n\r\nAlso TEEP had strong consensus that the values should be opaque\r\nnot structured.   As such, some believe a UUID would be better\r\nthan a byte blob or text string because a UUID helps ensure opaqueness,\r\nbut that\u2019s for RATS to decide if RATS defines the claim and requirements\r\nfor profiles.\r\n",
          "createdAt": "2021-11-12T14:22:40Z",
          "updatedAt": "2021-11-12T14:22:40Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this has been addressed by #139 ",
          "createdAt": "2021-12-06T19:46:29Z",
          "updatedAt": "2021-12-06T19:46:29Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Re opened this because through a conversation with Dave, it is clear that TEEP wants something that really is a class, not a model number.",
          "createdAt": "2021-12-22T21:09:56Z",
          "updatedAt": "2021-12-22T21:09:56Z"
        }
      ]
    },
    {
      "number": 144,
      "id": "I_kwDOCEWCXc4_7SoT",
      "title": "Re order sections (MCR comment)",
      "url": "https://github.com/ietf-rats-wg/eat/issues/144",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From October 26 mcr email:\r\n\r\n> I wonder if section 3 (Claims) shouldn't come after section 6, before 7.\r\n> section 6, which is about keys, maybe even should be earlier.",
      "createdAt": "2021-12-06T19:09:04Z",
      "updatedAt": "2021-12-06T19:15:01Z",
      "closedAt": null,
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "I am open to a reordering from this:\r\n\r\n> 3. The Claims\r\n> 4. Unprotected JWT Claims-Sets\r\n> 5. Detached EAT Bundle\r\n> 6. Endorsements and Verification Keys\r\n> 7. Profiles\r\n\r\nto this:\r\n> 3. Unprotected JWT Claims-Sets\r\n> 4. Endorsements and Verification Keys\r\n> 5. The Claims\r\n> 6. Detached EAT Bundle\r\n> 7. Profiles\r\n\r\nI prefer it as is. I have \"The Claims\" near the front because that is the main thing people want to read first and because the current order parallels CWT and JWT to some degree. The section on Endorsements and  Verification keys is not essentially normative. JWT defines unsecured JWT's after it defines the claims.",
          "createdAt": "2021-12-06T19:15:01Z",
          "updatedAt": "2021-12-06T19:15:01Z"
        }
      ]
    },
    {
      "number": 151,
      "id": "I_kwDOCEWCXc5B_zSA",
      "title": "Remove Section 4 (unsigned JWT) from draft",
      "url": "https://github.com/ietf-rats-wg/eat/issues/151",
      "state": "OPEN",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Already covered in Appendix A of  https://www.ietf.org/rfcdiff?url2=draft-ietf-rats-uccs-02.txt",
      "createdAt": "2022-01-18T18:43:11Z",
      "updatedAt": "2022-01-18T19:17:39Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 153,
      "id": "I_kwDOCEWCXc5CSAzN",
      "title": "Should EAN-13 HW Version be removed",
      "url": "https://github.com/ietf-rats-wg/eat/issues/153",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Right now the HW Version claim can be an EAN-13 value, a bar code. This was partly because the PSA token used it. It doesn't any longer.\r\n\r\nThis can probably be removed.",
      "createdAt": "2022-01-23T23:28:51Z",
      "updatedAt": "2022-01-23T23:28:51Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 155,
      "id": "I_kwDOCEWCXc5CW-9A",
      "title": "Update CDDL to use .feature for JSON vs CBOR",
      "url": "https://github.com/ietf-rats-wg/eat/issues/155",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The new UCCS draft uses .feature to branch between JSON and CBOR. This needs to be carried into the CDDL for all the claims that are different between JSON and CBOR, particularly for nested tokens.",
      "createdAt": "2022-01-25T01:30:52Z",
      "updatedAt": "2022-01-25T01:30:52Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 157,
      "id": "I_kwDOCEWCXc5CnxQq",
      "title": "a media type for EAT",
      "url": "https://github.com/ietf-rats-wg/eat/issues/157",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It looks like we are missing an explicit media type for EAT.\r\n \r\nOne important thing is that we make the media type so that it can optionally carry the EAT profile.  This allows HTTP/CoAP APIs to dispatch to the right decoder without having to snoop into the payload.\r\n \r\nSomething like `application/eat+cbor` for the base thing and an optional `profile` parameter that mirrors the profile claim value in the EAT. E.g.: `application/eat+cbor; profile=1.3.6.1.4.1.123.456`.\r\n\r\nSee also the RATS ML thread starting at https://mailarchive.ietf.org/arch/msg/rats/VAYmwacEeu-vIVjotbVqmOavQpk/",
      "createdAt": "2022-01-28T18:41:48Z",
      "updatedAt": "2022-01-31T17:56:58Z",
      "closedAt": "2022-01-31T17:56:58Z",
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "Please provide an explanation as to why application/cwt is not sufficient (https://www.rfc-editor.org/rfc/rfc8392.html#section-9.2) for EAT carriage.",
          "createdAt": "2022-01-28T21:24:03Z",
          "updatedAt": "2022-01-28T21:24:03Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Please provide an explanation as to why application/cwt is not sufficient (https://www.rfc-editor.org/rfc/rfc8392.html#section-9.2) for EAT carriage.\r\n\r\nAs per discussion on the RATS mailing list, this whole topic will be dealt with in a separate document.",
          "createdAt": "2022-01-31T17:56:58Z",
          "updatedAt": "2022-01-31T17:56:58Z"
        }
      ]
    },
    {
      "number": 163,
      "id": "I_kwDOCEWCXc5DJXb5",
      "title": "Add privacy discussion on replay protection mechanisms",
      "url": "https://github.com/ietf-rats-wg/eat/issues/163",
      "state": "CLOSED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cti/jti and nonce fields could be used either inadvertently or on purpose to extract or convey personally identifying information (PII).  See https://github.com/ietf-rats-wg/architecture/issues/399.",
      "createdAt": "2022-02-07T21:40:05Z",
      "updatedAt": "2022-02-17T19:29:37Z",
      "closedAt": "2022-02-17T19:29:36Z",
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Address by #164",
          "createdAt": "2022-02-17T19:29:36Z",
          "updatedAt": "2022-02-17T19:29:36Z"
        }
      ]
    },
    {
      "number": 165,
      "id": "I_kwDOCEWCXc5DPmO2",
      "title": "Identifying EAT objects",
      "url": "https://github.com/ietf-rats-wg/eat/issues/165",
      "state": "OPEN",
      "author": "cyberphone",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Related issue: https://github.com/ietf-rats-wg/eat/issues/157\r\nRelated I-D: https://datatracker.ietf.org/doc/draft-ietf-cbor-file-magic/\r\n\r\nA very active W3C group called Verified Credentials (VCs) are using attestations for delivering claims regarding individuals.  VC containers are identified as such by URLs featured in a dedicated JSON/JSON-LD property called @context (https://www.w3.org/TR/vc-data-model/#contexts).  When sent over HTTP, VCs use a static media type since the @context is supposed to tell the consumer what to expect.  This is similar to XML schemas and Namespaces.  Another W3C effort, PaymentRequest uses URLs (https://www.w3.org/TR/payment-request/#dom-paymentmethoddata-supportedmethods) for identifying custom payment handlers.\r\n\r\nIt is not entirely obvious how you translate this methodology to CBOR.  The following represents a concrete proposal intended to limit the need for multiple and over time probably diverging practices.  Since the scope of this issue is universal it is not limited to EAT. However, EAT represents a possible adopter.\r\n\r\n## High Level Description\r\n\r\n- CBOR data is enclosed by a _fixed_ top-level tag holding a URI or OID which are supposed to uniquely identify the \"schema\" (content specification) of the embedded data (payload).\r\n- When such objects are transported over HTTP, the media type MUST be set to `application/cbor`.   That is, the proposed tag has _precedence_ over other possible media types associated with the payload.\r\n\r\n<table><tr><td>Since objects using <i>self-contained type identifiers</i> are distinguishable from each other they can also be <i>embedded in other objects</i> in an interoperable and extensible way.</td></tr></table> \r\n\r\nIf applied to https://datatracker.ietf.org/doc/html/draft-ietf-rats-eat-11 the following changes seem logical:\r\n- 601() and similar application-specific tags would be replaced by the proposed construct.\r\n- `profile-name` would be removed.\r\n\r\n## In More Detail\r\n\r\nTBD211([_Type Id_, _CBOR data_])\r\n\r\nThis CBOR tag extends major type 6 and presumes a 2-element array holding a type identifier and associated data.  For designs intended for external use, type identifiers are RECOMMENDED to be represented by `bstr` or `tstr` where `bstr` SHOULD be coded as _absolute_ OIDs according to RFC9090 while `tstr` SHOULD be coded as _absolute_ URLs, preferably pointing to a document describing the object.\r\n\r\nThe data (payload) portion of the tag is any valid CBOR object, only constrained by its specification given by the type identifier.\r\n\r\n## Example\r\n\r\nAssume that you have an object like\r\n```code\r\n{\r\n  1: \"Hello CBOR World!\",\r\n  2: Infinity\r\n}\r\n```\r\nthat is defined in a document located at `https://example.com/cbor-hello`.\r\n\r\nAfter extending it with the proposed tag:\r\n```code\r\nTBD211([\"https://example.com/cbor-hello\", {\r\n  1: \"Hello CBOR World!\",\r\n  2: Infinity\r\n}])\r\n```\r\n\r\nIn binary/hex:\r\n```code\r\nD8 D3                                   # tag(211)\r\n   82                                   # array(2)\r\n      78 1E                             # text(30)\r\n         68747470733A2F2F6578616D706C652E636F6D2F63626F722D68656C6C6F # \"https://example.com/cbor-hello\"\r\n      A2                                # map(2)\r\n         01                             # unsigned(1)\r\n         71                             # text(17)\r\n            48656C6C6F2043424F5220576F726C6421 # \"Hello CBOR World!\"\r\n         02                             # unsigned(2)\r\n         F9 7C00                        # primitive(31744)\r\n```\r\n\r\n## Parameterized Object Types\r\nAlthough NOT RECOMMENDED, this specification does not \"outlaw\" parameterized type identifiers like the following:\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TBD211([[_Main Type Id_, _Parameters_...], _CBOR data_])\r\n\r\nHowever, in most real-world scenarios, an _extension scheme_ in the actual object is probably a better solution.\r\n\r\n### Related Discussion\r\nAnyway, whatever parameterization or extension scheme you use, it often comes with interoperability issues.   One way to combine extensions with a more agile ecosystem where not all object producers and consumers are at the same level, is making the latter announce their capabilities through _public discovery services_.  Then an object producer can determine what to send _before_ making a request, as well as concluding that the consumer isn't compatible with the producer's current requirements.",
      "createdAt": "2022-02-09T07:38:16Z",
      "updatedAt": "2022-02-12T11:01:59Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 168,
      "id": "I_kwDOCEWCXc5EIoOO",
      "title": "Three+ EAT serialization formats may not be beneficial",
      "url": "https://github.com/ietf-rats-wg/eat/issues/168",
      "state": "OPEN",
      "author": "cyberphone",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "F.Y.I. only, feel free to ignore this.\r\n\r\nThe three EAT serialization formats\r\n- JSON\r\n- CBOR standard\r\n- CBOR for constrained devices\r\n\r\nprovide flexibility but also makes EAT error-prone and difficult to deal with by verifiers.  There is IMO no point using JSON for this kind of application (which it certainly wasn't designed for either).\r\n\r\nThen we have the two CBOR solutions.  Or as it seems, a _multitude_ of solutions, where each profile _may_ specify its serialization requirements.\r\n\r\nGiven my background in embedded programming using extremely constrained devices like Intel 8051 and Motorola 6801, I don't see any problems _generating_ CBOR using preferred serialization.  Although I don't have the complete picture, I would be surprised if constrained devices would _consume_ EAT objects, and even if they do, preferred serialization would not be a disadvantage since you don't _have_ to verify compliance.\r\n\r\nThere is no need to sort CBOR maps, you just create data in the proper order, or use a pre-defined template and fill in the blanks.\r\n\r\nThe following Java code shows deterministic generation of `integers` (also used by `tstr`, `bstr`, `array`, and `map`):\r\n\r\n```java\r\nbyte[] encodeTagAndN(int majorType, long n) {\r\n    // Note: n is actually an UNSIGNED long\r\n    int modifier = (int) n;\r\n    int length = 0;\r\n    if (n < 0 || n > 23) {\r\n        modifier = 27;\r\n        length = 8;\r\n        while (((MASK_LOWER_32 << ((length / 2) * 8)) & n) == 0) {\r\n            modifier--;\r\n            length >>= 1;\r\n        }\r\n    }\r\n    byte[] encoded = new byte[length + 1];\r\n    encoded[0] = (byte)(majorType | modifier);\r\n    while (length > 0) {\r\n        encoded[length--] = (byte)n;\r\n        n >>>= 8;\r\n    }\r\n    return encoded;\r\n}\r\n```\r\nIn the unlikely (?) case you would need floating point data in EAT objects, preferred serialization would require about twice the code above, but it is still quite simple, only requiring bit-shuffling and integer math.\r\n\r\nUPDATE: After taking a deeper look into the matter, it seems that the primary issue rather must be COSE, since it puts the payload in a `tstr`, which requires RAM buffering unless infinite-length encoding and pre-hashing is used.  Enveloped signatures and pre-hashing conserve RAM as well as making preferred serialization a viable alternative for just about any imaginable device.",
      "createdAt": "2022-02-18T13:58:44Z",
      "updatedAt": "2022-02-21T16:26:59Z",
      "closedAt": null,
      "comments": [
        {
          "author": "cyberphone",
          "authorAssociation": "NONE",
          "body": "From the current draft:\r\n> **7.2.4. CBOR Preferred Serialization**\r\nThe profile should indicate whether encoders must use preferred serialization. The profile should indicate whether decoders must accept non-preferred serialization.\r\n\r\nExisting decoders require that you specify CBOR serialization options _before_ parsing which doesn't work particularly well in conjunction with a profile (https://github.com/ietf-rats-wg/eat/issues/165) buried somewhere in the payload.\r\n\r\n@laurencelundblade @gmandyam \r\n",
          "createdAt": "2022-02-19T03:32:11Z",
          "updatedAt": "2022-02-19T03:32:11Z"
        },
        {
          "author": "cyberphone",
          "authorAssociation": "NONE",
          "body": "A (wanted) side-effect of using preferred serialization is that it permits the use of enveloped signatures making the structure of signed objects more logical and easier to understand.\r\n\r\nCWT: https://datatracker.ietf.org/doc/html/rfc8392#appendix-A.3\r\n\r\n```cbor\r\n18([h'a10126', {\r\n    4: h'4173796d6d65747269634543445341323536'\r\n}, h'a70175636f61703a2f2f61732e6578616d706c652e636f6d02656572696b77037818636f61703a2f2f6c696768742e6578616d706c652e636f6d041a5612aeb0051a5610d9f0061a5610d9f007420b71', h'5427c1ff28d23fbad1f29c4c7c6a555e601d6fa29f9179bc3d7438bacaca5acd08c8d4d4f96131680c429a01f85951ecee743a52b9b63632c57209120e1c9e30'])\r\n```\r\n\r\nThe very same object using an enveloped signature:\r\n```cbor\r\n18({\r\n    1: \"coap://as.example.com\",\r\n    2: \"erikw\",\r\n    3: \"coap://light.example.com\",\r\n    4: 1444064944,\r\n    5: 1443944944,\r\n    6: 1443944944,\r\n    7: h'0b71',\r\n    / Signature container /\r\n    -1: {\r\n      / alg = ES256 /\r\n      1: -7,\r\n      / kid /\r\n      3: h'4173796d6d65747269634543445341323536',\r\n      / signature value /\r\n      7: h'e1e1a3bda070b586be0e9b95e6e5ccae4bcfb44726aa3f6b5e7bbc81d2193f439b6c6b84962c27eb4796e17dd6ecd028026a8e351bed3f9be95c96447e3fd262'\r\n    }\r\n})\r\n```\r\n\r\nThere is nothing particularly innovative or controversial about this suggestion; X.509 certificates, which represent a very widely used variant of signed objects, seem to work fine in spite of not burying the certified data (claims) inside of a blob.  That is, this is a time-proven concept.  However,  CBOR preferred serialization is considerably simpler and more \"RAM-friendly\" than ASN.1 DER since CBOR only requires items in a map or array to be concatenated.\r\n\r\nAn unexpected feature is that this scheme enables a signature to be added as a last element while the hash is collected during the production of the actual content.   This works at least for RSA and ECDSA algorithms.\r\n\r\nArmed with preferred serialization, signature validation becomes very simple:\r\n```java\r\n/**\r\n * Validates signed CBOR map.\r\n * <p>\r\n * This method presumes that <code>signedObject</code> holds\r\n * an enveloped signature according to CSF.\r\n * </p>\r\n * \r\n * @param key Key in map holding signature\r\n * @param signedObject Signed CBOR map object\r\n * @return The signed object\r\n * @throws IOException\r\n * @throws GeneralSecurityException\r\n */\r\npublic CBORMap validate(CBORObject key, CBORMap signedObject) throws IOException, \r\n                                                                     GeneralSecurityException {\r\n    // Fetch signature object\r\n    CBORMap signatureObject = signedObject.getObject(key).getMap();\r\n\r\n    // Get the signature value and remove it from the (map) object.\r\n    byte[] signatureValue = signatureObject.readByteStringAndRemoveKey(SIGNATURE_LABEL);\r\n\r\n    // Fetch optional keyId.\r\n    CBORObject optionalKeyId = signatureObject.hasKey(KEY_ID_LABEL) ?\r\n                     signatureObject.getObject(KEY_ID_LABEL).scan() : null;\r\n\r\n    // Call algorithm specific validator. The code below presumes that internalEncode()\r\n    // returns a deterministic representation of the signed CBOR data.\r\n    coreValidation(signatureObject,\r\n                   signatureObject.getObject(ALGORITHM_LABEL).getInt(),\r\n                   optionalKeyId, \r\n                   signatureValue,\r\n                   signedObject.internalEncode());\r\n\r\n    // Check that nothing \"extra\" was supplied.\r\n    signatureObject.checkForUnread();\r\n\r\n    // Restore object.\r\n    signatureObject.setObject(SIGNATURE_LABEL, new CBORByteString(signatureValue));\r\n    \r\n    // Return it as well.\r\n    return signedObject;\r\n}\r\n```",
          "createdAt": "2022-02-19T07:49:06Z",
          "updatedAt": "2022-02-21T16:26:59Z"
        }
      ]
    },
    {
      "number": 169,
      "id": "I_kwDOCEWCXc5EYJ70",
      "title": "Wording of claims so they can be both Evidence and Results",
      "url": "https://github.com/ietf-rats-wg/eat/issues/169",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For example, UEID refers to the Relying Party as the recipient when it can also be the Verifier.",
      "createdAt": "2022-02-22T17:28:12Z",
      "updatedAt": "2022-03-22T13:14:52Z",
      "closedAt": null,
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "This is addressed by #171.  Turns out the UEID was the only mention of RP. However this issue prompted some re thinking and re organization of the claims into sections and wording about relationship of AR to AE.",
          "createdAt": "2022-03-22T13:14:26Z",
          "updatedAt": "2022-03-22T13:14:26Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "It will be addressed by #171",
          "createdAt": "2022-03-22T13:14:51Z",
          "updatedAt": "2022-03-22T13:14:51Z"
        }
      ]
    },
    {
      "number": 170,
      "id": "I_kwDOCEWCXc5EYUaJ",
      "title": "Clarify UEID manufacturing type switch",
      "url": "https://github.com/ietf-rats-wg/eat/issues/170",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-22T18:14:58Z",
      "updatedAt": "2022-02-22T18:14:58Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk3NjAwNzMy",
      "title": "Create draft-ietf-mandyam-eat.md",
      "url": "https://github.com/ietf-rats-wg/eat/pull/1",
      "state": "MERGED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Seeding repo",
      "createdAt": "2018-06-27T02:31:36Z",
      "updatedAt": "2018-06-27T17:55:36Z",
      "closedAt": "2018-06-27T17:55:36Z",
      "mergedAt": "2018-06-27T17:55:36Z",
      "mergedBy": "laurencelundblade",
      "comments": [],
      "reviews": [],
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "69738ac44f179863fea75a0cfa10e7335aae1e13",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "9b927bfcb8cce27338e5e60794539ebc689c7b3d",
      "mergeCommit": {
        "oid": "69765a42137ecc476e9fc15f9c83f87794882cef"
      }
    },
    {
      "number": 5,
      "id": "MDExOlB1bGxSZXF1ZXN0MjAxNTExNDIx",
      "title": "First draft of CBOR interop section",
      "url": "https://github.com/ietf-rats-wg/eat/pull/5",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "CBOR has a lot of different data type and for each type there are encoding variations. In order for EAT to have good interoperability, there has to be a specification for what types and variants to use. \r\n\r\n(Seems to me that other CBOR-based protocols like COSE and CWT should have similar).\r\n",
      "createdAt": "2018-07-15T19:19:21Z",
      "updatedAt": "2021-05-25T18:35:30Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "69765a42137ecc476e9fc15f9c83f87794882cef",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "CBOR-Interop",
      "headRefOid": "0a6c332301667942aa53d232a0710db863dbee47",
      "closedAt": "2018-11-19T15:20:20Z",
      "mergedAt": "2018-11-19T15:20:20Z",
      "mergedBy": "gmandyam",
      "mergeCommit": {
        "oid": "d43880a9817a8f48ca1ec6fda3ce230396feb277"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 6,
      "id": "MDExOlB1bGxSZXF1ZXN0MjIxMTk3NDU1",
      "title": "Fix for some typos",
      "url": "https://github.com/ietf-rats-wg/eat/pull/6",
      "state": "MERGED",
      "author": "mathias-arm",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-10-08T17:56:01Z",
      "updatedAt": "2018-11-16T02:07:59Z",
      "closedAt": "2018-11-16T02:07:54Z",
      "mergedAt": "2018-11-16T02:07:54Z",
      "mergedBy": "gmandyam",
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "@mathias-arm \r\n\r\nThanks for providing this.  It is now merged.",
          "createdAt": "2018-11-16T02:07:59Z",
          "updatedAt": "2018-11-16T02:07:59Z"
        }
      ],
      "reviews": [],
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "69765a42137ecc476e9fc15f9c83f87794882cef",
      "headRepository": "mathias-arm/eat",
      "headRefName": "master",
      "headRefOid": "238a38219eaf6a8b5145ec60baba5af9345f48b7",
      "mergeCommit": {
        "oid": "32734ed3cd9db3843fb6a92b3acf340df18ac5a4"
      }
    },
    {
      "number": 7,
      "id": "MDExOlB1bGxSZXF1ZXN0MjcwOTM1NzIy",
      "title": "Added Claims Characteristics section",
      "url": "https://github.com/ietf-rats-wg/eat/pull/7",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-04-16T14:28:45Z",
      "updatedAt": "2020-11-09T21:33:34Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "aac5de214068993208b41066f1717222abde6114",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "claim-characteristics",
      "headRefOid": "0c375694b225d19dcbc193eedace638d364d57f2",
      "closedAt": "2020-11-09T21:33:28Z",
      "mergedAt": "2020-11-09T21:33:28Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "f28c8a69c2da08f8db09a5136ca63c5255ce450f"
      },
      "comments": [
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "I would recommend to remove the \"Some examples of profiles that may come to exist:\" content. A specification or even proposed standard is not a good place for listing \"work that may or may not be done\", I think. Other SDO actually forbid this type of content rather strictly. I am not sure what the exact IETF rules are, tbh.",
          "createdAt": "2019-11-27T21:00:04Z",
          "updatedAt": "2019-11-27T21:00:04Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "I assert that existence in a specification justifies its existence! ",
          "createdAt": "2020-01-06T22:21:24Z",
          "updatedAt": "2020-01-06T22:21:24Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "I take Ned's point that it is a bit circular to justify the existence of claims that have been agreed upon in the standard. However I think the text is important and helpful and should be in the document somewhere.\r\n\r\nOne possibility is the section for IANA as advice for claims registration. This is still odd though since there is no EAT IANA registry as we re use CWT.\r\n",
          "createdAt": "2020-02-04T18:44:52Z",
          "updatedAt": "2020-02-04T18:44:52Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "@henkbirkholz on the examples to be built, I agree that this is probably not the right way to frame it. What about just listing the as examples with out the \"may come to exist\" part?",
          "createdAt": "2020-02-04T19:47:22Z",
          "updatedAt": "2020-02-04T19:47:22Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzMzM0NjU2",
          "commit": {
            "abbreviatedOid": "c72786f"
          },
          "author": "setrofim",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-07T13:26:23Z",
          "updatedAt": "2019-11-07T13:26:24Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nClaims should not be defined such they are specific to a chip or\r\n```\r\nor\r\n```suggestion\r\nClaims should be defined such they are not specific to any chip or\r\n```",
              "createdAt": "2019-11-07T13:26:23Z",
              "updatedAt": "2020-11-09T21:27:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzNDEyMzc4",
          "commit": {
            "abbreviatedOid": "c72786f"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This looks like the wrong file (draft-ietf-mandyam-eat.md instead of draft-ietf-rats-eat.md)?",
          "createdAt": "2019-11-07T15:15:11Z",
          "updatedAt": "2019-11-07T15:15:11Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzNDIyNDUw",
          "commit": {
            "abbreviatedOid": "c72786f"
          },
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-07T15:28:11Z",
          "updatedAt": "2019-11-07T15:28:12Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "Typo:  claims should +use+ already standardized",
              "createdAt": "2019-11-07T15:28:12Z",
              "updatedAt": "2020-11-09T21:27:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzNDI1MjAx",
          "commit": {
            "abbreviatedOid": "c72786f"
          },
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-07T15:31:25Z",
          "updatedAt": "2019-11-07T15:31:26Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "Add comment to the effect that proprietary claims should not be used instead of an equivalent standard claims unless the implementation is significantly different?",
              "createdAt": "2019-11-07T15:31:26Z",
              "updatedAt": "2020-11-09T21:27:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4OTMwOTkx",
          "commit": {
            "abbreviatedOid": "c72786f"
          },
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-06T22:19:58Z",
          "updatedAt": "2020-01-06T22:19:59Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Shouldn't the language be \"...such THAT they...\"?\r\n\r\nNot sure why the EAT draft should give guidance on what belongs as a claim (or not). Doesn't the existence of the claim in the spec resolve whether or not it should exist?",
              "createdAt": "2020-01-06T22:19:58Z",
              "updatedAt": "2020-11-09T21:27:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 8,
      "id": "MDExOlB1bGxSZXF1ZXN0MjcxMTMxMzg5",
      "title": "Update main file to draft-rats-eat-mandyam-00",
      "url": "https://github.com/ietf-rats-wg/eat/pull/8",
      "state": "MERGED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-04-17T02:00:14Z",
      "updatedAt": "2019-04-17T02:00:56Z",
      "closedAt": "2019-04-17T02:00:56Z",
      "mergedAt": "2019-04-17T02:00:56Z",
      "mergedBy": "gmandyam",
      "comments": [],
      "reviews": [],
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "d43880a9817a8f48ca1ec6fda3ce230396feb277",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "2b2d656df73dbbca4baf9766f328a76f3ac5ecd5",
      "mergeCommit": {
        "oid": "2c44d5cad7bfdc98a4e558115324bd03a1abfdee"
      }
    },
    {
      "number": 11,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkwNjk4NTM4",
      "title": "Be cwt",
      "url": "https://github.com/ietf-rats-wg/eat/pull/11",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Big rearrangement:\r\n- separate information and data model using CDDL\r\n- say an EAT is a CWT or JWT\r\n\r\nNo new claims or any substantive change to any claim.\r\n\r\nI believe I have largely succeeded in using CDDL for the information model and\r\ndefining later how it translates to the CWT and JWT data models.  It seems like\r\nthis is what CDDL is for, but others don't seem to be using it this way (yet). Being \r\nnew to CDDL and attempting what others seem to have not, I may have made some errors since I have no example to follow.\r\n\r\n",
      "createdAt": "2019-06-21T18:02:04Z",
      "updatedAt": "2021-05-25T18:35:18Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "2c44d5cad7bfdc98a4e558115324bd03a1abfdee",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "be_cwt",
      "headRefOid": "b3cab5e4454229b95fafbc50c3cf7921b7dbc221",
      "closedAt": "2019-07-03T18:41:30Z",
      "mergedAt": "2019-07-03T18:41:30Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "b3cab5e4454229b95fafbc50c3cf7921b7dbc221"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 28,
      "id": "MDExOlB1bGxSZXF1ZXN0MzA2NjcxMDE4",
      "title": "Security Considerations",
      "url": "https://github.com/ietf-rats-wg/eat/pull/28",
      "state": "MERGED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "First cut",
      "createdAt": "2019-08-12T21:41:55Z",
      "updatedAt": "2020-02-19T16:57:35Z",
      "closedAt": "2020-02-19T16:57:28Z",
      "mergedAt": "2020-02-19T16:57:28Z",
      "mergedBy": "gmandyam",
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been pending with no comments or feedback. My suggestion is to merge it and then revise as necessary.",
          "createdAt": "2019-10-04T17:03:13Z",
          "updatedAt": "2019-10-04T17:03:13Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this needs clarification of what is meant by \"enclave\".  I think you mean \"manufacturer's cryptographic operation facility\" or such.  ",
          "createdAt": "2019-10-07T04:25:27Z",
          "updatedAt": "2019-10-07T04:25:27Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "> \r\n> \r\n> I think this needs clarification of what is meant by \"enclave\". I think you mean \"manufacturer's cryptographic operation facility\" or such.\r\n\r\nModified accordingly with pointer to RFC 4949, where enclave is defined.",
          "createdAt": "2019-10-16T15:53:46Z",
          "updatedAt": "2019-10-16T15:53:46Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzMzI3Nzg4",
          "commit": {
            "abbreviatedOid": "f47a8b4"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-07T13:14:21Z",
          "updatedAt": "2019-11-07T13:14:22Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nthe keys used for signing and/or encryption.  In some instances, the manufacturer of the entity\r\n```",
              "createdAt": "2019-11-07T13:14:21Z",
              "updatedAt": "2020-02-19T16:57:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzMzI5MzYy",
          "commit": {
            "abbreviatedOid": "f47a8b4"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-07T13:17:11Z",
          "updatedAt": "2019-11-07T13:17:12Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\nmaterial directly from the secure enclave where it was created to a destination secure enclave where it can be provisioned.\r\n```",
              "createdAt": "2019-11-07T13:17:11Z",
              "updatedAt": "2020-02-19T16:57:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzMzM0NDAx",
          "commit": {
            "abbreviatedOid": "f47a8b4"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-07T13:25:55Z",
          "updatedAt": "2019-11-07T13:25:56Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "```suggestion\r\nAs stated in Section 8 of {{RFC8392}}, \"The security of the CWT relies upon on the protections offered by COSE\".  Similar considerations apply to EAT when sent as a CWT.  However, the EAT introduces the concept of a nonce\r\n```\r\n\r\nThis would be otherwise incongruent with #42 ",
              "createdAt": "2019-11-07T13:25:55Z",
              "updatedAt": "2020-02-19T16:57:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzMzY3MDQy",
          "commit": {
            "abbreviatedOid": "f47a8b4"
          },
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-07T14:14:55Z",
          "updatedAt": "2019-11-07T14:14:56Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "the wording here is unclear, whether the Recommendation applies to use of a Nonce or use of a nonce and encryption + signing? Encryption may not be applicable for all use cases.",
              "createdAt": "2019-11-07T14:14:55Z",
              "updatedAt": "2020-02-19T16:57:16Z"
            }
          ]
        }
      ],
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "a648f41f4040e94847d2f6669bb0045e4331d53a",
      "headRepository": null,
      "headRefName": "br1",
      "headRefOid": "b899254440826cea379eb1a5115ad08d1ed69898",
      "mergeCommit": {
        "oid": "cf76bd58c185a98a8a9d1637b9030e17f1054a92"
      }
    },
    {
      "number": 29,
      "id": "MDExOlB1bGxSZXF1ZXN0MzE1NjQ2NTg2",
      "title": "Fix capitalization typo",
      "url": "https://github.com/ietf-rats-wg/eat/pull/29",
      "state": "MERGED",
      "author": "ciphergoth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-09-09T17:54:21Z",
      "updatedAt": "2019-10-01T13:15:34Z",
      "closedAt": "2019-10-01T13:15:34Z",
      "mergedAt": "2019-10-01T13:15:34Z",
      "mergedBy": "laurencelundblade",
      "comments": [],
      "reviews": [],
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "cdaecbcdae3a61dcc39aa9601ac72ad8a6203965",
      "headRepository": "ciphergoth/eat",
      "headRefName": "patch-1",
      "headRefOid": "ac2550f0b67320e260df88287dac651ac94549d7",
      "mergeCommit": {
        "oid": "faab2c4351ce31e3d3f7b6b94a0f06c9e5d1cfb9"
      }
    },
    {
      "number": 35,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI1MTIwMzQ3",
      "title": "Up UEID to 256 bits and add design rational appendix",
      "url": "https://github.com/ietf-rats-wg/eat/pull/35",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Comments on the analysis are very much requested. \r\n\r\nSee issue #12 and #21",
      "createdAt": "2019-10-07T04:12:27Z",
      "updatedAt": "2020-02-07T15:42:31Z",
      "closedAt": "2020-02-07T15:42:31Z",
      "mergedAt": "2020-02-07T15:42:31Z",
      "mergedBy": "laurencelundblade",
      "comments": [
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "256-bits is plenty. 128-bits as a minimum. This would allow the use of a digested value. If the namespace isn't digested, then you are relying on the namespace authority to manage the population in some way. If the UEID obfuscates the namespace authority then you have to assume there isn't a namespace authority, which implies using digesting. Hence 128-bit is currently practice for minimum acceptable hash lengths. ",
          "createdAt": "2019-10-07T17:27:01Z",
          "updatedAt": "2019-10-07T17:27:01Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "NONE",
          "body": "This is ridiculously large.  IPv6 uses an identifier space that is half the number of bits",
          "createdAt": "2019-10-21T12:18:33Z",
          "updatedAt": "2019-10-21T12:18:33Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think 128 bits being enough for IP addresses implies it is enough for UEIDs. IP addresses get reused serially over time and by NAT. Neither reuse applies to UEIDs. Also, a device with a single IP address may have many sub parts that each have a UEID.  They are connected to each other via a bus, a serial link, BlueTooth or such, not IP.\r\n\r\nOn the other hand, I don't think the non-correlation with IP address automatically makes UEIDs 256 bits. 256 bits is based on the probabilistic analysis in the appendix.",
          "createdAt": "2019-11-08T21:34:18Z",
          "updatedAt": "2019-11-08T21:34:18Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "@nedmsmith This discussion is for RAND type UEIDs as you deduced in your comment above. Appendix B should explicitly say that.\r\n\r\nFor crypto, 128 bits is usually considered enough today, but there is always an assumption built into designs that it won't be. Also, there is a lot of use of\r\n256 bits today. For example COSE ECDSA signature are minimum SHA-256.\r\n\r\nIt does seem like UEIDs could start out at 128 bits and transition to 256 bits in ten, twenty or fifty years. All we have to do here and now is say receivers must be prepared for 256 bits. When the time comes a new RFC is issued say 256 bits must be used. The 128-bit and 256-bit UEIDs will coexist just fine. \r\n\r\nI firmly believe we must say now the receivers must be prepared for 256 bits.\r\n\r\nThe question is probably between these two:\r\n\r\n1. Require 256 bits now; waste space for a few decades; no transition will ever be needed.\r\n2. Require only 128 bits now; don't waste space; have a transition if and when the need arises\r\n\r\n\r\n\r\n",
          "createdAt": "2019-11-08T21:48:00Z",
          "updatedAt": "2019-11-08T21:48:00Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "NONE",
          "body": "Waste space for a few decades?  The IETF is barely 30 years old.\r\n\r\nAlso, \"128 bits is enough\" -- don't confuse the DIGEST with the crypto KEYLENGTH.  Few people think 128-bit digest is good enough, but most think 128bit AES, for example, is good enough.\r\n",
          "createdAt": "2019-11-08T22:01:13Z",
          "updatedAt": "2019-11-08T22:01:13Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "@richsalz \r\n\r\nAre you in favor of 1 or 2? I assume 1, but don't understand your comment about IETF being 30 years old.\r\n\r\nAgree that my discussion of bits used by crypto today is not very useful here. The only really useful point is that we build in agility to protocols today so they can use more bits when needed.\r\n",
          "createdAt": "2019-11-12T19:58:27Z",
          "updatedAt": "2019-11-12T19:58:27Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "NONE",
          "body": "The IETF is 30 years old, planning for \"waste space for a few decades\" when the whole thing has only been around for three seems, well, optimistic? Naive? Wrong? Silly? Because of this, I think 1 is the wrong trade-off and I support 2. (Recall the Internet has already changed core protocols multiple times)",
          "createdAt": "2019-11-12T20:15:24Z",
          "updatedAt": "2019-11-12T20:15:24Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "For me the UEID discussion is strange because UEIDs seem to overload identity and integrity. An IMEI number encodes some information attributes that provides uniqueness within telco networks. There is not expectation of integrity that is provided by some other structure. \r\nIn a perfect world, the structure would be defined using a DDL like CDDL and everything consuming it would support variable length structures. However, the reality is systems are built with fixed length assumptions and so we see schemes that encode multiple attributes into a fixed length structure. If there are many attributes needed to make something \"unique\" then some favor using a hash algorithm since it can reduce anything into a fixed size statistically unique value. The decision to go with 128 or 256 bits has more to do with the intended scope of identifier use. Since UEID intends to combine lots of different identifiers (each being unique within their respective scope) the union of all them creates a larger scope context for understanding uniqueness (aka resistance to collision). Since, nobody (AFAIK) has done an analysis to determine the actual size of the union-of-all-EIDs (UEID), we don't know if 128-bits still has the collision resistance properties it needs. 256 seems safe at least for now. \r\n\r\nAlternatively, EAT / RATS could allow claims that more directly define the identifier type and context. For example, there could be an IMEI claim. \r\n\r\nI'm not sure the intended value of UEID actually exists. \r\n\r\n",
          "createdAt": "2020-01-06T22:42:19Z",
          "updatedAt": "2020-01-06T22:42:19Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "UEIDs can be IMEIs (read the document). UEIDs are only about identity, never about integrity.",
          "createdAt": "2020-01-08T03:02:05Z",
          "updatedAt": "2020-01-08T03:02:05Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA0NTMyNTk3",
          "commit": {
            "abbreviatedOid": "7aa0912"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-21T12:45:32Z",
          "updatedAt": "2019-10-21T12:45:53Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "typo\r\n```suggestion\r\nto internal buses, via serial links, Bluetooth and so on.  This is\r\n```",
              "createdAt": "2019-10-21T12:45:33Z",
              "updatedAt": "2020-02-07T15:31:25Z"
            },
            {
              "originalPosition": 102,
              "body": "```suggestion\r\nHowever, for the very large values involved here, this formula requires floating\r\n```",
              "createdAt": "2019-10-21T12:45:38Z",
              "updatedAt": "2020-02-07T15:31:25Z"
            },
            {
              "originalPosition": 103,
              "body": "```suggestion\r\npoint precision higher than commonly available in calculators and SW so this\r\n```",
              "createdAt": "2019-10-21T12:45:41Z",
              "updatedAt": "2020-02-07T15:31:25Z"
            },
            {
              "originalPosition": 151,
              "body": "```suggestion\r\n32-bytes, is selected because it is the output of the common SHA-256 hash\r\n```",
              "createdAt": "2019-10-21T12:45:45Z",
              "updatedAt": "2020-02-07T15:31:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzMzI3MTYx",
          "commit": {
            "abbreviatedOid": "7aa0912"
          },
          "author": "setrofim",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-07T13:13:11Z",
          "updatedAt": "2019-11-07T13:13:12Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "Typo\r\n```suggestion\r\n## Collision Probability\r\n```",
              "createdAt": "2019-11-07T13:13:12Z",
              "updatedAt": "2020-02-07T15:31:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE1Nzk5ODc0",
          "commit": {
            "abbreviatedOid": "fda4a07"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-12T19:50:55Z",
          "updatedAt": "2019-11-12T19:50:56Z",
          "comments": [
            {
              "originalPosition": 103,
              "body": "Grammar",
              "createdAt": "2019-11-12T19:50:55Z",
              "updatedAt": "2020-02-07T15:31:25Z"
            }
          ]
        }
      ],
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "e0132c0a3bf8abf876b8cfd88c1d92ca4d844ea1",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "256bitUEID",
      "headRefOid": "f4ecbb9d381fb536e6dc8b2a0ae2ba088cda0b32",
      "mergeCommit": {
        "oid": "7d9a8de9cf276d7a71b4eaa8bf254f3757966fcf"
      }
    },
    {
      "number": 36,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI3MzE3NTAy",
      "title": "Revamp debug disable so it is levels, not Booleans",
      "url": "https://github.com/ietf-rats-wg/eat/pull/36",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This addresses #22",
      "createdAt": "2019-10-11T18:30:31Z",
      "updatedAt": "2020-03-19T18:05:38Z",
      "closedAt": "2020-03-19T18:05:30Z",
      "mergedAt": "2020-03-19T18:05:30Z",
      "mergedBy": "laurencelundblade",
      "comments": [
        {
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "body": "The change to a set of levels is a good one as it solves inconsistencies with the previous multi claim set.\r\n\r\nPSA calls out a further concept to be tracked for debug: how intrusive the level of debug is, ie. whether it just applies to the non-secure application state or to a higher level of security. The implication of the latter is that the configuration of the device/entity could be compromised making it unsuitable for further trust.",
          "createdAt": "2019-11-07T14:29:40Z",
          "updatedAt": "2019-11-07T14:29:40Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "@SimonFrost-Arm \r\n\r\nI am scared to try to express debug intrusiveness in claims because I'm not sure it can be easily done in a general way. Different CPU and system architectures might be too different. Are you suggesting we try? \r\n\r\nTo go into more detail... Some HW I know of has a whole facility for HW diagnostic and verification. It just helps the HW manufacturer know that the chip actually works. It might be used during RMA to figure what is wrong.\r\n\r\nAnother is a facility like ARM CoreSight. I believe that is connected to through JTAG.\r\n\r\nWhen you talk about PSA secure vs non-secure are you talking about HW or SW debug facilities?\r\n\r\n\r\n\r\n",
          "createdAt": "2019-11-12T19:29:36Z",
          "updatedAt": "2019-11-12T19:29:36Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "COLLABORATOR",
          "body": "I do not understand how this is supposed to work, tbh. Is this supposed to be a choice of integers that represent a range? If so, it is not doing that. If not, I do not understand what is attempted.\r\n\r\n>     debug_disable_level = (\r\n>         not_disabled: 0, \r\n>         disabled: 1,\r\n>         disabled_since_boot: 2,\r\n>         permanent_disable: 3,\r\n>         full_permanent_disable: 4\r\n>     )\r\n\r\nBranch cddl-fixes includes a \"fixed\" version that still uses bool. If I understand the intent here, I can incorporate that in the cddl-fixes branch.",
          "createdAt": "2019-11-27T20:53:44Z",
          "updatedAt": "2019-11-27T20:53:44Z"
        },
        {
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "body": "The intent of the change is to remove the possibility of inconsistency that could occur with the multi bool approach e.g. it would be possible to have a token containing both debug_disabled_since_boot and debug_permanently disabled - which is the case? Replacing the multiple values with a single multi-level value makes the declaration much clearer.",
          "createdAt": "2019-11-28T10:57:06Z",
          "updatedAt": "2019-11-28T10:57:06Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "COLLABORATOR",
          "body": "If all possible options are mutual exclusive it would look like this:\r\n\r\n> debug_disable_level /= not_disabled\r\n> debug_disable_level /= disabled\r\n> debug_disable_level /= disabled_since_boot\r\n> debug_disable_level /= permanent_disable\r\n> debug_disable_level /= full_permanent_disable\r\n> \r\n> ;this is the CBOR specific value list\r\n> not_disabled = 0\r\n> disabled = 1\r\n> disabled_since_boot =2\r\n> permanent_disable = 3\r\n> full_permanent_disable = 4\r\n",
          "createdAt": "2019-11-28T11:41:57Z",
          "updatedAt": "2019-11-28T11:41:57Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "COLLABORATOR",
          "body": "After I understood the intent via PR #43 and if you really want to use the \"&\" prefix, the corresponding CDDL for this PR should probably look like this:\r\n\r\n> boot_state_claim = ( boot_state => boot_state_type )\r\n> \r\n> debug_disable_level = (\r\n>   not_disabled,\r\n>   disabled,\r\n>   disabled_since_boot,\r\n>   permanent_disable,\r\n>   full_permanent_disable,\r\n> )\r\n> \r\n> boot_state_type = [\r\n>   secure_boot_enabled: bool,\r\n>   debug_state: &debug_disable_level,\r\n> ]\r\n> \r\n> ;this is the CBOR specific value list\r\n> not_disabled = 0\r\n> disabled = 1\r\n> disabled_since_boot = 2\r\n> permanent_disable = 3\r\n> full_permanent_disable = 4\r\n\r\n",
          "createdAt": "2019-11-28T12:15:36Z",
          "updatedAt": "2019-11-28T12:15:36Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "@henkbirkholz \r\n\r\n> debug_disable_level = (\r\n>     not_disabled: 0, \r\n>     disabled: 1,\r\n>     disabled_since_boot: 2,\r\n>     permanent_disable: 3,\r\n>     full_permanent_disable: 4\r\n> )\r\n\r\nThis seems OK to me because it is the same as section 2.2.2.2 in RFC 8610.\r\n\r\nSeems simpler to do this than the other ways you've proposed. I assume it would work OK for JSON.\r\n\r\nI've fixed the other CDDL that was clearly wrong with a commit.\r\n\r\nThanks for the input.\r\n",
          "createdAt": "2019-12-06T22:29:23Z",
          "updatedAt": "2019-12-06T22:29:23Z"
        },
        {
          "author": "adrianlshaw",
          "authorAssociation": "NONE",
          "body": "> When you talk about PSA secure vs non-secure are you talking about HW or SW debug facilities?\r\n\r\n@laurencelundblade in the PSA definition it can be either or a combination, depending on the hardware platform capabilities. Nothing platform specific is assumed. In fact, \"Secure and non-secure\" isn't actually the term used. The actual states are more about the debug property relative to the root of trust. See the diagram below, but replace \"PRoT\" with your favourite root of trust e.g. TEE. \r\n\r\n![image](https://user-images.githubusercontent.com/762640/71889110-5a884b80-3139-11ea-9b0b-df893498b1dc.png)\r\n\r\nThe Decommissioned state is RMA. The \"Terminate\" process is the point of no return because the root of trust is compromised. \r\n\r\n\"Recoverable PRoT debug\" is an optional state that covers a case where you have special hardware that hides the root secrets while in that mode, making it possible to re-establish trust (go back to \"Secured\") once leaving that mode.",
          "createdAt": "2020-01-07T10:42:56Z",
          "updatedAt": "2020-01-07T10:42:56Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "@SimonFrost-Arm Good comment. Updated with a new Not Reported debug level that is also the default.",
          "createdAt": "2020-01-15T21:53:43Z",
          "updatedAt": "2020-01-15T21:53:43Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzMzgwODYz",
          "commit": {
            "abbreviatedOid": "2755c26"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-07T14:34:04Z",
          "updatedAt": "2019-11-07T14:34:05Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "```suggestion\r\nmay be possible to enable them in the future, and it may also be possible that they were enabled in the past after the device booted, but they are currently disabled.\r\n```",
              "createdAt": "2019-11-07T14:34:04Z",
              "updatedAt": "2020-03-19T18:02:16Z"
            }
          ]
        }
      ],
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "22462da89d970fbb3b5922402263381ea5052692",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "update_debug_claim",
      "headRefOid": "cc226daac1d6dcef8bcd71e7bbd1ca4e268fc038",
      "mergeCommit": {
        "oid": "0bc0f9149f544855ba400989efdd9b4961257ef8"
      }
    },
    {
      "number": 41,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI5NDEzMzYx",
      "title": "OEMID clarifications and references",
      "url": "https://github.com/ietf-rats-wg/eat/pull/41",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Corrected text and references to match up to the IEEE documents and specs.\r\n\r\nDefines new encoding type, hex_bstr, that encodes to bstr in CBOR for compactness and hexadecimal text in JSON for readability.\r\n\r\nThis is to address #38",
      "createdAt": "2019-10-17T18:59:42Z",
      "updatedAt": "2019-12-05T23:05:26Z",
      "closedAt": "2019-12-05T23:05:18Z",
      "mergedAt": "2019-12-05T23:05:18Z",
      "mergedBy": "laurencelundblade",
      "comments": [
        {
          "author": "henkbirkholz",
          "authorAssociation": "COLLABORATOR",
          "body": "https://standards.ieee.org/products-services/regauth/oui/index.html\r\n\r\nThe IEEE highlights that the term Organizationally Unique Identifier (OUI) is deprecated and superseded by the terms MA-L, MA-M, and MA-S, which are now used for both for EUI-48 and EUI-60.",
          "createdAt": "2019-11-27T20:50:07Z",
          "updatedAt": "2019-11-27T20:50:07Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "@henkbirkholz Yes, this pull request changes to the correct MA-L... terminology.",
          "createdAt": "2019-12-05T22:50:16Z",
          "updatedAt": "2019-12-05T22:50:16Z"
        }
      ],
      "reviews": [],
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "bdb24b4b85f06781b66f92d6c458e489d39cd8ab",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "update_oui",
      "headRefOid": "2ab6190aa9be537fcb70523c352154d49a75b00b",
      "mergeCommit": {
        "oid": "a69331d7248345bde8fad2de93e4ce39c753be85"
      }
    },
    {
      "number": 42,
      "id": "MDExOlB1bGxSZXF1ZXN0MzMxNzM1NDIx",
      "title": "Add nonce claim, update jti/cti text",
      "url": "https://github.com/ietf-rats-wg/eat/pull/42",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #37",
      "createdAt": "2019-10-23T20:40:45Z",
      "updatedAt": "2021-05-25T18:35:25Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "a69331d7248345bde8fad2de93e4ce39c753be85",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "nonce",
      "headRefOid": "a02377d0dff75d01c2330039a5aa01fef655c6e5",
      "closedAt": "2020-01-06T19:11:21Z",
      "mergedAt": "2020-01-06T19:11:21Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "efd3e2c1217936ca454d8b666e90e1a832a46152"
      },
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "@gmandyam in #28 discusses multiple relying parties (RPs) and nonces. There are three ways to solve this. \r\n\r\n1. Each RP can generate their own nonce and send it to the attester. The attester puts them all in. In that case the nonce should be either a bstr with a single nonce or an array of bstr to carry multiple nonces. This is incompatible with the JWT nonce and we'd have to create a new claim it. Call it the multi-nonce claim.\r\n\r\n2. The RP's are expected to coordinate around one nonce and the nonce claim is just a single as it is. This is not too difficult. One of them has to generate it and tell the others what it is. This is compatible with the JWT nonce and with the current text.\r\n\r\n3. We can define two claim types. One is the nonce as is in JWT and as in this PR. The other is the multi-nonce.\r\n\r\nI'm in favor of 2 now. If we really need multiple nonces sometime in the future we can turn it into 3. I guessing multiple nonces will not be that necessary. I can't say that I've seen it any other protocol.",
          "createdAt": "2019-12-06T21:48:50Z",
          "updatedAt": "2019-12-06T21:48:50Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzMzM2OTA3",
          "commit": {
            "abbreviatedOid": "faaa9d0"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-07T13:29:58Z",
          "updatedAt": "2019-11-07T13:29:59Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "It is not clear what this means to me.  Besides, in the light of the text proposed in #28\r\n```\r\n[...] Since an EAT may be created by an entity that may not support the same type of transport security as the consumer of the EAT, intermediaries may be required to bridge communications between the entity and consumer.  As a result, it is RECOMMENDED that both the consumer create a nonce, and the entity leverage the nonce along with COSE mechanisms for encryption and signing to create the EAT\r\n```\r\nthis should probably be dropped?",
              "createdAt": "2019-11-07T13:29:59Z",
              "updatedAt": "2019-12-06T22:43:18Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE4NzEwNDc0",
          "commit": {
            "abbreviatedOid": "faaa9d0"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-19T00:04:30Z",
          "updatedAt": "2019-11-19T00:04:30Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "Hi Thomas,\r\n\r\nHave read this over a few times, but I don't know what is not clear to you and what you think should be dropped.\r\n",
              "createdAt": "2019-11-19T00:04:30Z",
              "updatedAt": "2019-12-06T22:43:18Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE4ODYxNjMz",
          "commit": {
            "abbreviatedOid": "faaa9d0"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-19T08:43:45Z",
          "updatedAt": "2019-11-19T08:43:46Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "(Apologies for the late response -- for some reasons I didn't get the nudge from\r\nGitHub on your reply).   The thing that I don't understand is `Note that\r\nintrinsically by the nature of a nonce no security is needed`.  In fact, I think\r\nit's quite the opposite: the nonce is core to the security of the attestation?\r\nMy suggestion is to simply drop the `Note [...] no security is needed`.",
              "createdAt": "2019-11-19T08:43:45Z",
              "updatedAt": "2019-12-06T22:43:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 43,
      "id": "MDExOlB1bGxSZXF1ZXN0MzM1MjYyMTM0",
      "title": "revamp of submods and nested tokens",
      "url": "https://github.com/ietf-rats-wg/eat/pull/43",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This makes nested tokens be part of the submods part of the token with a more unified results.\r\n\r\nIt gets rid of the submod name claim and uses the map label instead.\r\n\r\nIt adds the attachment claim which describes how securely submod is attached.",
      "createdAt": "2019-11-01T03:14:44Z",
      "updatedAt": "2020-02-13T11:15:54Z",
      "closedAt": "2020-02-13T11:15:54Z",
      "mergedAt": "2020-02-13T11:15:54Z",
      "mergedBy": "laurencelundblade",
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm sorry but what we want to achieve with this change is not clear to me. (I've looked for a related Issue to no avail.) Could you please describe the rationale of this change in an Issue (or point me at an existing one, if I overlooked it)?\r\nAs a meta-comment I think in general it's good practice to open an Issue first where the problem is explained (maybe just pointing to the corresponding mailing list thread, if one exist) and a solution is proposed.  This gives others the opportunity to discuss both the problem and the solution design before it's actually implemented.",
          "createdAt": "2019-11-07T17:28:28Z",
          "updatedAt": "2019-11-07T17:28:28Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "@thomas-fossati \r\n\r\nBefore this change\r\n- Only one nested EAT was possible (without duplicate map keys/labels; duplicating keys/labels is not good form).\r\n- There was no way to name a nested EAT\r\n- A nested EAT was treated separately from a submod so it made writing about inheritance and attachment in common harder.",
          "createdAt": "2019-11-08T21:53:43Z",
          "updatedAt": "2019-11-08T21:53:43Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Here's a comment from Ned that I'm copying to the mainline for easier reference:\r\n\r\n> The submodule could have attestation capability itself in which case the verifier might be instructed to assess the subcomponent claims as another instance of an attestation token. Maybe it makes sense to include an attachment_type for attestable_submod? Additionally, the submodule could be attached using a secure session / protocol. I don't see this represented. The structure is an enumeration, but it is possible for multiple attachment_type conditions to be true at the same time. For example, a submodule could separately attests and be connected via secure session. Possibly attestable_submod is a property that belongs somewhere else? A secure_protocol attachment type could be true as well when one of the other attachment_types are true. Maybe it belongs somewhere else too? (Or these should be booleans).\r\n\r\nNed, it seems like you want to distinguish between \"claims from a submod\" and \"attested claims from a submod\". I don't know what the difference is (yet). Can you give some examples?\r\n\r\nOn attachment_type, we could make it an array of enumerated so you can specify more than one. We could even have an IANA registry for new types.  My thought is to try to come up with a small fixed useful set of classes. If we let 1000 flowers bloom here it will become useless to the relying party. They should be classes, rough categories, not exact types. The vendor has to pick the one most suited.\r\n\r\n\r\n",
          "createdAt": "2019-11-21T00:19:01Z",
          "updatedAt": "2019-11-21T00:19:01Z"
        },
        {
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "body": "It would seem that 'attested claims from a submod' is already covered by nested-eat?",
          "createdAt": "2019-11-21T12:08:30Z",
          "updatedAt": "2019-11-21T12:08:30Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "COLLABORATOR",
          "body": "Same problem as with PR #36 \r\n\r\nIf the CDDL fragment is supposed to be a type choice that represent a range of values, it is not doing that.\r\n\r\n>     attachment_type = (\r\n>     unspecified: 1,\r\n>     device_internal: 2,\r\n>     pcb_internal: 3,\r\n>     chip_internal: 4\r\n>     )\r\n> \r\n>     attachment_type_claim = (\r\n>     attachment: attachment_type )\r\n\r\nIf i understand the intent, I can add corresponding CDDL to the cddl-fixes branch.",
          "createdAt": "2019-11-27T21:03:16Z",
          "updatedAt": "2019-11-27T21:03:16Z"
        },
        {
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "body": "I believe the appropriate CDDL would be\r\nattachment_type_claim = &attachment_type\r\nwith attachment_type left as it is as a group. Per 2.2.2.2 of draft-ietf-cbor-cddl-03.\r\n\r\nThis encoding already appears to be in place in PR36",
          "createdAt": "2019-11-28T11:10:28Z",
          "updatedAt": "2019-11-28T11:10:28Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes. https://tools.ietf.org/html/rfc8610#section-2.2.2.2 is an alternative use. Typically, it is used for either for a large number of values or if the group is also used in other contexts. In general, this is fine, too. It is just me being personally a bit more in favor of the style I just highlighted in #36.\r\n\r\nPR #36 is broken nevertheless (sorry for the cross issue post), as the will not work, it  also uses string labels with implied cuts, and you cannot use a rule inside as an array item. I'll post another comment there.\r\n\r\nComing back to this PR. I assume what you want looks more like this (I'd also start with index \"0\" to be consistent with PR #36:\r\n\r\n> attachment_type_claim = ( attachment => &attachment_type )\r\n> \r\n> attachment_type = (\r\n>   unspecified,\r\n>   device_internal,\r\n>   pcb_internal,\r\n>   chip_internal,\r\n> )\r\n> \r\n> ;this is the CBOR specific value list\r\n> unspecified = 0\r\n> device_internal = 1\r\n> pcb_internal = 2\r\n> chip_internal = 3\r\n\r\n\r\n",
          "createdAt": "2019-11-28T12:04:04Z",
          "updatedAt": "2019-11-28T12:04:04Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "> It would seem that 'attested claims from a submod' is already covered by nested-eat?\r\n\r\nThis PR replaces the nested-eat claim. ",
          "createdAt": "2019-12-06T22:02:52Z",
          "updatedAt": "2019-12-06T22:02:52Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "Laurence said \"Ned, it seems like you want to distinguish between \"claims from a submod\" and \"attested claims from a submod\". I don't know what the difference is (yet). Can you give some examples?\"\r\nAttested means signed by an Attester. If the submods/nested-eat allows for 'unsigned EAT' structures then it is possible to describe components that exist but are not 'attested'. There is a security semantic that could become misinterpreted by Verifiers if signing of something that is nested wasn't inspected by the Attester. Example is a peripheral device that is enumerated by BIOS but contains embedded firmware (as opposed to option-ROM). The BIOS is in the Attester but can't inspect the embedded firmware of the peripheral device. It can assert that the device exists (was enumerated) but can't vouch for the integrity of its firmware. The peripheral should be a second Attester based on a root of trust that exists in the peripheral. \r\n\r\nIf the EAT structure describes both the peripheral device (D1) and the main board / platform (P1) then the Attester for P1 will likely sign an EAT that contains P1 claims (p0, p1, p2,...) and D1 claims (d0, d1, d2, d3,...) using the P1 attestation key. If [] denotes signing, the claim might look like [[p0, p1, p2, [d0, d1, d2,...]KD1 ]KP1; where K denotes a signing key. \r\n\r\nIf on the other hand, there isn't an attester for D1, but P1 wants to assert that D1 exists. Then it would product an EAT with the structure [p0, p1, p2,..., d0, d1, d2, ...]KP1 \r\n\r\nThe point of possible confusion by the Verifier is whether or not P1 is saying that D1 exists or that D1 is attested by P1; where \"attested\" also (in addition to signing) means that the integrity of D1 is proven to be correct because of some special access P1 has to D1. \r\n\r\nThe Interface (attachment_type) claim may be helpful in that it could describe the relationship between P1 and D1. For example, if D1 firmware were stored in memory that is dual ported to P1 then P1 could directly read it and compute its hash. However, the current interface claim structure doesn't describe the security relevant properties of the interface (AFAK).\r\n\r\nI think the architecture intends for Attester to mean an environment that has special access to the Attestee such that it can prove its state is X AND that it can sign claims about X. \r\n\r\nIf the structure of nested EATs somehow allows the Attester/Attestee relationships to breakdown then Verifiers will be confused about the security properties of what an EAT is asserting. ",
          "createdAt": "2020-01-06T22:15:22Z",
          "updatedAt": "2020-01-06T22:15:22Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzMzQ2NjU2",
          "commit": {
            "abbreviatedOid": "5606f48"
          },
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-07T13:45:34Z",
          "updatedAt": "2019-11-07T13:45:35Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "If submods are used structurally within an EAT, they should be able to have the same level of security as the EAT (rather than making lesser security mandatory). May just be unfortunate usage of the word 'should' and can be stated as 'not higher'?",
              "createdAt": "2019-11-07T13:45:34Z",
              "updatedAt": "2020-02-13T11:13:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzMzU0OTI3",
          "commit": {
            "abbreviatedOid": "5606f48"
          },
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-07T13:57:37Z",
          "updatedAt": "2019-11-07T13:57:37Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "this seems to contradict line 755 which mandates the inclusion of all such claims.\r\nShould there be an explicit statement (or claim value) for whether submod is expected to inherit or not rather than making it implicit on attachment type?",
              "createdAt": "2019-11-07T13:57:37Z",
              "updatedAt": "2020-02-13T11:13:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEzMzU2ODcx",
          "commit": {
            "abbreviatedOid": "5606f48"
          },
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-07T14:00:25Z",
          "updatedAt": "2019-11-07T14:00:25Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "mismatch here with naming @ line 660",
              "createdAt": "2019-11-07T14:00:25Z",
              "updatedAt": "2020-02-13T11:13:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE1Nzk1ODEw",
          "commit": {
            "abbreviatedOid": "5606f48"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-12T19:44:09Z",
          "updatedAt": "2019-11-12T19:44:09Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "Oversight. Should be less than or equal too. Thanks for catching.",
              "createdAt": "2019-11-12T19:44:09Z",
              "updatedAt": "2020-02-13T11:13:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE1Nzk5MTE0",
          "commit": {
            "abbreviatedOid": "5606f48"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-12T19:49:36Z",
          "updatedAt": "2019-11-12T19:49:36Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "Line 754 is explicit that there is no inheritance.\r\n\r\nAgree that the wording here is fuzzy.\r\n\r\nThe nonce is intrinsically different from other claims as it does not describe the entity. It comes from the relying party to prevent replay. To replicate or not replicate the nonce could be considered to not be an inheritance question and we could have explicit text spelling all this out.",
              "createdAt": "2019-11-12T19:49:36Z",
              "updatedAt": "2020-02-13T11:13:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE1Nzk5MzA0",
          "commit": {
            "abbreviatedOid": "5606f48"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-12T19:49:55Z",
          "updatedAt": "2019-11-12T19:49:55Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Agreed",
              "createdAt": "2019-11-12T19:49:55Z",
              "updatedAt": "2020-02-13T11:13:28Z"
            }
          ]
        }
      ],
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "7d9a8de9cf276d7a71b4eaa8bf254f3757966fcf",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "submods_revamp",
      "headRefOid": "622711b698cedb42e77b9b576cc065542601c784",
      "mergeCommit": {
        "oid": "2c14b48b2b43df2f23f1c6c0a0540f4ee1db8331"
      }
    },
    {
      "number": 47,
      "id": "MDExOlB1bGxSZXF1ZXN0MzQ2MzgxMzg3",
      "title": "added first pass of (Co)SWID and SUIT Manifest Claims",
      "url": "https://github.com/ietf-rats-wg/eat/pull/47",
      "state": "CLOSED",
      "author": "henkbirkholz",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This is a first proposal for content matching the proposal in issue https://github.com/ietf-rats-wg/eat/issues/46.",
      "createdAt": "2019-11-27T18:47:22Z",
      "updatedAt": "2021-05-28T18:30:23Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "5bfb9df8c6c6043a71bc98c140a100e4a0c278c6",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "coswid-&-suit-mainfest-claims",
      "headRefOid": "beff915ec4debd38d6137ed902b69ddf40d0666d",
      "closedAt": "2021-05-28T18:30:23Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "There is a lesson learned here.... \ud83d\ude48\r\n\r\nUsing an \"&\" in a branch name does not make CircleCI very happy...\r\n\r\n> mkdir -p /tmp/ghpages127/coswid-&-suit-mainfest-claims\r\n> bash: -suit-mainfest-claims: command not found\r\n> lib/ghpages.mk:56: recipe for target '/tmp/ghpages127/coswid-&-suit-mainfest-claims' failed",
          "createdAt": "2019-11-27T18:51:40Z",
          "updatedAt": "2019-11-27T18:51:40Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed by #102 ",
          "createdAt": "2021-05-28T18:30:23Z",
          "updatedAt": "2021-05-28T18:30:23Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 48,
      "id": "MDExOlB1bGxSZXF1ZXN0MzQ2NDE5NjQ3",
      "title": "first pass on fixing CDDL specification fragments ",
      "url": "https://github.com/ietf-rats-wg/eat/pull/48",
      "state": "CLOSED",
      "author": "henkbirkholz",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "According to the new intend of using is as a data model for EAT, initial focus on CWT",
      "createdAt": "2019-11-27T20:46:03Z",
      "updatedAt": "2021-05-25T18:35:23Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "5bfb9df8c6c6043a71bc98c140a100e4a0c278c6",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "cddl-fixes",
      "headRefOid": "e144f73d145f42fa63278675353ba1d30292b2c8",
      "closedAt": "2020-11-09T18:58:27Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @henkbirkholz for this. It is helpful and I've been using it to update the other PRs. I probably won't merge this, just use parts in the other PRs because it has lots of merge conflicts with the other PRs. I will leave it open until all the CDDL is resolved.\r\n",
          "createdAt": "2019-12-07T00:44:20Z",
          "updatedAt": "2019-12-07T00:44:20Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been overtaken by other fixes.",
          "createdAt": "2020-11-09T18:58:27Z",
          "updatedAt": "2020-11-09T18:58:27Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 52,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzc0ODgwNzY5",
      "title": "Lots of CDDL fixes",
      "url": "https://github.com/ietf-rats-wg/eat/pull/52",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-02-13T13:54:03Z",
      "updatedAt": "2020-02-19T11:35:04Z",
      "closedAt": "2020-02-19T11:35:04Z",
      "mergedAt": "2020-02-19T11:35:04Z",
      "mergedBy": "laurencelundblade",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4Mjg5Nzg5",
          "commit": {
            "abbreviatedOid": "db6096a"
          },
          "author": "henkbirkholz",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-13T15:05:04Z",
          "updatedAt": "2020-02-18T09:04:40Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "s/defineeach/define each/g",
              "createdAt": "2020-02-13T15:05:04Z",
              "updatedAt": "2020-02-19T11:33:45Z"
            },
            {
              "originalPosition": 54,
              "body": "As the CDDL fixes are based on PR #48 posted by me. Is the change back to string label here intentional?\r\n\r\nAlso, why allow for 7 byte length (56 bit)? Also, the max size is now 264 bit. Is there a reason I missed?\r\n\r\nIf we want to allow for 128 bit and 256 bit. I'd still propose\r\n\r\nueid-claim /= ( ueid => bytes .size 16 )\r\nueid-claim /= ( ueid => bytes .size 32 )\r\n\r\nand do not understand this change, to be honest.",
              "createdAt": "2020-02-13T19:47:43Z",
              "updatedAt": "2020-02-19T11:33:45Z"
            },
            {
              "originalPosition": 72,
              "body": "What is string-or-uri?\r\n\r\nA reference to a cddl type definition would be useful. If there is none, I'd still propose\r\n\r\norigination-claim = ( origination => text / URI )\r\n\r\nas in PR #48\r\n\r\nAlso, is it intentional that this is a string label, too?",
              "createdAt": "2020-02-13T19:50:02Z",
              "updatedAt": "2020-02-19T11:33:45Z"
            },
            {
              "originalPosition": 96,
              "body": "Again a string label.\r\n\r\nAlso, should this not be size differentiated by eui-48 and eui-64 wrt MA-L?\r\n\r\nAlso, new first time customers cannot get MA-L anymore. Should we therefore explicitly differentiate MA-M and MA-S, too? This is in the text, but not captured by CDDL controls. ",
              "createdAt": "2020-02-13T19:59:43Z",
              "updatedAt": "2020-02-19T11:33:45Z"
            },
            {
              "originalPosition": 155,
              "body": "String labels",
              "createdAt": "2020-02-18T08:56:19Z",
              "updatedAt": "2020-02-19T11:33:45Z"
            },
            {
              "originalPosition": 202,
              "body": "location => location-type",
              "createdAt": "2020-02-18T08:56:42Z",
              "updatedAt": "2020-02-19T11:33:45Z"
            },
            {
              "originalPosition": 378,
              "body": "latitude = \"lat\"",
              "createdAt": "2020-02-18T09:03:10Z",
              "updatedAt": "2020-02-19T11:33:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMjU1NjI4",
          "commit": {
            "abbreviatedOid": "db6096a"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-18T11:14:12Z",
          "updatedAt": "2020-02-18T11:14:13Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "This is an OUI or CD, not EUI.\r\n\r\nIt needs to be possible to use OUIs and such that were obtained 20-30 years ago, so it is OK as is.",
              "createdAt": "2020-02-18T11:14:12Z",
              "updatedAt": "2020-02-19T11:33:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMjU1ODI2",
          "commit": {
            "abbreviatedOid": "db6096a"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-18T11:14:34Z",
          "updatedAt": "2020-02-18T11:14:34Z",
          "comments": [
            {
              "originalPosition": 378,
              "body": "Fixed",
              "createdAt": "2020-02-18T11:14:34Z",
              "updatedAt": "2020-02-19T11:33:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMjU2MzUx",
          "commit": {
            "abbreviatedOid": "db6096a"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-18T11:15:22Z",
          "updatedAt": "2020-02-18T11:15:22Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "It is defined later in the doc roughly as you suggest.",
              "createdAt": "2020-02-18T11:15:22Z",
              "updatedAt": "2020-02-19T11:33:45Z"
            }
          ]
        }
      ],
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "136d631593e21078c3d1010f1866ce837f7ed189",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "ll_cddl_fixes",
      "headRefOid": "28f56165762c5b073c43e458631bf608ea05e0d7",
      "mergeCommit": {
        "oid": "a648f41f4040e94847d2f6669bb0045e4331d53a"
      }
    },
    {
      "number": 56,
      "id": "MDExOlB1bGxSZXF1ZXN0MzgxMzczNzA2",
      "title": "Fix sentences describing Major type 2 and other types",
      "url": "https://github.com/ietf-rats-wg/eat/pull/56",
      "state": "MERGED",
      "author": "puiterwijk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-02-28T12:48:51Z",
      "updatedAt": "2020-03-19T18:06:21Z",
      "closedAt": "2020-03-19T18:06:21Z",
      "mergedAt": "2020-03-19T18:06:21Z",
      "mergedBy": "laurencelundblade",
      "comments": [],
      "reviews": [],
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "22462da89d970fbb3b5922402263381ea5052692",
      "headRepository": "puiterwijk/eat",
      "headRefName": "fixtypes",
      "headRefOid": "ff3604d2de7f477bb6241f6ff900bdeb55705d28",
      "mergeCommit": {
        "oid": "fd566501ef6d4de679b8feee7415eacc0e209bcb"
      }
    },
    {
      "number": 59,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk0OTc0MTkx",
      "title": "clarify iat claim; remove age claim; add timestamp to location",
      "url": "https://github.com/ietf-rats-wg/eat/pull/59",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is to address the timing diagram from Eric Voit and others. \r\n\r\nTimestamping of measurements is very important, but no measurement is defined in EAT (yet).\r\n",
      "createdAt": "2020-03-27T21:19:41Z",
      "updatedAt": "2020-11-06T19:35:51Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "6c97e22dbce3e2e5f4e8d573f42167e3aa3401ad",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "timestamp",
      "headRefOid": "9d55bd77ac2930bedeb974dcaf5a4d1e3ce7a9df",
      "closedAt": "2020-11-06T19:35:51Z",
      "mergedAt": "2020-11-06T19:35:51Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "4a3e78b6f37f192a55c1fa7e210b95bc6ffdc36d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 60,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTYxMDc0",
      "title": "Context claim",
      "url": "https://github.com/ietf-rats-wg/eat/pull/60",
      "state": "MERGED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See https://github.com/ietf-rats-wg/eat/issues/57",
      "createdAt": "2020-03-28T22:00:06Z",
      "updatedAt": "2020-11-30T19:45:24Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "fc1332ea343f2790f7a204150368c4b6925aaa3e",
      "headRepository": "gmandyam/eat",
      "headRefName": "context",
      "headRefOid": "ede2c2f70dab0898dd4bacfd6676e71913ae0b78",
      "closedAt": "2020-11-30T19:45:23Z",
      "mergedAt": "2020-11-30T19:45:23Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "4cfcbd9a678c498a34ea6e6a2ce9e0fcd42a1c1d"
      },
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems more like data that would be sent from the RP/Verifier to the Attester to tell it what to put in the token than a claim that goes in the token.\r\n\r\nIs this related to Intel/FIDO SDO?\r\n\r\nWhen a token is generated with one context type, what is it doing that is different from generating it for a different context type? It seems there has to be a difference. If there was no difference the RP wouldn't care and wouldn't need to know.\r\n",
          "createdAt": "2020-11-11T18:41:13Z",
          "updatedAt": "2020-11-11T18:41:13Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "@laurencelundblade \r\n\r\nIt is not related to FIDO or Intel/SDO.  It is from QWES token:  https://tools.ietf.org/html/draft-mandyam-rats-qwestoken-00#section-3.3.  \r\n\r\nOne use case is \"hardened TLS\", where a TLS client cert is required using a keypair created in a TEE.  The CA may require an attestation along with the CSR.  The context claim in the EAT will indicate to the RP (in this case a CA) that the private key corresponding to the CSR held is within a trusted environment.\r\n\r\n",
          "createdAt": "2020-11-11T22:04:05Z",
          "updatedAt": "2020-11-11T22:04:05Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNzA0MTcw",
          "commit": {
            "abbreviatedOid": "aaec8cd"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-17T19:11:02Z",
          "updatedAt": "2020-11-17T19:31:38Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Seems like this would be better named \"generic\". It's the one you pick when it's none of the others. I don't think it is on-demand because there will be cases when it is not one of the others and the consumer is not demanding the most recent.",
              "createdAt": "2020-11-17T19:11:03Z",
              "updatedAt": "2020-11-30T19:44:39Z"
            },
            {
              "originalPosition": 33,
              "body": "This should say explicitly that it is PoP *of a key* to be more clear.",
              "createdAt": "2020-11-17T19:12:28Z",
              "updatedAt": "2020-11-30T19:44:39Z"
            },
            {
              "originalPosition": 5,
              "body": "What about renaming this to \"Intended Use\" or \"Intended Use Class\" or \"Use Class\"? It definitely seems like a classification scheme so I think of the different values as different *classes*.",
              "createdAt": "2020-11-17T19:17:30Z",
              "updatedAt": "2020-11-30T19:44:39Z"
            },
            {
              "originalPosition": 8,
              "body": "Maybe add \"This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT\". ",
              "createdAt": "2020-11-17T19:24:24Z",
              "updatedAt": "2020-11-30T19:44:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTE2MTE3",
          "commit": {
            "abbreviatedOid": "2f98e3a"
          },
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-29T20:59:46Z",
          "updatedAt": "2020-11-29T20:59:46Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Updated draft to change to 'on-demand' to 'generic'",
              "createdAt": "2020-11-29T20:59:46Z",
              "updatedAt": "2020-11-30T19:44:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTE2MTQ2",
          "commit": {
            "abbreviatedOid": "2f98e3a"
          },
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-29T21:00:07Z",
          "updatedAt": "2020-11-29T21:00:07Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Updated draft to include a more specific description of PoP",
              "createdAt": "2020-11-29T21:00:07Z",
              "updatedAt": "2020-11-30T19:44:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTE2MTgy",
          "commit": {
            "abbreviatedOid": "2f98e3a"
          },
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-29T21:00:31Z",
          "updatedAt": "2020-11-29T21:00:32Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Changed name from 'context' to 'intended-use'",
              "createdAt": "2020-11-29T21:00:31Z",
              "updatedAt": "2020-11-30T19:44:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTE2MzM3",
          "commit": {
            "abbreviatedOid": "8fc4c70"
          },
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-29T21:02:29Z",
          "updatedAt": "2020-11-29T21:02:29Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Added statement.  Please check.",
              "createdAt": "2020-11-29T21:02:29Z",
              "updatedAt": "2020-11-30T19:44:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 61,
      "id": "MDExOlB1bGxSZXF1ZXN0NDA2MjY1OTc1",
      "title": "Disallow floating-point dates",
      "url": "https://github.com/ietf-rats-wg/eat/pull/61",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "CWT allows floating-point dates, but they are of no value and add an implementation burden, thus EAT is disallowing them.\r\n",
      "createdAt": "2020-04-20T19:48:40Z",
      "updatedAt": "2020-11-23T22:24:10Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "d7f685d2f808e1f5214d431c9865850982381009",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "no-float",
      "headRefOid": "916b787618c717b1cf71af814d4deba4f701b3c6",
      "closedAt": "2020-11-23T22:23:52Z",
      "mergedAt": "2020-11-23T22:23:52Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "91763d2374840cf79a0f53df7bacaa9425fdab91"
      },
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "This closes #49",
          "createdAt": "2020-11-23T22:24:06Z",
          "updatedAt": "2020-11-23T22:24:06Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 62,
      "id": "MDExOlB1bGxSZXF1ZXN0NDA2NzU0Nzky",
      "title": "Add defintion of UCCS and UJCS",
      "url": "https://github.com/ietf-rats-wg/eat/pull/62",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "UCCS and UJCS are unprotected CWT/JWT for use in contexts where protection is unnecessary or provided by other means.",
      "createdAt": "2020-04-21T15:59:35Z",
      "updatedAt": "2020-10-28T18:10:50Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "aac5de214068993208b41066f1717222abde6114",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "uccs",
      "headRefOid": "ed0e34b92c3efdfd9d44fc99ab8bf40f15ee79a4",
      "closedAt": "2020-10-28T18:10:50Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jimsch",
          "authorAssociation": "NONE",
          "body": "The JOSE way to do this is (shudder) to create a JWT with the signature algorithm of None.  You probably need to review this depending on where you are planning to use this.",
          "createdAt": "2020-04-21T16:45:50Z",
          "updatedAt": "2020-04-21T16:45:50Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "Is this meant to address https://github.com/ietf-rats-wg/eat/issues/54?  If not, which issue is associated with the PR?",
          "createdAt": "2020-04-21T16:51:52Z",
          "updatedAt": "2020-04-21T16:51:52Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, this is to address #54 ",
          "createdAt": "2020-04-26T08:21:42Z",
          "updatedAt": "2020-04-26T08:21:42Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed because UCCS is now in a separate draft by Henk",
          "createdAt": "2020-10-28T18:10:50Z",
          "updatedAt": "2020-10-28T18:10:50Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 66,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEwMjA1NTQx",
      "title": "Clarify and simplify way IMEIs are encoded",
      "url": "https://github.com/ietf-rats-wg/eat/pull/66",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "IMEI is encoded as byte string of 14 bytes eliminating confusion about big/little endian and conversion to/from an integer value. \r\n\r\nDoes make IMEI's encode to 14 bytes instead of 6 so there's a little bit of wasted space due to this.",
      "createdAt": "2020-10-26T17:53:25Z",
      "updatedAt": "2020-11-03T18:41:36Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "ce8393575f5038919f3128f61efecc56c27d4a80",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "IMEI_Encoding",
      "headRefOid": "b52cda59ce5dd00f0629906b05a92ed86239b6a9",
      "closedAt": "2020-11-03T18:41:36Z",
      "mergedAt": "2020-11-03T18:41:36Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "8e3aa5671999d555afc142368445386b20af2f87"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 67,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEwMzA4Nzk5",
      "title": "submods: UCCS, bstr wrapping, tagging rules",
      "url": "https://github.com/ietf-rats-wg/eat/pull/67",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Allows UCCS tokens\r\n\r\nIncorporates JWTs, secured and unsecured.\r\n\r\nRequires nested CWT submodules be bstr wrapped.\r\n\r\nHow to bring a UCCS in as a submodule.\r\n\r\nHow to put a JWT submodule in a CWT and vice versa.\r\n\r\nAll the rules for CWT and COSE tag usage.\r\n\r\nTop-level CDDL to handle CWT/COSE, UCCS and JWT",
      "createdAt": "2020-10-26T21:07:48Z",
      "updatedAt": "2020-11-27T18:40:48Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "8e6faefcc49715ab9ee8ac99d0fbf5bbe41bc8a3",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "submod_update",
      "headRefOid": "12f3947aacca223a07b7958723eda211561896c5",
      "closedAt": "2020-11-27T18:40:43Z",
      "mergedAt": "2020-11-27T18:40:43Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "700315fa9ee5b95f125969d81870051e03ff1363"
      },
      "comments": [
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "I'd like to propose the following contributions that would introduce changes to the current proposal.\r\n\r\n1.) The current root type is named eat-claims. I'd propose to change that to simply eat. eat-claims implies simply a claims set, I think.\r\n2.) If you really want to include JWT, the nested-token type should look like this:\r\n\r\n    nested-token = bstr .cbor eat / b64url\r\n\r\n3.) Change the name \"Non-token Submodules\" to simply \"Claims Sets\" (label: nested-claims-set)\r\n4.) Change the name \"Nested EAT\" to \"Token\" (label: nested-token). The nesting is intrinsic anyways and the term submodule does not really add anything - or maybe I am missing some context here? This also allows to \"nest\" CWT and not only EAT. CWT and EAT can only be differentiated by the composition of their Claims Sets anyways and therefore it is technically possible to use a CWT here already (although not allowed and that has to be checked by the application every time).\r\n5.) In general, I wonder why submod-name is necessary. This way each \"unknown\" label has to assumed to be a nested token or claims set. That is rather complex to parse on the application layer, isn't it? I propose to use distinct and well-defined labels for CWT and CWT Claims Sets (and if we are really going to do this the JSON equivalents for JWT as well - still not convinced here).",
          "createdAt": "2020-11-11T10:40:04Z",
          "updatedAt": "2020-11-11T10:41:55Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "1) The most correct CDDL top level definition of an \"eat\" would be a type that is either a CWT, UCCS or JWT. It would reference UCCS and COSE cddl. It would take express the tag rules. However, that runs into quite a mess as there's no way I know of to say a \"COSE with eat-claims as payload\" and would require a COSE implementation inside the cddl tool to validate. (Would CDDL sockets help here? How does the cddl tool handle them?)\r\n\r\n2) I tried that and got into trouble with the cddl validation tool. Also, are you sure JWT is always a complete and proper B64url? I think it has some semantically significant blank lines and there for is not.\r\n\r\n3) I am open to name change, but want to get to common understanding first.\r\n\r\n4) When something is an \"EAT\" its purpose is clearly attestation. When something is a \"CWT\" its purpose may be attestation or something else. Submods should only be tokens whose purpose is attestation.\r\n\r\n5) The intended use of submod name is for things like \"Acme TEE\", \"Qualcomm Hexagon DSP\", \"Infineon Secure Element\". For truly standardized identification of a submod, OEMID, HWVersion and CoSWID should be relied upon by the RP.\r\n\r\n\r\n",
          "createdAt": "2020-11-11T19:13:19Z",
          "updatedAt": "2020-11-11T19:43:19Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NTI3MDcy",
          "commit": {
            "abbreviatedOid": "19c2fe5"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-25T14:07:30Z",
          "updatedAt": "2020-11-25T14:07:30Z",
          "comments": [
            {
              "originalPosition": 158,
              "body": "spurious line",
              "createdAt": "2020-11-25T14:07:30Z",
              "updatedAt": "2020-11-27T18:39:19Z"
            }
          ]
        }
      ]
    },
    {
      "number": 68,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEwOTc0Njk3",
      "title": "Add chip, board and device hardware versions",
      "url": "https://github.com/ietf-rats-wg/eat/pull/68",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Address #33 \r\n\r\nAllows simple text string versions and EAN-based versions. References version-scheme from CoSWID.\r\n\r\nEAN versions is exactly the same as psa-hardware-version from ARM's PSA token definition.\r\nhttps://tools.ietf.org/id/draft-tschofenig-rats-psa-token-05.html\r\n\r\n",
      "createdAt": "2020-10-27T18:41:09Z",
      "updatedAt": "2020-11-20T18:57:47Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "048bf8446e37d4914c96c6a7eb66b3063e149652",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "ean_version",
      "headRefOid": "d7f2843104fa12dd6cf1940c505c61c9c4fe5ff3",
      "closedAt": "2020-11-20T18:57:47Z",
      "mergedAt": "2020-11-20T18:57:47Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "c915a7ab28a5a965e4783834b3232174bc4990ad"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 69,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE0MTQzNDQ2",
      "title": "Factor out CDDL",
      "url": "https://github.com/ietf-rats-wg/eat/pull/69",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Reviewing the editor draft, I noticed the CDDL had a few errors and that the examples were drifting away. Therefore I have taken the liberty to do some restructuring to increase internal coherency, remove any need to copy&paste, and more generally automate all things around CDDL and examples.  Specifically:\r\n\r\n* Extract CDDL for each claim into its own snippet file which is sourced from the markdown;\r\n* Build the amalgamated CDDL from all the snippets automatically and source it from the markdown;\r\n* Make the examples validate against the CDDL as a build/deploy precondition.\r\n\r\nIn the process I had to do the following pretty arbitrary moves:\r\n* Fix the nonce claim to allow both array and scalar;\r\n* Commented out `generic-claim-type` which was used without being defined;\r\n* Consequently dropped from the examples the custom claims;\r\n* Give EAT claims a code-point.\r\n\r\nThere is now a dependency on a couple of tools: `cddl` and `diag2cbor`.  I have made the Travis based CI work with them.  Hopefully Travis is the CI in use in the main repo?  If not, we'll need to port the changes to the target CI environment.\r\n\r\nPS: the JSON claims have not been included yet in the full CDDL.",
      "createdAt": "2020-11-02T15:39:25Z",
      "updatedAt": "2020-11-04T09:46:46Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "ce8393575f5038919f3128f61efecc56c27d4a80",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "4b85a239b69e78f4e97f8b3f91c662fc1de0e43a",
      "closedAt": "2020-11-03T19:39:48Z",
      "mergedAt": "2020-11-03T19:39:48Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "6c97e22dbce3e2e5f4e8d573f42167e3aa3401ad"
      },
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> There is now a dependency on a couple of tools: `cddl` and `diag2cbor`. I have made the Travis based CI work with them. Hopefully Travis is the CI in use in the main repo? If not, we'll need to port the changes to the target CI environment.\r\n\r\nI have made an image at https://hub.docker.com/repository/docker/thomasfossati/i-d-template that could be used for the circle CI.\r\n\r\nI've also opened a PR on the upstream i-d-template: https://github.com/martinthomson/i-d-template/pull/250",
          "createdAt": "2020-11-04T09:46:45Z",
          "updatedAt": "2020-11-04T09:46:45Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 70,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE3NzAyNzcy",
      "title": "Avoid duplicate entries in the EAT map",
      "url": "https://github.com/ietf-rats-wg/eat/pull/70",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As per [RATS ML discussion](https://mailarchive.ietf.org/arch/msg/rats/nIJ7GouxIRk1nU5ivu4fK-rInR8/).",
      "createdAt": "2020-11-09T11:42:54Z",
      "updatedAt": "2020-11-09T18:56:40Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "4a3e78b6f37f192a55c1fa7e210b95bc6ffdc36d",
      "headRepository": "thomas-fossati/eat",
      "headRefName": "master",
      "headRefOid": "d5227f6edc18e9b4406e26b0b1918d804f578d72",
      "closedAt": "2020-11-09T18:56:40Z",
      "mergedAt": "2020-11-09T18:56:40Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "f1c478441475a867b18e81619e591a73ddcb16bc"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 71,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE4NzQzNzkw",
      "title": "First draft of key inclusion",
      "url": "https://github.com/ietf-rats-wg/eat/pull/71",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Seems to me there are lots of use cases for key inclusion and they have semantics that vary too much to fit into  one claim. I\u2019ve chosen primarily to write guidelines rather than define claims.\r\n\r\nOne use case is a CSR. However, RFC 8747 doesn\u2019t define a CSR, so referencing it isn\u2019t sufficient.\r\n\r\nAttestations from the Android key store include things like security level and user authentication requirements for use. Going into all that is too much for EAT, but might be good in another document.\r\n\r\nFIDO goes one step beyond Android and binds a relying party/user/device tuple with the key.\r\n\r\nIt is a little tempting to define a security level for the storage and operation of keys since EAT has a security level definition.",
      "createdAt": "2020-11-10T20:24:26Z",
      "updatedAt": "2020-11-25T18:24:28Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "d7f685d2f808e1f5214d431c9865850982381009",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "KeyInclusion",
      "headRefOid": "04e5d341f18508037c87ab26a734f468b9c99c9b",
      "closedAt": "2020-11-25T18:24:28Z",
      "mergedAt": "2020-11-25T18:24:28Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "9b8d00db49f6575ec1d9e75aa1e044426a4d8a81"
      },
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "See https://github.com/ietf-rats-wg/eat/pull/60.  Would recommend tying this concept in specifically for CSR.",
          "createdAt": "2020-11-10T20:39:09Z",
          "updatedAt": "2020-11-10T20:39:09Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "My thought is that a CBOR format CSR is of use outside of EAT and thus should be defined by the COSE work group and referenced by RATS.  A CBOR format CSR seems like a good and useful thing to do, but don't think it belongs in EAT. Maybe we hurry up and create it so EAT can reference it?\r\n",
          "createdAt": "2020-11-10T21:37:06Z",
          "updatedAt": "2020-11-10T21:37:06Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": ">A CBOR format CSR seems like a good and useful thing to do, but don't think it belongs in EAT. Maybe we hurry up and create it so EAT can reference it?\r\n\r\nI agree that a CBOR-formatted CSR would be a good idea, and I don't think we need to have an EAT dependency on it.  It can be done separately, as you suggested in the COSE WG.\r\n\r\nContext claim, as intended by https://github.com/ietf-rats-wg/eat/pull/60, is not meant to convert or extend an EAT to a CSR object.  It is meant to describe how the attestation is intended to be used - e.g. in the context of a CSR.  I think that is sufficient for key attestation.  If a CBOR CSR object is defined, then it can encapsulate or be appended with an EAT with the appropriate context set.   ",
          "createdAt": "2020-11-10T21:47:27Z",
          "updatedAt": "2020-11-10T21:47:27Z"
        },
        {
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "body": "Could someone summarize the use cases for how CSRs are used/useful? I'd like to understand how CSRs of a Evidence / Endorsement / Reference Value claim set fits into the attestation architecture.",
          "createdAt": "2020-11-10T22:06:08Z",
          "updatedAt": "2020-11-10T22:06:08Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "I fear that the \"keys\" topic introduces quite some scope creep to the core EAT I-D. I'd recommend to out-source these types of claims and a definition of their purpose to another complementary I-D.\r\n\r\nAdditionally, I think that CSR are not EAT at all. Having said that, it is absolutely fine to create a CBOR/CWT encoding for CSR, but I strongly recommend to do this in a separate I-D (and in a different one than above -> maybe not even in RATS but somewhere else?).",
          "createdAt": "2020-11-11T10:47:29Z",
          "updatedAt": "2020-11-11T10:47:29Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "@nedmsmith The use case I know of for including a CSR is IoT device on boarding. When the device first contacts some IoT management system, it includes a CSR. The management system checks out the attestation and maybe checks some other things not related to the attestation and verifies the possession signature in the CSR. If all is OK, the management system records the key in the CSR and uses it with DTLS for further communication with the device.\r\n\r\nThis isn't my design. I just know some folks are interested in this.\r\n\r\nSo it's not really a CSR since no signed certificate is returned. The CSR is being used because it provides proof of possession that just including a bare key does not.\r\n\r\nAt any rate, it seems we're agreed that we will not do any work in EAT to either define a CBOR CSR or to define a claim that allows for their inclusion. (but of course no prohibition against them should some one feel the need)",
          "createdAt": "2020-11-11T18:30:32Z",
          "updatedAt": "2020-11-11T18:30:32Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Now that we agree that CSRs are off the table in EAT, what do you think of the proposed text?\r\n\r\nI noticed that Google/Android prototype codes puts keys in EAT, but not as a COSE_Key.  The text seems like a good hint to not do things like that.",
          "createdAt": "2020-11-11T18:33:35Z",
          "updatedAt": "2020-11-11T18:33:35Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODU2Njc2",
          "commit": {
            "abbreviatedOid": "88b9d1e"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-23T21:24:11Z",
          "updatedAt": "2020-11-23T21:24:12Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nFor example, the key may be included as part of an IoT device onboarding protocol.\r\n``",
              "createdAt": "2020-11-23T21:24:11Z",
              "updatedAt": "2020-11-24T18:47:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 72,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIxMDQyNjI5",
      "title": "Add CDDL for JSON nonce label; indicate CDDL from CWT, JWT... is included in EAT",
      "url": "https://github.com/ietf-rats-wg/eat/pull/72",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-14T18:25:14Z",
      "updatedAt": "2020-11-20T19:36:54Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "bf3af0fbe1a4015c3165f1bbab52a40a0f736ac7",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "CDDL_for_JWT_CWT",
      "headRefOid": "e467bee08ad3b94a533900beb62a5d05457c38e4",
      "closedAt": "2020-11-20T19:36:54Z",
      "mergedAt": "2020-11-20T19:36:54Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "d7f685d2f808e1f5214d431c9865850982381009"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwODMzNjY3",
          "commit": {
            "abbreviatedOid": "14ecfc5"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-15T20:47:01Z",
          "updatedAt": "2020-11-15T20:47:02Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nSome of the CDDL included here is for claims that are defined in CWT {{RFC8392}} or JWT {{RFC7519}} or are in the IANA CWT or JWT registries.\r\n```",
              "createdAt": "2020-11-15T20:47:01Z",
              "updatedAt": "2020-11-20T19:34:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwODM1Mjgw",
          "commit": {
            "abbreviatedOid": "14ecfc5"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-15T21:07:20Z",
          "updatedAt": "2020-11-15T21:07:20Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "Laurence, while you are on it:\r\n* `debug-disble` should be `debug-disable`, and\r\n* `nested-eat` should be deleted since it doesn't seem to be used\r\n",
              "createdAt": "2020-11-15T21:07:20Z",
              "updatedAt": "2020-11-20T19:34:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwODM3ODY0",
          "commit": {
            "abbreviatedOid": "14ecfc5"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-15T21:38:24Z",
          "updatedAt": "2020-11-15T21:38:25Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "Also, I think now we could uncomment `CDDL_FRAGS += json.cddl` in `cddl/vars.mk`",
              "createdAt": "2020-11-15T21:38:24Z",
              "updatedAt": "2020-11-20T19:34:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 73,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIxMDQzMjQ0",
      "title": "Clarify that the security level claim is NOT extensible",
      "url": "https://github.com/ietf-rats-wg/eat/pull/73",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "If everyone made up their own security level as they will be wont to do, this claim would be generally useless.\r\n\r\nSee also #4 ",
      "createdAt": "2020-11-14T18:30:08Z",
      "updatedAt": "2020-11-24T18:43:50Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "d7f685d2f808e1f5214d431c9865850982381009",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "SecurityLevelNotExtensible",
      "headRefOid": "692ef558c90d2da964e3177442a0e2e550f817ab",
      "closedAt": "2020-11-24T18:43:28Z",
      "mergedAt": "2020-11-24T18:43:28Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "029ea4a59f1cbdd3cbe7b2b7535afa5fd3e9c3ba"
      },
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Part address #74",
          "createdAt": "2020-11-24T18:43:49Z",
          "updatedAt": "2020-11-24T18:43:49Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwODMzNDgz",
          "commit": {
            "abbreviatedOid": "798bcc7"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-15T20:44:40Z",
          "updatedAt": "2020-11-15T20:44:41Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "I would simply say:\r\n_\"If a particular implementation considers this claim to be inadequate, they should omit it and define their own proprietary claim instead.\"_",
              "createdAt": "2020-11-15T20:44:41Z",
              "updatedAt": "2020-11-24T18:41:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 80,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIxMjYzNDE1",
      "title": "Add CDDL group socket to the top-level eat map",
      "url": "https://github.com/ietf-rats-wg/eat/pull/80",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The extension mechanism is bootstrapped with the CWT claims set\r\n\r\nFixes #77",
      "createdAt": "2020-11-15T21:35:11Z",
      "updatedAt": "2020-11-18T19:49:50Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "c39f92f49675a27aa67ed3ba65143cbfc002c38f",
      "headRepository": "thomas-fossati/eat",
      "headRefName": "cddl-socket",
      "headRefOid": "c3ed6e89b85d5c17f059ee2a43716d32552ed5a2",
      "closedAt": "2020-11-18T19:49:50Z",
      "mergedAt": "2020-11-18T19:49:50Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "048bf8446e37d4914c96c6a7eb66b3063e149652"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 81,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIxOTc4MzYw",
      "title": "First proposal for measurements claim",
      "url": "https://github.com/ietf-rats-wg/eat/pull/81",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-16T21:43:43Z",
      "updatedAt": "2021-05-28T18:30:01Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "c39f92f49675a27aa67ed3ba65143cbfc002c38f",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "MeasurementsClaim",
      "headRefOid": "181abb747f7156ea7d978c8bc00540d3cc8aac81",
      "closedAt": "2021-05-28T18:30:01Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "body": "The use case for this claim seems to be relevant where a large(?) set of measurements are required for a single purpose e.g. Linux IMA as cited.  Where a single measurement accompanies separate metadata for the context of use (e.g. as part of a CoSWID), this structure is not helpful in its current form (too complex for that purpose). It may be better to separate the use cases rather than have a single measurement type. Perhaps therefore this claim should be called 'bulk_measurement' or similar.",
          "createdAt": "2020-11-17T15:22:49Z",
          "updatedAt": "2020-11-17T15:22:49Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "@SimonFrost-Arm\r\n\r\nI think this could be used for simple measurements too. Here's an example of a single measurement.\r\n\r\n    25:                       // label/key indicating measurements claim\r\n      [                       // Array of one measurement scheme\r\n        {                     // Map containing a measurement\r\n          0: \"Acme integrity\" // The measurement scheme\r\n          2: \"HLOS Kernel\"    // What was measured\r\n          3:                  // The measurement values\r\n            [                 // Array of one measurement value\r\n              \"code text\": h'459a7e9820a8749a8a123410c8' // The one measurement value\r\n            ]\r\n        }\r\n      ]\r\n\r\nI think this parallels CoSWID in some ways. Some of the structures are a little complex, but mostly reduce in the simple cases.\r\n\r\nCan you describe the simple measurements of interest?\r\n\r\nAlso, this probably needs an optional timestamp and age field as the measurements may be taken at a time different from the token generation.",
          "createdAt": "2020-12-30T21:00:14Z",
          "updatedAt": "2020-12-30T21:00:14Z"
        },
        {
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "body": "Measurement is probably not standalone in usage, but a sub-part of a wider object describing software. If I'm already describing an object, but want to include a measurement, I have probably already identified it and don't need to repeat the measurement-target entry. \r\n\r\nMeasurement-name (NB renaming this to measurement-scheme may avoid confusion with measurement-target, I had to look twice to confirm which was which) and Measurement-value-name may be implicit for the type of use. eg. in a deployment all measurements may use SHA256 and always measure the code text. If I state this in the profile for the deployment, I shouldn't need explicit text strings to accompany the measurement. \r\n\r\nI'll put the usual appeal in for constrained environments: even with single character text entries, this adds 17 bytes overhead to every measurement. With the example quoted, there is a 45 byte overhead. \r\n\r\nCan we make all of the explanatory fields accompanying the actual measurement optional? That would allow more flexible use and probably address the above concerns.\r\n",
          "createdAt": "2021-01-04T14:00:33Z",
          "updatedAt": "2021-01-04T14:00:33Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Helpful comments. Thanks Simon. Will give it another try (but will probably focus on some other work to get a new draft out in the short term).",
          "createdAt": "2021-01-05T19:39:10Z",
          "updatedAt": "2021-01-05T19:39:10Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "This is probably replaced by #102 ",
          "createdAt": "2021-03-30T16:25:53Z",
          "updatedAt": "2021-03-30T16:25:53Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed by #102 ",
          "createdAt": "2021-05-28T18:30:01Z",
          "updatedAt": "2021-05-28T18:30:01Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 82,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI0OTM5MzEw",
      "title": "rename debug-disable to debug-status; mark it as not extensible",
      "url": "https://github.com/ietf-rats-wg/eat/pull/82",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Address issue #79",
      "createdAt": "2020-11-20T20:38:58Z",
      "updatedAt": "2020-11-25T18:20:39Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "029ea4a59f1cbdd3cbe7b2b7535afa5fd3e9c3ba",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "DebugUpdate",
      "headRefOid": "764e9f1962a3d01996f6d9a0688a82dec678de77",
      "closedAt": "2020-11-25T18:20:35Z",
      "mergedAt": "2020-11-25T18:20:35Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "98c87484eab8f30e3ab14cda0a52c6d8cb865caf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzkyNDY4",
          "commit": {
            "abbreviatedOid": "631fc0d"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "thanks!",
          "createdAt": "2020-11-20T21:34:54Z",
          "updatedAt": "2020-11-20T21:35:14Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "typo: Endabled",
              "createdAt": "2020-11-20T21:34:54Z",
              "updatedAt": "2020-11-24T18:52:00Z"
            }
          ]
        }
      ]
    },
    {
      "number": 84,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI4NzQ1MDQ1",
      "title": "Indicate major work required with TODO:",
      "url": "https://github.com/ietf-rats-wg/eat/pull/84",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-27T18:39:57Z",
      "updatedAt": "2020-11-29T05:41:47Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "700315fa9ee5b95f125969d81870051e03ff1363",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "TODO",
      "headRefOid": "5517813f5ab304dbef631f4d2a3be5aef71d94f8",
      "closedAt": "2020-11-29T05:41:41Z",
      "mergedAt": "2020-11-29T05:41:41Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "fc1332ea343f2790f7a204150368c4b6925aaa3e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 85,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI5NzYwODA3",
      "title": "fill in specification for location speed, heading...; location privacy",
      "url": "https://github.com/ietf-rats-wg/eat/pull/85",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #83 and #13.",
      "createdAt": "2020-11-30T19:27:01Z",
      "updatedAt": "2020-11-30T20:46:29Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "4cfcbd9a678c498a34ea6e6a2ce9e0fcd42a1c1d",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "LocFix",
      "headRefOid": "4a331d2446654fa47dff8982bf2e80f04e03aec8",
      "closedAt": "2020-11-30T20:46:23Z",
      "mergedAt": "2020-11-30T20:46:23Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "335e37628994c96dcbdd958462b3efa080f1e0ee"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 86,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM0ODk3NTE1",
      "title": "Add profile claim and section",
      "url": "https://github.com/ietf-rats-wg/eat/pull/86",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-12-09T04:58:39Z",
      "updatedAt": "2021-01-11T06:14:22Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "4bb6296744ae392bd69e70079ef7ce9fb26ca7d5",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "profiles",
      "headRefOid": "4ce635badaf803964cc70c5337a7a9cb399d0a8a",
      "closedAt": "2021-01-11T06:14:16Z",
      "mergedAt": "2021-01-11T06:14:16Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "d09f402ef3bd063e05a40bbb3ce0379631892078"
      },
      "comments": [
        {
          "author": "SimonFrost-Arm",
          "authorAssociation": "NONE",
          "body": "I approve of the addition of this claim. The description covers what should be in the resultant doc well and is consistent with the example use of this claim in the Arm PSA profile document. \r\n",
          "createdAt": "2020-12-11T15:02:16Z",
          "updatedAt": "2020-12-11T15:02:16Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 87,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQxNDY3Nzkw",
      "title": "Add key ID and endorsement identification section",
      "url": "https://github.com/ietf-rats-wg/eat/pull/87",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-12-16T22:08:05Z",
      "updatedAt": "2021-05-29T20:36:21Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "7577c44003b36894ba9fc8be70a53a41771a5cce",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "KeyID",
      "headRefOid": "73f40fb84dc5d369c021c9f058ba5a904ba4aa76",
      "closedAt": "2021-05-29T20:36:13Z",
      "mergedAt": "2021-05-29T20:36:13Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "3cabc15a18c19960f0d04d3bf5c6157fe2ef4417"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 88,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQzNjkxOTkx",
      "title": "CBOR interoperability section is reworked",
      "url": "https://github.com/ietf-rats-wg/eat/pull/88",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "No longer defines any blanket interoperability requirements so EAT implementations can take advantage of CBOR serializations appropriate to their environment.\r\n\r\nDefines EAT Constrained Device Serialization that can be required to guarantee interoperability in the frequent constrained device use case.\r\n\r\nFill in all the references.\r\n\r\nThis addresses #78 ",
      "createdAt": "2020-12-21T19:55:12Z",
      "updatedAt": "2021-01-16T20:42:24Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "d09f402ef3bd063e05a40bbb3ce0379631892078",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "CBORInterop",
      "headRefOid": "f2c364ebaafbc676b3f55dd9693c6a10344bd525",
      "closedAt": "2021-01-16T20:42:11Z",
      "mergedAt": "2021-01-16T20:42:11Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "ae78d8294632672a5a36cb59c7c6e82bfc94fdf6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 89,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ2MjEyNjM2",
      "title": "Fix references and formatting",
      "url": "https://github.com/ietf-rats-wg/eat/pull/89",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-12-28T19:36:44Z",
      "updatedAt": "2020-12-28T19:55:34Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "050501dc4cb22c7f9ea7f72cffe4b64d3536089b",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "LinkFixes",
      "headRefOid": "e5b9c7b490c80e05c0dcb05c66871392bab4c51f",
      "closedAt": "2020-12-28T19:55:29Z",
      "mergedAt": "2020-12-28T19:55:28Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "4bb6296744ae392bd69e70079ef7ce9fb26ca7d5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 90,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ5NTYwNzY0",
      "title": "Claim keys and examples for IANA pre-assignment",
      "url": "https://github.com/ietf-rats-wg/eat/pull/90",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This clarifies which labels are preassigned by IANA and which are TBD.\r\n\r\nThis should not be merged until the IANA reassignment process is complete.\r\n\r\nThis also splits the cddl built into two versions, one for the document that has <TBDxx> labels and one for CDDL validation which has real label numbers.",
      "createdAt": "2021-01-05T21:33:00Z",
      "updatedAt": "2021-02-05T01:52:08Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "05a2a0fefbfde35f836aee115d600201a5fd1df1",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "PreAssign",
      "headRefOid": "063760c86ce73e49d48b04f629ff49dcf5ca58fc",
      "closedAt": "2021-02-05T01:52:07Z",
      "mergedAt": "2021-02-05T01:52:07Z",
      "mergedBy": "gmandyam",
      "mergeCommit": {
        "oid": "c6729746befa6fd0852b009a0413dbf3abaac8de"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 93,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc5NzI5MDgw",
      "title": "Change profile claim to be URL or OID",
      "url": "https://github.com/ietf-rats-wg/eat/pull/93",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-25T01:51:45Z",
      "updatedAt": "2021-03-02T18:06:09Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "554e6fda210f07af4a5ed70b75fe5b7f2a4156a6",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "profile-oid",
      "headRefOid": "2019f8ef0b0dc6f6e7c1c869d2cfd9b548c7b908",
      "closedAt": "2021-03-02T18:05:57Z",
      "mergedAt": "2021-03-02T18:05:57Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "f8f8859e93749868e7d8b9863231f315a2a1f5ac"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk4NTg0Nzcx",
          "commit": {
            "abbreviatedOid": "bda26f9"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Thanks for taking a stab at this!",
          "createdAt": "2021-02-25T13:53:01Z",
          "updatedAt": "2021-02-25T13:55:48Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "CDDL nits: I think we need to import the definition of oid from https://datatracker.ietf.org/doc/draft-ietf-cbor-tags-oid/, i.e.: `oid = #6.111(bstr)`\r\n\r\nAlso, if we are requiring an URL, maybe better letting the type system help out: `uri = #6.32(tstr)`?",
              "createdAt": "2021-02-25T13:53:01Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nIt may exist anywhere in the OID tree.\r\n```",
              "createdAt": "2021-02-25T13:53:25Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            },
            {
              "originalPosition": 10,
              "body": "I think this should be moved up to L959",
              "createdAt": "2021-02-25T13:54:44Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk5OTI5OTA2",
          "commit": {
            "abbreviatedOid": "56efa9a"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-26T20:47:03Z",
          "updatedAt": "2021-02-26T20:47:04Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "a curiosity: what is the rationale for unwrapping?",
              "createdAt": "2021-02-26T20:47:04Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMjEwODc4",
          "commit": {
            "abbreviatedOid": "56efa9a"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-28T02:27:40Z",
          "updatedAt": "2021-02-28T02:27:40Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "You can tell uri from old by the CBOR type (text vs byte string) so no need for the tag. \r\n\r\nGenerally, it seems the convention in CBOR is to unwrap if possible to not have redundancy (which creates an error condition) and to save bytes. If others think otherwise, fill me in. :-)",
              "createdAt": "2021-02-28T02:27:40Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMjY4NzU5",
          "commit": {
            "abbreviatedOid": "fab621a"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-28T14:57:27Z",
          "updatedAt": "2021-02-28T14:57:27Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "makes sense, thanks for the explanation",
              "createdAt": "2021-02-28T14:57:27Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMjY5MDgy",
          "commit": {
            "abbreviatedOid": "56efa9a"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-28T15:00:28Z",
          "updatedAt": "2021-02-28T15:20:24Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\n```\r\nthese two lines are duplicates of L973-974",
              "createdAt": "2021-02-28T15:00:28Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\nA profile is identified by either an absolute URI {{!RFC3896}} or an absolute OID (ASN.1 Type \"OBJECT IDENTIFIER\").\r\n```",
              "createdAt": "2021-02-28T15:07:45Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            },
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nTypically, the URI will reference a document describing the profile.\r\n```",
              "createdAt": "2021-02-28T15:08:43Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            },
            {
              "originalPosition": 37,
              "body": "I don't understand why is it important to state this?",
              "createdAt": "2021-02-28T15:10:48Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            },
            {
              "originalPosition": 42,
              "body": "```suggestion\r\nBoth are unwrapped and thus the outer tag is removed.\r\n```",
              "createdAt": "2021-02-28T15:12:36Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            },
            {
              "originalPosition": 52,
              "body": "```suggestion\r\n* oid -- is encoded using dotted decimal notation as per Section 5 of {{CBOR-OID}} \r\n```",
              "createdAt": "2021-02-28T15:13:17Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            },
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n  CBOR-OID: I-D.ietf-cbor-tags-oid\r\n```",
              "createdAt": "2021-02-28T15:19:09Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            },
            {
              "originalPosition": 17,
              "body": "so that updates to the ref are tracked automatically",
              "createdAt": "2021-02-28T15:19:39Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMjg0MDQw",
          "commit": {
            "abbreviatedOid": "3943ac7"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-28T17:51:11Z",
          "updatedAt": "2021-02-28T17:51:11Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "This is JSON representation of OIDs so a reference to CBOR representation of OID seems wrong.\r\nI haven't found any standard to reference for text representation of OIDs in JSON so far. ",
              "createdAt": "2021-02-28T17:51:11Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMzA5MjM1",
          "commit": {
            "abbreviatedOid": "2ef23cd"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-28T21:48:23Z",
          "updatedAt": "2021-02-28T21:48:23Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "Yeah that doesn't sound entirely right, but it's the only reference I had found.\r\n\r\nI've given my google-foo another spin and found that Section 3.2 of RFC5675 has an ABNF for the dotted-decimal notation.  Or otherwise let's just say \"using the well established dotted-decimal notation\" or similar",
              "createdAt": "2021-02-28T21:48:23Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMzU5OTU1",
          "commit": {
            "abbreviatedOid": "2ef23cd"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-03-01T03:02:10Z",
          "updatedAt": "2021-03-01T03:02:10Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "I'm leaving this as is because, there is no possibility of any tag here (no inner tag). Also, contrary to normal English use of the word tag, in CBOR the tag is the whole thing with the value, not just the tag number.",
              "createdAt": "2021-03-01T03:02:10Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMzYwMzI4",
          "commit": {
            "abbreviatedOid": "1728e7b"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-03-01T03:03:26Z",
          "updatedAt": "2021-03-01T03:03:26Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "OK. Pushed a change for this.",
              "createdAt": "2021-03-01T03:03:26Z",
              "updatedAt": "2021-03-02T18:05:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 99,
      "id": "MDExOlB1bGxSZXF1ZXN0NTkwOTgyNzQz",
      "title": "Several Profile Improvements",
      "url": "https://github.com/ietf-rats-wg/eat/pull/99",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Address freshness\r\nAddress CBOR preferred serialization\r\nUse CDDL in profile documents\r\n",
      "createdAt": "2021-03-11T16:07:40Z",
      "updatedAt": "2021-05-25T18:35:44Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "41685066d17a580679e7bdb038d1a30042966920",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "profile-improvements",
      "headRefOid": "27feb4225d17f35920114e7313f012ba7a97bcfe",
      "closedAt": "2021-03-26T16:53:30Z",
      "mergedAt": "2021-03-26T16:53:30Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "f5823e0e12e6413ccb7a15adda201a9b00e3f23d"
      },
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "The nonces claim should reference RATS architecture for freshness too.",
          "createdAt": "2021-03-11T20:15:20Z",
          "updatedAt": "2021-03-11T20:15:20Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEwNjIwMDk2",
          "commit": {
            "abbreviatedOid": "e1e6b58"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "lgmt, I've left a couple of minor comments",
          "createdAt": "2021-03-12T09:55:40Z",
          "updatedAt": "2021-03-12T10:10:53Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nIn some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.\r\n```",
              "createdAt": "2021-03-12T09:55:40Z",
              "updatedAt": "2021-03-15T18:30:50Z"
            },
            {
              "originalPosition": 29,
              "body": "Are these \"should indicate\" normative?  (IMO, yes)",
              "createdAt": "2021-03-12T09:57:01Z",
              "updatedAt": "2021-03-15T18:30:50Z"
            },
            {
              "originalPosition": 42,
              "body": "Same as previous comment: is this a normative should?",
              "createdAt": "2021-03-12T09:58:35Z",
              "updatedAt": "2021-03-15T18:30:50Z"
            },
            {
              "originalPosition": 43,
              "body": "Maybe we could make it clearer here that one is not bound to the freshness models examined in {{RATS-Architecture}}.  E.g., a protocol embedding EAT could use a time notion based on some kind of event stored in Merkle tree, or anything else really as long as it fits the bill.\r\n",
              "createdAt": "2021-03-12T10:10:03Z",
              "updatedAt": "2021-03-15T18:30:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEyNTE5MjQx",
          "commit": {
            "abbreviatedOid": "6bb0e7d"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-03-15T18:27:54Z",
          "updatedAt": "2021-03-15T18:27:54Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "All the things in the profile are described as \"should\" right now.\r\n\r\nIf we are going to start using \"must\" then we are describing a formal protocol for creating profile documents to the degree that some profiles comply with EAT and some don't. That seems like an overreach and a tall order.\r\n\r\nMy leaning is to leave it as \"should\", but we can have a larger discussion about more formalism here. Maybe do this by filing a separate issue for it.",
              "createdAt": "2021-03-15T18:27:54Z",
              "updatedAt": "2021-03-15T18:30:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEyNjc0ODgy",
          "commit": {
            "abbreviatedOid": "27feb42"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-03-15T21:54:20Z",
          "updatedAt": "2021-03-15T21:54:20Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "OK!  I raised #100 to discuss this.",
              "createdAt": "2021-03-15T21:54:20Z",
              "updatedAt": "2021-03-15T21:54:20Z"
            }
          ]
        }
      ]
    },
    {
      "number": 101,
      "id": "MDExOlB1bGxSZXF1ZXN0NjAxODE4NzMx",
      "title": "Add SUEID, discuss IDevID",
      "url": "https://github.com/ietf-rats-wg/eat/pull/101",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This adds the semi-permanent device ID, on that can change on lifecycle events.\r\n\r\nThis adds an appendix on several aspects of the relationship between IDevID and EAT.\r\n\r\nThis is to address #98 and #45",
      "createdAt": "2021-03-26T18:12:13Z",
      "updatedAt": "2021-06-03T18:14:55Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "3cabc15a18c19960f0d04d3bf5c6157fe2ef4417",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "idevid",
      "headRefOid": "147cb1f117fef0f65e4a0a12d3d13ebb136d3d53",
      "closedAt": "2021-06-03T18:14:47Z",
      "mergedAt": "2021-06-03T18:14:47Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "7e63b47b5c6cd81e554459febb8b1f5b0c24e2aa"
      },
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "The IDevID compare/contrast is an appendix. Definitely doesn't belong in the main document.\r\n\r\nI think it is valuable as an appendix give the fairly broad interest and understanding of IDevID. In particular I hope it help TCG and IEEE folks to understand EAT better and why EAT made different choices than they did.\r\n",
          "createdAt": "2021-04-01T18:21:07Z",
          "updatedAt": "2021-04-01T18:21:07Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjIyNjYwMTc2",
          "commit": {
            "abbreviatedOid": "be07a29"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Thanks for this.  However, I think it says too much.  The whole side-by-side comparison EAT v DevID is not necessary (certainly not in the main document body, *maybe* in an appendix).  I reckon it's sufficient to note the similarity en-passant (via an informative ref) and just stick to the {S,}UEID description.",
          "createdAt": "2021-03-27T15:51:25Z",
          "updatedAt": "2021-03-27T16:27:16Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "You might want to:\r\n```suggestion\r\nThis section describes several distinct ways in which an IEEE IDevID {{IEEE802-1AR}} relates to EAT, particularly to UEID and SUEID.\r\n```\r\nAnd append the following to the informative refs:\r\n```\r\ninformative:\r\n  IEEE802-1AR:\r\n    target: \"https://standards.ieee.org/standard/802_1AR-2018.html\"\r\n    title: \"IEEE 802.1AR Secure Device Identifier\"\r\n    author:\r\n      org: \"IEEE\"\r\n    date: 2018\r\n```\r\n",
              "createdAt": "2021-03-27T15:51:25Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            },
            {
              "originalPosition": 54,
              "body": "```suggestion\r\nFor IDevID the unique identifier is through a X.500 distinguished name, perhaps constructed from the certificate chain, \r\n```\r\n```suggestion\r\nFor IDevID the unique identifier is through and X.500 distinguished name, perhaps constructed from the certificate chain, \r\n```",
              "createdAt": "2021-03-27T15:53:29Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            },
            {
              "originalPosition": 55,
              "body": "```suggestion\r\nsomehow derived from the key material.\r\n```\r\n```suggestion\r\nsome how derived from the key material.\r\n```",
              "createdAt": "2021-03-27T15:53:44Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            },
            {
              "originalPosition": 57,
              "body": "I suggest to drop this, it sounds like a value judgement.  Just say \"Compared to DevID, EAT allows an open-ended [...]\"",
              "createdAt": "2021-03-27T16:14:29Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            },
            {
              "originalPosition": 71,
              "body": "```suggestion\r\n{{IEEE802-1AR}} describes much of this permanence as resistant to attacks that seek to change the ID.\r\n```",
              "createdAt": "2021-03-27T16:15:46Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            },
            {
              "originalPosition": 72,
              "body": "plural/singular: device, device, devices",
              "createdAt": "2021-03-27T16:18:08Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            },
            {
              "originalPosition": 74,
              "body": "I don't understand these two claims.  Also IDevID is not a document.",
              "createdAt": "2021-03-27T16:22:30Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2NTMxODQ4",
          "commit": {
            "abbreviatedOid": "1b6acb0"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-01T18:16:30Z",
          "updatedAt": "2021-04-01T18:16:30Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "Done",
              "createdAt": "2021-04-01T18:16:30Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2NTMyMTkz",
          "commit": {
            "abbreviatedOid": "1b6acb0"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-01T18:16:57Z",
          "updatedAt": "2021-04-01T18:16:58Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Done",
              "createdAt": "2021-04-01T18:16:57Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2NTMyMjk1",
          "commit": {
            "abbreviatedOid": "1b6acb0"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-01T18:17:05Z",
          "updatedAt": "2021-04-01T18:17:05Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "Done",
              "createdAt": "2021-04-01T18:17:05Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2NTMyNDI5",
          "commit": {
            "abbreviatedOid": "1b6acb0"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-01T18:17:15Z",
          "updatedAt": "2021-04-01T18:17:15Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Done",
              "createdAt": "2021-04-01T18:17:15Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2NTMyNTI1",
          "commit": {
            "abbreviatedOid": "1b6acb0"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-01T18:17:23Z",
          "updatedAt": "2021-04-01T18:17:23Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Done",
              "createdAt": "2021-04-01T18:17:23Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2NTMzMDE1",
          "commit": {
            "abbreviatedOid": "1b6acb0"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-01T18:18:03Z",
          "updatedAt": "2021-04-01T18:18:03Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "Have done a lot of rewording do better here.",
              "createdAt": "2021-04-01T18:18:03Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2NTMzNDgx",
          "commit": {
            "abbreviatedOid": "1b6acb0"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-01T18:18:40Z",
          "updatedAt": "2021-04-01T18:18:41Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Hopefully rewording in first part of this appending addresses this.",
              "createdAt": "2021-04-01T18:18:41Z",
              "updatedAt": "2021-04-01T18:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2NjQ4NDA3",
          "commit": {
            "abbreviatedOid": "be07a29"
          },
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-01T21:05:53Z",
          "updatedAt": "2021-04-01T21:05:53Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "FDO IOT standard has reached a final state:  https://fidoalliance.org/specs/FDO/fido-device-onboard-v1.0-ps-20210323/fido-device-onboard-v1.0-ps-20210323.html#DevAttnProt.  Removing the 'should' requirement will mean it is not compliant with EAT.  Would recommend leaving text as is.",
              "createdAt": "2021-04-01T21:05:53Z",
              "updatedAt": "2021-04-01T21:05:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMwNTM1Mjg0",
          "commit": {
            "abbreviatedOid": "fa6f2bf"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-07T20:27:31Z",
          "updatedAt": "2021-04-07T20:27:31Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "A couple points here Giri,\r\n\r\nEAT's definition of the UEID as permanent has stood for a long time and we shouldn't really change that underneath of other implementations. FIDO IoT is not the only user of EAT.\r\n\r\nThe solution of two identifiers, one permanent and one that changes on lifecycle events seems like a good one that can serve lots of use cases. It is validated by IDevID/LDevID doing the same. Removing the should would destroy this solution.\r\n\r\nFIDO standards change all the time, so this could be changed. FIDO also knew the situation before finalizing. Is there a substantial installed base of concern here for which there is no workaround?\r\n\r\nIs there anything wrong with SUEID in this PR that would make it unsuitable for FIDO IoT? Haven't heard any comment on that yet.\r\n\r\n",
              "createdAt": "2021-04-07T20:27:31Z",
              "updatedAt": "2021-04-07T20:27:31Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMwODUxMTc3",
          "commit": {
            "abbreviatedOid": "fa6f2bf"
          },
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-07T23:58:00Z",
          "updatedAt": "2021-04-07T23:58:00Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "No issue with SUEID.  Will take up the proposal with FIDO to get feedback.  \r\n\r\nThe other relevant text from Sec. 8.1:  \r\n\r\n\"The device authenticates the relying party and generates a derived UEID just for that particular relying party. \"\r\n\r\nThis above is consistent with current FIDO usage, as the UEID is transitioned from manufacturer-assigned to the new relying party (in this case the Device Owner).  Or is SUEID meant to supplant the above?",
              "createdAt": "2021-04-07T23:58:00Z",
              "updatedAt": "2021-04-07T23:58:00Z"
            }
          ]
        }
      ]
    },
    {
      "number": 102,
      "id": "MDExOlB1bGxSZXF1ZXN0NjA0MDM3NDAy",
      "title": "Add manifests and swevidence claims to carry CoSWID and other",
      "url": "https://github.com/ietf-rats-wg/eat/pull/102",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-03-30T16:23:50Z",
      "updatedAt": "2021-05-28T18:27:55Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "0b66d8a17da3061cd7fe7612c090bd4f54e9a7e2",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "CoSWID",
      "headRefOid": "efa80a2eb5b370fe8a7b8f8fd46a3476b1130517",
      "closedAt": "2021-05-28T18:27:51Z",
      "mergedAt": "2021-05-28T18:27:51Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "7577c44003b36894ba9fc8be70a53a41771a5cce"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1MDI2OTUy",
          "commit": {
            "abbreviatedOid": "531f968"
          },
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-03-31T08:30:52Z",
          "updatedAt": "2021-03-31T08:38:02Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "What's an installation process?",
              "createdAt": "2021-03-31T08:30:52Z",
              "updatedAt": "2021-03-31T08:38:02Z"
            },
            {
              "originalPosition": 24,
              "body": "Why is this a lower case should and not an upper case MUST?",
              "createdAt": "2021-03-31T08:33:41Z",
              "updatedAt": "2021-03-31T08:38:02Z"
            },
            {
              "originalPosition": 11,
              "body": "Independent from what?",
              "createdAt": "2021-03-31T08:34:52Z",
              "updatedAt": "2021-03-31T08:38:02Z"
            },
            {
              "originalPosition": 17,
              "body": "How do you deal with cases where there is no tag registered?",
              "createdAt": "2021-03-31T08:35:48Z",
              "updatedAt": "2021-03-31T08:38:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY0OTQyNTg2",
          "commit": {
            "abbreviatedOid": "9e4c652"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-20T22:06:01Z",
          "updatedAt": "2021-05-20T22:06:01Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "See update",
              "createdAt": "2021-05-20T22:06:01Z",
              "updatedAt": "2021-05-20T22:06:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY0OTQyNjU0",
          "commit": {
            "abbreviatedOid": "9e4c652"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-20T22:06:08Z",
          "updatedAt": "2021-05-20T22:06:08Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Fixed",
              "createdAt": "2021-05-20T22:06:08Z",
              "updatedAt": "2021-05-20T22:06:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY0OTQyNzI5",
          "commit": {
            "abbreviatedOid": "9e4c652"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-20T22:06:16Z",
          "updatedAt": "2021-05-20T22:06:16Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "See update",
              "createdAt": "2021-05-20T22:06:16Z",
              "updatedAt": "2021-05-20T22:06:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY0OTQzMzg5",
          "commit": {
            "abbreviatedOid": "9e4c652"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-20T22:07:32Z",
          "updatedAt": "2021-05-20T22:07:33Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Tags are required so one has to be registered. Seems reasonable for something as big and involved as a manifest or SW evidence format.",
              "createdAt": "2021-05-20T22:07:33Z",
              "updatedAt": "2021-05-20T22:07:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY1OTQ0ODk0",
          "commit": {
            "abbreviatedOid": "a2968a3"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-21T21:40:59Z",
          "updatedAt": "2021-05-21T21:57:07Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "```suggestion\r\nmanifests-claim = (\r\n```",
              "createdAt": "2021-05-21T21:40:59Z",
              "updatedAt": "2021-05-21T21:57:07Z"
            },
            {
              "originalPosition": 3,
              "body": "```suggestion\r\nswevidence-claim = (\r\n```",
              "createdAt": "2021-05-21T21:43:21Z",
              "updatedAt": "2021-05-21T21:57:07Z"
            },
            {
              "originalPosition": 5,
              "body": "I guess we should also add\r\n```\r\nmanifests = 42\r\nswevidence = 43\r\n```\r\nto eat-tbd-labels-validate.cddl",
              "createdAt": "2021-05-21T21:44:56Z",
              "updatedAt": "2021-05-21T21:57:07Z"
            },
            {
              "originalPosition": 1,
              "body": "If we have an idea of what is acceptable here we should try and constrain the type.  (The type should be extensible)\r\nSomething like:\r\n```\r\nswevidence-type = [+ $swevidence-format]\r\n\r\n$swevidence-format /= bytes .cbor concise-swid-tag\r\n```\r\nNot sure this would work as-is, but just to give the idea.",
              "createdAt": "2021-05-21T21:56:47Z",
              "updatedAt": "2021-05-21T21:57:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY3NDE3NDkx",
          "commit": {
            "abbreviatedOid": "5f38e4b"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-25T06:01:20Z",
          "updatedAt": "2021-05-25T06:01:20Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Fixed\r\n",
              "createdAt": "2021-05-25T06:01:20Z",
              "updatedAt": "2021-05-25T06:01:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY3NDMzNTk3",
          "commit": {
            "abbreviatedOid": "5f38e4b"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-25T06:28:44Z",
          "updatedAt": "2021-05-25T06:28:44Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "Hi Thomas,\r\n\r\nI mostly like this. I think it works for the document if you add some explanatory text.\r\n\r\nBut it doesn't work for the CDDL validation part of make for the document because concise-swid-tag is not defined. I have the same problem with the re use of CoSWID's $version-scheme for the HW version claim. Seems there ought to be a convention in CDDL standards docs for handling this sort of thing.\r\n\r\nThe best I can come up with is more split between the CDDL in the document and the CDDL for validation when running make. \r\n\r\nAny better ideas?\r\n",
              "createdAt": "2021-05-25T06:28:44Z",
              "updatedAt": "2021-05-25T06:28:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY3NDc1MTU4",
          "commit": {
            "abbreviatedOid": "5f38e4b"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-25T07:22:47Z",
          "updatedAt": "2021-05-25T07:22:47Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "> But it doesn't work for the CDDL validation part of make for the document because concise-swid-tag is not defined. I have the same problem with the re use of CoSWID's $version-scheme for the HW version claim. Seems there ought to be a convention in CDDL standards docs for handling this sort of thing.\r\n\r\nIn CoRIM we [pull CoSWID from the authoritative repo](https://github.com/ietf-rats/ietf-corim-cddl/blob/9d165166f3ae29f2da9e0c261a8289ea58d1d04a/Makefile#L44-L50) and merge it into the final CDDL. This is probably the least worst one can do within the set of constraints of CDDL processing.  I would give this a try first and see if it works.  You want me to test this hypothesis?\r\n\r\n",
              "createdAt": "2021-05-25T07:22:47Z",
              "updatedAt": "2021-05-25T07:22:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY4MTc0Nzkw",
          "commit": {
            "abbreviatedOid": "e0d7cce"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-25T17:56:40Z",
          "updatedAt": "2021-05-25T17:56:41Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "Pulling CoSWID (or any other) CDDL into the actual published referencing document seems wrong to me. I can see that is being done with CoRIM. It might eventually snowball into the last CDDL standard written having the all the CDDL that came before it copied into it. :-0\r\n\r\nHowever, if the CDDL builds in two forms, one for the document and one for validation, then this works and seems like a good idea. I fixed up EAT so it does that now for CoSWID and SUIT manifests and it is working so far.\r\n\r\nI've run into a bit of a name space issue where both EAT and CoSWID define \"location\". That will eventually be a problem in the CDDL world if we keep doing this.\r\n\r\nSo thanks for the idea!",
              "createdAt": "2021-05-25T17:56:40Z",
              "updatedAt": "2021-05-25T17:56:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY4MjI2ODcx",
          "commit": {
            "abbreviatedOid": "e0d7cce"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "super!",
          "createdAt": "2021-05-25T18:41:25Z",
          "updatedAt": "2021-05-25T18:44:17Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "you probably want to add this and the suit manifest to the `CLEANFILES`",
              "createdAt": "2021-05-25T18:41:25Z",
              "updatedAt": "2021-05-25T18:44:17Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nconcise-swid-tag.cddl: ; $(curl) -O $(COSWID_REPO_URL)/$@\r\n\r\nCLEANFILES += concise-swid-tag.cddl\r\n```",
              "createdAt": "2021-05-25T18:41:52Z",
              "updatedAt": "2021-05-25T18:44:17Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\ndraft-ietf-suit-manifest.cddl: ; $(curl) -O $(SUIT_REPO_URL)/$@\r\n\r\nCLEANFILES += draft-ietf-suit-manifest.cddl\r\n```",
              "createdAt": "2021-05-25T18:43:23Z",
              "updatedAt": "2021-05-25T18:44:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 103,
      "id": "MDExOlB1bGxSZXF1ZXN0NjA0MTA2ODc2",
      "title": "Add section on Evidence and Attestation Results",
      "url": "https://github.com/ietf-rats-wg/eat/pull/103",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-03-30T17:11:01Z",
      "updatedAt": "2021-05-20T18:19:47Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "f5823e0e12e6413ccb7a15adda201a9b00e3f23d",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "results",
      "headRefOid": "f7f98cd92418b31a8f67f1b51c3876b1c9956018",
      "closedAt": "2021-05-20T18:19:43Z",
      "mergedAt": "2021-05-20T18:19:43Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "09c2d3235d923b2d7bb645d2ce2b2c76d6909d21"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 104,
      "id": "MDExOlB1bGxSZXF1ZXN0NjA1MjY0ODQ3",
      "title": "add the draft in XML to the published artefacts",
      "url": "https://github.com/ietf-rats-wg/eat/pull/104",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This change is to enable the extraction of EAT's \"amalgamated\" CDDL using XPath, with per-branch granularity.\r\n\r\n[EAT-test-vectors](https://github.com/laurencelundblade/EAT-test-vectors) will be a primary user of this feature.",
      "createdAt": "2021-03-31T08:08:40Z",
      "updatedAt": "2021-03-31T17:45:30Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "f5823e0e12e6413ccb7a15adda201a9b00e3f23d",
      "headRepository": "thomas-fossati/eat",
      "headRefName": "patch-1",
      "headRefOid": "1c23ef1399ebd28f32a3280824551a26df84787d",
      "closedAt": "2021-03-31T17:45:29Z",
      "mergedAt": "2021-03-31T17:45:29Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "f068f6a22249c16f63bb8d463668883c44a52d61"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 105,
      "id": "MDExOlB1bGxSZXF1ZXN0NjEyOTUzOTQ2",
      "title": "First attempt at claims for layered attestation",
      "url": "https://github.com/ietf-rats-wg/eat/pull/105",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "wontfix"
      ],
      "body": "Relates to https://github.com/ietf-rats-wg/architecture/issues/293 and https://github.com/ietf-rats-wg/architecture/pull/294",
      "createdAt": "2021-04-10T19:47:01Z",
      "updatedAt": "2021-10-07T19:52:38Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "79e0e208b558a094e60c0c7a1870af65aca48f8c",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "layered",
      "headRefOid": "855d1aabebd8e0e7ea130dcb2bc91cd2feaf090d",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzMzUzMzE1",
          "commit": {
            "abbreviatedOid": "855d1aa"
          },
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-23T14:22:52Z",
          "updatedAt": "2021-04-23T14:33:27Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Not the current Attesting Environment that generated that Evidence, tough, but a \"potential future\" one in an upcoming \"secure state transition\" to the next layer. Maybe this could be read as \"an Attesting Environment generates Evidence about itself\", which it does not do?",
              "createdAt": "2021-04-23T14:22:52Z",
              "updatedAt": "2021-04-23T14:33:27Z"
            },
            {
              "originalPosition": 36,
              "body": "This addresses the concern above, but later in the text. Maybe some minor rewording above suffices.",
              "createdAt": "2021-04-23T14:23:59Z",
              "updatedAt": "2021-04-23T14:33:27Z"
            },
            {
              "originalPosition": 38,
              "body": "so... initially there is the root Attesting Environment and state transitions then go to layered Attesting Environments? I kinda like these words. Will bring that up in the arch team.",
              "createdAt": "2021-04-23T14:25:45Z",
              "updatedAt": "2021-04-23T14:33:27Z"
            },
            {
              "originalPosition": 42,
              "body": "That's impossible for me to parse. The current Attesting Environment should include the pub-key of a layered Attesting Environment in the Evidence generated about that layered Attesting Environment? If so, maybe elaborate on the reasoning? What's the use case you have in mind here?",
              "createdAt": "2021-04-23T14:28:51Z",
              "updatedAt": "2021-04-23T14:33:27Z"
            },
            {
              "originalPosition": 55,
              "body": "So these are \"EAT options\", right? In general, a third option is that the Verifiers can obtain Endorsements that are about the Attesting Environment, I think.",
              "createdAt": "2021-04-23T14:30:46Z",
              "updatedAt": "2021-04-23T14:33:27Z"
            },
            {
              "originalPosition": 61,
              "body": "I don't understand what that means. It probably means \"The layered Attesting Environment\" from the first sentence, but still I cannot really make sense of it.",
              "createdAt": "2021-04-23T14:33:05Z",
              "updatedAt": "2021-04-23T14:33:27Z"
            },
            {
              "originalPosition": 62,
              "body": "Same",
              "createdAt": "2021-04-23T14:33:17Z",
              "updatedAt": "2021-04-23T14:33:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc4Njg0Njcy",
          "commit": {
            "abbreviatedOid": "855d1aa"
          },
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-08T15:37:13Z",
          "updatedAt": "2021-06-08T15:37:13Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Regarding lines 955 - 957: The target environment contains an attesting environment but could contain other code, setup vectors, files or code that has functionality other than that used by an attesting environment. Structures representing a layer 'target environment' should allow for multiple disparate measurements.",
              "createdAt": "2021-06-08T15:37:13Z",
              "updatedAt": "2021-06-08T15:37:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc4Njg4NzA4",
          "commit": {
            "abbreviatedOid": "855d1aa"
          },
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-08T15:40:15Z",
          "updatedAt": "2021-06-08T15:40:15Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "line 1118 seems wordy. Is it saying \"Trust for layers above depends on the root and possibly other layers beneath. Evidence about a layer is provided by one or more of the layers beneath.\" ",
              "createdAt": "2021-06-08T15:40:15Z",
              "updatedAt": "2021-06-08T15:40:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc4Njk0OTcw",
          "commit": {
            "abbreviatedOid": "855d1aa"
          },
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-08T15:45:23Z",
          "updatedAt": "2021-06-08T15:45:23Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "1117 seems to be saying \"An Endorser provides claims about the root since there isn't a layer beneath the root layer that supplies Evidence. An Endorser also provides cryptographic material used by the root to authenticate the device and to sign evidence pertaining to upper / other layers.\"",
              "createdAt": "2021-06-08T15:45:23Z",
              "updatedAt": "2021-06-08T15:45:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc4NzAwMDQ1",
          "commit": {
            "abbreviatedOid": "855d1aa"
          },
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-08T15:49:49Z",
          "updatedAt": "2021-06-08T15:49:49Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "1121 seems too strong. The names of the measurements pertaining to the attesting environment (or other measurements in the target) provides intended use semantics. If using submods then submod-name captures the intended semantics.\r\n\r\n1124 seems to be saying layers can be cryptographically linked, therefore it may be appropriate to include a public key in the Evidence related to an attesting environment.",
              "createdAt": "2021-06-08T15:49:49Z",
              "updatedAt": "2021-06-08T15:49:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc4NzAzNjk2",
          "commit": {
            "abbreviatedOid": "855d1aa"
          },
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-08T15:52:59Z",
          "updatedAt": "2021-06-08T15:53:00Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "1135 I don't see how it is possible for a lower layer to know or assert that it knows the upper layer is trusted without going through a recursive verification. However, verification is done by a verifier which is a complex function. It would be a mistake to assert that layering requires attesting environments to also be verifiers according to the RATS Arch. The is-trusted claim is actually an attestation result structure. Doesn't belong here IMO.",
              "createdAt": "2021-06-08T15:53:00Z",
              "updatedAt": "2021-06-08T15:53:00Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc4NzA5MjYz",
          "commit": {
            "abbreviatedOid": "855d1aa"
          },
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-08T15:57:26Z",
          "updatedAt": "2021-06-08T15:57:26Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "There are two ways to structure layers. (a) as nested entities or (b) as linked entities. Nesting has the undesirable side-effect that the signer (aka top layer) has to be in possession of all of the lower layer evidence in order to sign anything. This makes for ever increasing evidence blobs. Linking allows the upper layer to only sign the evidence it directly controls. The lower layer linked its evidence about the upper layer so there is no reason to counter-sign something that has already been signed by a lower layer.  Lets not think of submods as a hammer that forces nesting in ways that don't make sense.",
              "createdAt": "2021-06-08T15:57:26Z",
              "updatedAt": "2021-06-08T15:57:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc4NzEwNDEx",
          "commit": {
            "abbreviatedOid": "855d1aa"
          },
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-08T15:58:26Z",
          "updatedAt": "2021-06-08T15:58:26Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "1141 this is too strong.",
              "createdAt": "2021-06-08T15:58:26Z",
              "updatedAt": "2021-06-08T15:58:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 106,
      "id": "MDExOlB1bGxSZXF1ZXN0NjUyNzEzNjkx",
      "title": "Add string labels and values for JSON tokens",
      "url": "https://github.com/ietf-rats-wg/eat/pull/106",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This also fixes a few other CDDL issues.\r\n\r\nThis addresses #92",
      "createdAt": "2021-05-25T19:04:36Z",
      "updatedAt": "2021-05-27T17:30:54Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "adbc62f13bd9bf996128d9a955c93c8f85b358fe",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "json-strings",
      "headRefOid": "f9a33c6fd2911643cf3dcef02be4c29cf4352a69",
      "closedAt": "2021-05-27T17:30:51Z",
      "mergedAt": "2021-05-27T17:30:51Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "0b66d8a17da3061cd7fe7612c090bd4f54e9a7e2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 107,
      "id": "MDExOlB1bGxSZXF1ZXN0NjUyODc4MTg5",
      "title": "clarify non-use of URI tag",
      "url": "https://github.com/ietf-rats-wg/eat/pull/107",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Address #51",
      "createdAt": "2021-05-25T21:56:06Z",
      "updatedAt": "2021-05-27T17:24:58Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "adbc62f13bd9bf996128d9a955c93c8f85b358fe",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "uri",
      "headRefOid": "baf6de04e227b90c8786159e2ea49eab661dac70",
      "closedAt": "2021-05-27T17:24:54Z",
      "mergedAt": "2021-05-27T17:24:54Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "d15ba703316c7c87d62b3697cc6aad6899a9cb36"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 109,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYxMjMwNTY0",
      "title": "Make EAN-13 HW versions a part of the CoSWID version scheme",
      "url": "https://github.com/ietf-rats-wg/eat/pull/109",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-06-03T21:38:15Z",
      "updatedAt": "2021-06-03T21:42:52Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "7e63b47b5c6cd81e554459febb8b1f5b0c24e2aa",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "ean13",
      "headRefOid": "5d4ccc6f815d9dde6632ab3ac255b457cafc2a54",
      "closedAt": "2021-06-03T21:42:49Z",
      "mergedAt": "2021-06-03T21:42:49Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "cc627cec845b3a2f93f5c77fb0790555e6f564a3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 112,
      "id": "MDExOlB1bGxSZXF1ZXN0NjczNzM2OTU2",
      "title": "Add a claim to report the results of a SW measurement",
      "url": "https://github.com/ietf-rats-wg/eat/pull/112",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This can be used in Attestation Results to report the output of the Verifier's check against reference values for SW evidence to the Relying Party.\r\n\r\nThis can also be used in Attestation Evidence if the Attester has the ability to measure and verify on the device. For example Samsung TIMA can do this.\r\n\r\nThis is to address #108\r\n",
      "createdAt": "2021-06-18T21:14:38Z",
      "updatedAt": "2021-07-15T05:20:30Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "754a276ee243b2f814acf17010204305fea9d1ad",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "swresults",
      "headRefOid": "9f336faa77f967610c0dd1c94d7573f914d8a756",
      "closedAt": "2021-07-15T05:20:22Z",
      "mergedAt": "2021-07-15T05:20:22Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "16fb677a8b2f03c74e0a8cba42bc3d6f0fe98b2f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 113,
      "id": "MDExOlB1bGxSZXF1ZXN0Njc2NzgxMjY2",
      "title": "rearrange hw version type",
      "url": "https://github.com/ietf-rats-wg/eat/pull/113",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-06-24T04:32:32Z",
      "updatedAt": "2021-07-01T18:15:52Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "be1b2c42c0c6488d410015856807f8edaf8741b6",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "hwv-fix",
      "headRefOid": "fa3e5dbc6333f97289bc1a5cb16edc7ad31f1b5d",
      "closedAt": "2021-07-01T18:15:48Z",
      "mergedAt": "2021-07-01T18:15:48Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "754a276ee243b2f814acf17010204305fea9d1ad"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 114,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg2NDE0NTEw",
      "title": "Claim for DLOA -- Digital Letter or Approval",
      "url": "https://github.com/ietf-rats-wg/eat/pull/114",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-07-09T00:58:17Z",
      "updatedAt": "2021-08-04T06:14:42Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "5081d76c94975e06e1d2fb0c6213d2b4256ddb72",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "dloa",
      "headRefOid": "4081fddab4aba9a4ef4804db636f25cfee2a5460",
      "closedAt": "2021-08-04T06:14:38Z",
      "mergedAt": "2021-08-04T06:14:37Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "a2a2b7d26327440b2ef99abd58f27e27e018b203"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 116,
      "id": "MDExOlB1bGxSZXF1ZXN0NjkwNDAyOTMz",
      "title": "Improvements in security level description",
      "url": "https://github.com/ietf-rats-wg/eat/pull/116",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-07-15T05:19:16Z",
      "updatedAt": "2021-08-02T17:47:23Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "16fb677a8b2f03c74e0a8cba42bc3d6f0fe98b2f",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "sec-level-update",
      "headRefOid": "5392d95e8002e40bfd3b3d09ef3d37c9b9418430",
      "closedAt": "2021-08-02T17:47:19Z",
      "mergedAt": "2021-08-02T17:47:19Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "5081d76c94975e06e1d2fb0c6213d2b4256ddb72"
      },
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "This addresses #4 ",
          "createdAt": "2021-08-01T00:20:45Z",
          "updatedAt": "2021-08-01T00:20:45Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 121,
      "id": "MDExOlB1bGxSZXF1ZXN0NzAxMTcwMTA4",
      "title": "Shorten and improve section 3 intro",
      "url": "https://github.com/ietf-rats-wg/eat/pull/121",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Rather than discuss claim optionality, just refer to the CWT and JWT documents that are pretty much exactly right on this.\r\n\r\nRemoved a lot of other text that no longer seems necessary.",
      "createdAt": "2021-08-02T06:37:21Z",
      "updatedAt": "2021-08-08T06:46:06Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "16fb677a8b2f03c74e0a8cba42bc3d6f0fe98b2f",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "3intro",
      "headRefOid": "b3bca04887f63b183a0003c7a8f826de2022e523",
      "closedAt": "2021-08-08T06:46:06Z",
      "mergedAt": "2021-08-08T06:46:06Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "d599df82f0d9e66420b7001e89909a3b0d170546"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 123,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA2ODAyMjc3",
      "title": "Detached submodules",
      "url": "https://github.com/ietf-rats-wg/eat/pull/123",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A submodule may be a digest of a claims set that is convey separately.\r\n\r\nAlso defines a Detached EAT Bundle, a DEB, a top-level structure to convey detached submodules.\r\n",
      "createdAt": "2021-08-09T20:05:26Z",
      "updatedAt": "2021-10-07T19:55:35Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "98d7bdee481be937863ad3557aadd62b8211ce50",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "detached",
      "headRefOid": "1e7b4e6359e6bd67a55154a7048e464f09a32f5a",
      "closedAt": "2021-10-07T19:55:29Z",
      "mergedAt": "2021-10-07T19:55:29Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "db8b5df1eefd7b5fc39738a132c371ba801ab628"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 124,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE2MzI0ODQ0",
      "title": "Make OEM ID specifically for HW, add PEN option, add RNG option",
      "url": "https://github.com/ietf-rats-wg/eat/pull/124",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Previously OEM ID was just an IEEE OUI.\r\n\r\nNow it is specifically for identifying HW.\r\n\r\nIn addition to IEEE, PEN and a 128-bit random number of a hash of something can be used.\r\n",
      "createdAt": "2021-08-19T23:18:09Z",
      "updatedAt": "2021-10-08T02:27:51Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "db8b5df1eefd7b5fc39738a132c371ba801ab628",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "improve-oemid",
      "headRefOid": "464ca8bd4c9b0547fab9aa1ac6d3225041e5834b",
      "closedAt": "2021-10-08T02:27:46Z",
      "mergedAt": "2021-10-08T02:27:46Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "224e1812ca7c9a1cbf457d10754bf42d9970d782"
      },
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Would not want URIs. If you had some set of URIs you wanted to use, they should be hashed and go in oemid-random.\r\n\r\nI also don't really want to encourage any more forms for oemid for the sake of simplicity and to pin vendors into doing one of the approved schemes which we know is thought out and works correctly to give global uniqueness.\r\n\r\nThis is definitely not about allowing every vendor, standards org and specific industry to plug in their existing company naming schemes. It's about picking a minimal set that works.\r\n",
          "createdAt": "2021-08-25T01:21:30Z",
          "updatedAt": "2021-08-25T01:21:30Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM3NzM0MDY3",
          "commit": {
            "abbreviatedOid": "4349fe2"
          },
          "author": "nedmsmith",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "If you make oemid a type choice (ie $oemid) the parser can more deterministically resolve which form to use.  e.g.:\r\n\r\n```\r\n$oemid /= oemid-pen\r\n$oemid /= oemid-ieee\r\n$oemid /= oemid-random\r\n```\r\n\r\nIf there is a strong desire to allow URIs as vendor IDs that could be supported in the future as\r\n`$oemid /= uri `\r\nor\r\n`$oemid /= tstr`\r\n",
          "createdAt": "2021-08-24T22:07:41Z",
          "updatedAt": "2021-08-24T22:08:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 125,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE3MjAwNzc0",
      "title": "Add Device ID URNs for UEID and SUEID",
      "url": "https://github.com/ietf-rats-wg/eat/pull/125",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Address #122 \r\n\r\nAdds to Device Identifier URN defined in RFC 9039.",
      "createdAt": "2021-08-21T19:49:59Z",
      "updatedAt": "2021-08-23T18:20:03Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "d599df82f0d9e66420b7001e89909a3b0d170546",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "ueid-urn",
      "headRefOid": "dce4ac32a15177d567caed6db50fdf08bab4f0fb",
      "closedAt": "2021-08-23T18:19:56Z",
      "mergedAt": "2021-08-23T18:19:56Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "a06c07b601154e75f8a432e3acbc2913a8faf535"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 126,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE3MjAyMDEw",
      "title": "CDDL for each claim no longer in a separate sub section",
      "url": "https://github.com/ietf-rats-wg/eat/pull/126",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-21T19:59:53Z",
      "updatedAt": "2021-08-21T20:00:28Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "d599df82f0d9e66420b7001e89909a3b0d170546",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "nocddlheading",
      "headRefOid": "9139cb5d42f5514008ce5b7bc310022a3d69bee5",
      "closedAt": "2021-08-21T20:00:23Z",
      "mergedAt": "2021-08-21T20:00:23Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "a72204a312f4d5c968d67009a3d86a612e2d852b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 127,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE3MjA0Nzg4",
      "title": "fFx headings in Changes From Previous section",
      "url": "https://github.com/ietf-rats-wg/eat/pull/127",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-21T20:24:48Z",
      "updatedAt": "2021-08-21T20:25:15Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "a72204a312f4d5c968d67009a3d86a612e2d852b",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "fixheadings",
      "headRefOid": "054b181fb4676ac83f622c09a9a8e17b7ee08ec2",
      "closedAt": "2021-08-21T20:25:11Z",
      "mergedAt": "2021-08-21T20:25:11Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "3f3b16c2b0710ad3a6f2e9f40dbd84c9c75a85f9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 128,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE4MTgxNjM3",
      "title": "Update references to IETF drafts",
      "url": "https://github.com/ietf-rats-wg/eat/pull/128",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Use the short means of referencing a draft independent of it version.\r\n\r\nMoved a few drafts to Informative since the are only mentioned in the profiles section. Also RATS architecture draft is informative since it is not a full standards track document.\r\n",
      "createdAt": "2021-08-23T20:51:12Z",
      "updatedAt": "2021-08-24T17:43:46Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "a06c07b601154e75f8a432e3acbc2913a8faf535",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "draft-refs",
      "headRefOid": "e338f9b3a11e4323b68e613cffa9b833656a27ac",
      "closedAt": "2021-08-24T17:43:43Z",
      "mergedAt": "2021-08-24T17:43:43Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "e83f154b21ff5d9320c68ff0943bd9e47ebad197"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 129,
      "id": "MDExOlB1bGxSZXF1ZXN0NzIyNzU1NDIx",
      "title": "Rework intro and other to use RATS and CWT terminology, procedures and such",
      "url": "https://github.com/ietf-rats-wg/eat/pull/129",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This updates some very old text that was created before there was even a rats architecture document or that it was decided an EAT would be a CWT.\r\n\r\nEAT now heavily relies on RATS architecture and CWT/JWT for terminology, procedures and such.\r\n\r\nThis addresses #119, #27 and #19\r\n",
      "createdAt": "2021-08-30T19:24:27Z",
      "updatedAt": "2021-08-31T17:23:52Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "e83f154b21ff5d9320c68ff0943bd9e47ebad197",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "general-update",
      "headRefOid": "dae57f26ece37b47bbe6f8d8da6f5cb118e12bce",
      "closedAt": "2021-08-31T17:23:46Z",
      "mergedAt": "2021-08-31T17:23:46Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "98d7bdee481be937863ad3557aadd62b8211ce50"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 132,
      "id": "PR_kwDOCEWCXc4s-cc0",
      "title": "More examples",
      "url": "https://github.com/ietf-rats-wg/eat/pull/132",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-09T19:10:48Z",
      "updatedAt": "2021-10-20T20:12:57Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "983f1c407d7a0f8cd5dd1ab3b3f7fae88c0135ad",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "examples",
      "headRefOid": "5954b5b61d7d325f22819ea9c36b8ef15b0f9915",
      "closedAt": "2021-10-20T20:12:50Z",
      "mergedAt": "2021-10-20T20:12:50Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "55aeab70fae46973c9d0b80408f206aa2f41d28b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 133,
      "id": "PR_kwDOCEWCXc4tZuMc",
      "title": "New simple SW name and version claim",
      "url": "https://github.com/ietf-rats-wg/eat/pull/133",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A simple alternative to a SW manifest / CoSWID",
      "createdAt": "2021-10-19T19:13:55Z",
      "updatedAt": "2021-10-20T01:13:40Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "8a06a42ea07fbc11f42496fd2acd57de8ad72f42",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "swname",
      "headRefOid": "eb51aa796cea7cd9055087ddea4e416d054435f5",
      "closedAt": "2021-10-20T01:13:36Z",
      "mergedAt": "2021-10-20T01:13:36Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "983f1c407d7a0f8cd5dd1ab3b3f7fae88c0135ad"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 134,
      "id": "PR_kwDOCEWCXc4td8vZ",
      "title": "Many CDDL fixes and rearrangements",
      "url": "https://github.com/ietf-rats-wg/eat/pull/134",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-21T01:25:42Z",
      "updatedAt": "2021-10-21T04:10:23Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "3c8c81b60d1d8016a08597cd5fd7f5cc130d8478",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "cddlfix",
      "headRefOid": "05c1fe731c2e80045fc3e7141d9b0b7643ca5d23",
      "closedAt": "2021-10-21T04:10:23Z",
      "mergedAt": "2021-10-21T04:10:23Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "0980e04d1a58f0472c3240ea6b585888fc356d37"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 137,
      "id": "PR_kwDOCEWCXc4uDtRe",
      "title": "Add the result code claim",
      "url": "https://github.com/ietf-rats-wg/eat/pull/137",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-03T19:24:12Z",
      "updatedAt": "2021-11-08T20:42:50Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "e5d9e24dcaf51ae45f732b9e261d81925923e1ec",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "resultcode",
      "headRefOid": "826ea003f9804d4aeb1dc0e3c919bcd47765a3bb",
      "closedAt": "2021-11-08T20:42:50Z",
      "mergedAt": "2021-11-08T20:42:50Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "21d08b469ad83166c6d92ecaf19e02c722027c11"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 139,
      "id": "PR_kwDOCEWCXc4uQEun",
      "title": "Add HW Class Claim",
      "url": "https://github.com/ietf-rats-wg/eat/pull/139",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-08T21:15:12Z",
      "updatedAt": "2021-12-06T18:39:11Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "3c0eb487d01676bea7ea16c918bcfe9cedd8af6a",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "class",
      "headRefOid": "0f190ff79a2b74b0cda07160255951270c5b30b6",
      "closedAt": "2021-12-06T18:39:11Z",
      "mergedAt": "2021-12-06T18:39:11Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "8a80cef4b419f53ed0f33f95abfabb82295d74ea"
      },
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Address #138 ",
          "createdAt": "2021-11-08T21:16:03Z",
          "updatedAt": "2021-11-08T21:16:03Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "This is blocking the next release of the spec.  Can we merge?",
          "createdAt": "2021-11-10T14:54:40Z",
          "updatedAt": "2021-11-10T14:54:40Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "I do not see consensus on this, I am afraid. Could we please do an explicit call for consensus on the list real quick? Like \"this is how it works in English test, here are three examples in JSON and CBOR, any objections?\"",
          "createdAt": "2021-11-10T16:08:44Z",
          "updatedAt": "2021-11-10T16:08:44Z"
        },
        {
          "author": "bremoran",
          "authorAssociation": "NONE",
          "body": "Hardware classes MUST NOT be human readable. If they are, they will be abused as human-facing identifiers, then incompatible hardware revisions will be shoehorned into the same \"version\" for the sake of \"preserving image,\" hiding cost reductions, etc., etc.\r\n\r\nHardware classes are for machines to read. Don't make them human readable. Humans don't need to read them. UUIDs are a great solution because you can't read them, so you won't be tempted to hide human-readable information in them. A plain hash is good too.",
          "createdAt": "2021-11-11T11:35:41Z",
          "updatedAt": "2021-11-11T11:35:41Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOCEWCXc4vvzpl",
          "commit": {
            "abbreviatedOid": "d4e19b4"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-09T09:52:38Z",
          "updatedAt": "2021-11-09T09:52:38Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "is the assumption here that the raw `bytes` is really `bytes .cbor pluggable_hw_class_type` ?",
              "createdAt": "2021-11-09T09:52:38Z",
              "updatedAt": "2021-11-09T09:52:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOCEWCXc4vw0TW",
          "commit": {
            "abbreviatedOid": "d4e19b4"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-09T14:10:16Z",
          "updatedAt": "2021-11-09T14:10:17Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "FYI, the way we deal with this same problem in CoRIM is to create an extensible type with a few reasonable (tagged) ID formats to start with, and an associated registry where new code points (and associated semantics) can be added in the future.",
              "createdAt": "2021-11-09T14:10:16Z",
              "updatedAt": "2021-11-09T14:10:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOCEWCXc4vxuPe",
          "commit": {
            "abbreviatedOid": "d4e19b4"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-09T16:57:01Z",
          "updatedAt": "2021-11-09T16:57:02Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "My thinking is that the structure of the bytes is OEM-specific and that we should not try to herd the OEM's into any standard formats. Doesn't seem like any need for this.\r\n\r\nAn OEM could define the structure in CBOR and then use .cbor to write CDDL for it. Nothing we're doing here stops that.\r\n\r\nKind of the intent here is the concatenation of HW OEM ID, HW Class and HW Version really gets you the exact unique type of the HW. You can do that without knowing the structure of the individual claims.\r\n\r\nSo, yes, really a byte string. (I thought about also allowing a text string)",
              "createdAt": "2021-11-09T16:57:02Z",
              "updatedAt": "2021-11-09T16:57:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOCEWCXc4vygVb",
          "commit": {
            "abbreviatedOid": "d4e19b4"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-09T19:48:40Z",
          "updatedAt": "2021-11-09T19:48:40Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "Noting that this approach makes the claim extremely context sensitive.\r\n\r\nI guess for those EATs that carry an explicit profile claim, the profile could be used to unambiguously cast to the intended format.",
              "createdAt": "2021-11-09T19:48:40Z",
              "updatedAt": "2021-11-10T10:09:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOCEWCXc4v2ei8",
          "commit": {
            "abbreviatedOid": "d4e19b4"
          },
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-10T16:06:48Z",
          "updatedAt": "2021-11-10T16:06:48Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "I am having a hard time understanding how to use this claim. Maybe we can have a comprehensive example from the TEEP space that demonstrates very precisely how this claim (and the other \"teep required claims\" are supposed to work?",
              "createdAt": "2021-11-10T16:06:48Z",
              "updatedAt": "2021-11-10T16:06:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOCEWCXc4v3F5g",
          "commit": {
            "abbreviatedOid": "d4e19b4"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-10T18:17:57Z",
          "updatedAt": "2021-11-10T18:17:57Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "@thomas-fossati  I think this works without any specified structure if the receiver understands it is only to provide uniqueness.  The original specification of this from Henk has no structure either https://datatracker.ietf.org/doc/html/draft-birkholz-rats-suit-claims-02#section-3.1.2 It is a UUID which has some structure but don't think the UUID structure is the same as the structure you are after.\r\n\r\nI'm not opposed to structure if there's a clear reason for it, but it seems overkill right now and I'm not sure what that structure would look like.\r\n",
              "createdAt": "2021-11-10T18:17:57Z",
              "updatedAt": "2021-11-10T18:26:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOCEWCXc4v3IXD",
          "commit": {
            "abbreviatedOid": "d4e19b4"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-10T18:24:44Z",
          "updatedAt": "2021-11-10T18:24:44Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "@henkbirkholz This is a replacement for https://datatracker.ietf.org/doc/html/draft-birkholz-rats-suit-claims-02#section-3.1.2 so it should be used in a similar way.\r\n\r\nI probably could add some text saying it can be thought of as a HW model number.",
              "createdAt": "2021-11-10T18:24:44Z",
              "updatedAt": "2021-11-10T18:24:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOCEWCXc4v3SlO",
          "commit": {
            "abbreviatedOid": "019465c"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-10T18:55:07Z",
          "updatedAt": "2021-11-10T18:55:08Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "> @thomas-fossati I think this works without any specified structure if the receiver understands it is only to provide uniqueness.\r\n\r\nReading the accompanying prose below, I gather the assumption is that this is a completely unregulated space, so I am not sure how uniqueness is guaranteed?\r\n\r\n> The original specification of this from Henk has no structure either https://datatracker.ietf.org/doc/html/draft-birkholz-rats-suit-claims-02#section-3.1.2 It is a UUID which has some structure but don't think the UUID structure is the same as the structure you are after.\r\n\r\nNot a lot of extensibility there, but at least it's a standardised way to mint *unique* IDs. \r\n\r\n> I'm not opposed to structure if there's a clear reason for it, but it seems overkill right now and I'm not sure what that structure would look like.\r\n\r\nOne way to attack this would be what I wrote [upthread](https://github.com/ietf-rats-wg/eat/pull/139/files#r745651422).\r\n",
              "createdAt": "2021-11-10T18:55:07Z",
              "updatedAt": "2021-11-10T19:00:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOCEWCXc4v3nm_",
          "commit": {
            "abbreviatedOid": "019465c"
          },
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-10T20:25:19Z",
          "updatedAt": "2021-11-10T20:25:19Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "My interpolation of the TEEP/SUIT requirements  is that it up to the OEM to create what ever uniqueness it thinks is necessary under their HW OEM ID. Some might want a lot, some might not want any.\r\n\r\nFrom the long threads with Brendon and TEEP/SUIT in the past, it seems that this is really about the OEM choosing what uniqueness they want for their product lines, their SW loads and such.\r\n\r\nWhile UUIDs give some uniqueness techniques, they don't inform the SUIT/TEEP use case because UUIDs are not about product lines and SW load compatibility.\r\n\r\nDo you have any examples of what formats you'd define for use with a socket/plug? That would really help me understand.\r\n\r\nI'm trying to interpolate the use case and come up with a design to move EAT forward. I am also OK deleting this claim or making it TEEP/SUIT specific. I am kind of a middle-man here.\r\n",
              "createdAt": "2021-11-10T20:25:19Z",
              "updatedAt": "2021-11-10T20:25:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOCEWCXc4v377M",
          "commit": {
            "abbreviatedOid": "019465c"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-10T22:03:56Z",
          "updatedAt": "2021-11-10T22:03:57Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "> My interpolation of the TEEP/SUIT requirements is that it up to the OEM to create what ever uniqueness it thinks is necessary under their HW OEM ID. Some might want a lot, some might not want any.\r\n\r\nLifting this up into EAT automatically gives it a much wider applicability, so we need to carefully look into the implications.  In its current form I don't think this can work unless we [couple it to the profile claim](https://github.com/ietf-rats-wg/eat/pull/139/files#r745959664).  But if that is the case, I don't see a strong reason for giving it global semantics.\r\n\r\n> From the long threads with Brendon and TEEP/SUIT in the past, it seems that this is really about the OEM choosing what uniqueness they want for their product lines, their SW loads and such.\r\n\r\nThanks a lot for the additional context.\r\n\r\n> While UUIDs give some uniqueness techniques, they don't inform the SUIT/TEEP use case because UUIDs are not about product lines and SW load compatibility.\r\n> \r\n> Do you have any examples of what formats you'd define for use with a socket/plug? That would really help me understand.\r\n\r\nI'd start with a set of standardised identifiers that either have strong collision-resistant properties, or are natively namespaced.   So, the first three that come to mind are OIDs, URIs, UUIDs.  And, most importantly, I'd make it possible to extend the type.  Concretely:\r\n```\r\nhardware-class-label => $hardware-class-type\r\n\r\n$hardware-class-type /= tagged-oid\r\n$hardware-class-type /= tagged-uuid\r\n$hardware-class-type /= tagged-url\r\n\r\n; extensions will need to allocate their own CBOR tag, e.g., in another document:\r\n$hardware-class-type /= tagged-vendor-x-hw-class-type\r\n```\r\n \r\n> I'm trying to interpolate the use case and come up with a design to move EAT forward. I am also OK deleting this claim or making it TEEP/SUIT specific. I am kind of a middle-man here.\r\n\r\nAppreciate this fully; apologies for taking on the role of the torturer. :-)\r\n",
              "createdAt": "2021-11-10T22:03:56Z",
              "updatedAt": "2021-11-10T22:03:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOCEWCXc4v59Rz",
          "commit": {
            "abbreviatedOid": "d4e19b4"
          },
          "author": "quic-jodonogh",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-11T12:05:32Z",
          "updatedAt": "2021-11-11T12:05:32Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "It is both reasonable for EAT to define a base set of types and to allow these to be extended by profiles, accepting that profile-defined types inevitably introduce some context sensitivity.\r\n\r\nHowever I don't think we need to boil the ocean at this time - it would be a massive undertaking to determine a universal (or even \"fairly widely applicable\") HW class type, and I don't think we ned to do this in EAT.\r\n\r\nIf I look at the GlobalPlatform TEE identifiers, for example (a reasonable class of TEE to wish to attest even if not at all TEEP compliant), I see no reasonable way to do something that would be interoperable outside of a GlobalPlatform profile (where interoperability would be assured).\r\n\r\nLooking at Thomas' approach above, only problem I have is what a verifier should do if it sees a `$hardware-class-type` it does not understand. For this reason I think I prefer something like:\r\n\r\n```\r\nhardware-class-label => $hardware-class-type\r\n\r\n$hardware-class-type /= tagged-oid\r\n$hardware-class-type /= tagged-uuid\r\n$hardware-class-type /= tagged-url\r\n$hardware-class-type /= bytes .cbor pluggable-x-hw-class-type\r\n```\r\n\r\nwhich has some similarity to Thomas' first comment. It would be straightforward for e.g. GlobalPlatform to define its own HW class type.\r\n\r\nI'm not sure that it is absolutely necessary to tie use of pluggable HW class type to the profile claim with a SHALL, but it seems reasonable to me that pluggable class type SHOULD be used in conjunction with profile claim and that the combination profile claim + CBOR encoded pluggable class type MUST uniquely distinguish different HW. ",
              "createdAt": "2021-11-11T12:05:32Z",
              "updatedAt": "2021-11-11T12:05:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOCEWCXc4xDm4o",
          "commit": {
            "abbreviatedOid": "434daf8"
          },
          "author": "quic-jodonogh",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "This approach makes sense to me. EAT Profiles can always make the format of the byte strong explicit if they wish to do so.",
          "createdAt": "2021-12-03T19:51:06Z",
          "updatedAt": "2021-12-03T19:51:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 141,
      "id": "PR_kwDOCEWCXc4u_cZA",
      "title": "Reduce HW Version to one claim",
      "url": "https://github.com/ietf-rats-wg/eat/pull/141",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Rather than having separate claims for HW Version for chip, board and device, there is only one. \r\n\r\nAn example is given using sumods to achieve what was possible before with the three claims, including giving OEM IDs and OEM classes.",
      "createdAt": "2021-11-25T00:18:51Z",
      "updatedAt": "2021-12-06T18:44:22Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "8a80cef4b419f53ed0f33f95abfabb82295d74ea",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "3level",
      "headRefOid": "7b8b40279d50c41fee497211de512524f503f270",
      "closedAt": "2021-12-06T18:44:11Z",
      "mergedAt": "2021-12-06T18:44:11Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "8df4193c338270e9ac44778f1b9b90a444aa5a7f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOCEWCXc4xDmY5",
          "commit": {
            "abbreviatedOid": "ab18c08"
          },
          "author": "quic-jodonogh",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Verified - all looks as we discussed today, and sufficient to meths e requirement. Much preferred over the previous chip/board/device labels.\r\n\r\nExample for board + device submods is helpful",
          "createdAt": "2021-12-03T19:48:30Z",
          "updatedAt": "2021-12-03T19:48:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 142,
      "id": "PR_kwDOCEWCXc4vX00V",
      "title": "Back out result code",
      "url": "https://github.com/ietf-rats-wg/eat/pull/142",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "(Will put this back in a separate PR so it can be discussed)",
      "createdAt": "2021-12-03T17:22:56Z",
      "updatedAt": "2021-12-03T17:51:33Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "84579cc484d33c4ae16f941141df090012469f52",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "no-ar",
      "headRefOid": "8954798f6523e0af27eb93e880942009b6e2236a",
      "closedAt": "2021-12-03T17:51:26Z",
      "mergedAt": "2021-12-03T17:51:26Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "3c0eb487d01676bea7ea16c918bcfe9cedd8af6a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 143,
      "id": "PR_kwDOCEWCXc4vX9Tz",
      "title": "Add general result code, useful for attestation results",
      "url": "https://github.com/ietf-rats-wg/eat/pull/143",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-03T18:20:39Z",
      "updatedAt": "2021-12-03T18:20:39Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "3c0eb487d01676bea7ea16c918bcfe9cedd8af6a",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "resultcode2",
      "headRefOid": "2b3ceb0d9204e488d6bd0277905f4b89fe352a31",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 145,
      "id": "PR_kwDOCEWCXc4vtKt0",
      "title": "Remove comments from CDDL",
      "url": "https://github.com/ietf-rats-wg/eat/pull/145",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Also, squeeze out some blank space",
      "createdAt": "2021-12-11T04:24:00Z",
      "updatedAt": "2021-12-15T22:34:32Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "99dc74bb995991437b23cd2db41d40f6393e2038",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "no-cddl-comments",
      "headRefOid": "352e729e8f57d5356a2675a0130a662756afe968",
      "closedAt": "2021-12-15T22:34:27Z",
      "mergedAt": "2021-12-15T22:34:27Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "63627fbdd358610f202e2d43d23c45ee0783dfec"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 146,
      "id": "PR_kwDOCEWCXc4wDyaN",
      "title": "Rename class claim to model claim",
      "url": "https://github.com/ietf-rats-wg/eat/pull/146",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Seems the TEEP folks really did mean class, not model.\r\n\r\nThe class claim is coming in a separate PR.\r\n",
      "createdAt": "2021-12-20T05:55:33Z",
      "updatedAt": "2021-12-22T20:38:59Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "8d53b2d298f5e13128779a5bf9c42f62bb27b8a5",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "model",
      "headRefOid": "704933cb79001c7b633c34486e2cdec5b66db1a0",
      "closedAt": "2021-12-22T20:38:55Z",
      "mergedAt": "2021-12-22T20:38:55Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "9c5d1b8e371d9d05a935f260164a365fea99bc0b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 147,
      "id": "PR_kwDOCEWCXc4wM-0v",
      "title": "Add HW Class claim (really this time)",
      "url": "https://github.com/ietf-rats-wg/eat/pull/147",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "wontfix"
      ],
      "body": "",
      "createdAt": "2021-12-22T20:55:16Z",
      "updatedAt": "2022-01-13T20:13:46Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "9c5d1b8e371d9d05a935f260164a365fea99bc0b",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "hwclass",
      "headRefOid": "e394ba6af48dd68edc0619d90bfcf810f1bda277",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "This is to really address #138",
          "createdAt": "2021-12-22T21:10:21Z",
          "updatedAt": "2021-12-22T21:10:21Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Here's some design rationale...\r\n\r\nFrom talking to Dave, this is really about HW IP like that from Arm, Synopis and the like. These are companies that do HW designs, but don't manufacture them. With contract foundries like TSMC and these HW IP designers, there's lots more people making chips with a lot more common HW blocks, so I can see the use in such a generic claim.\r\n\r\nSince I worked on HW for a while, I can say \"IP\" is the term used in the HW industry. Any interest in calling this the \"HW IP Claim\"? It would be crystal clear to me, where as \"Class\" was extremely confusing to me.\r\nhttps://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core\r\n\r\nThe identifier really does have to be globally unique. It can't be anchored with the OEM, because the key point here is that multiple OEMs are using the same design. It can't be anchored in something like a MAC address or IEEE OUI.\r\n\r\nThe two extant global identifier schemes not associated with an OEM are URI's and OIDs, so I've allowed them.\r\n\r\nGlobal uniqueness can also be achieved probabilistically with a large random number, so there's a 16-byte string too. There's probably not very many of these designs, only thousands, so 16 bytes is enough. This also fulfills the non-human-readable characteristic that is desired. It can be a UUID too.\r\n\r\nFor this to work, someone has create an ID for each HW design and make sure the OEMs manufacturing with the design use that ID. Ideally, each HW designer would tell the OEM the EAT HW Class for the HW block you are putting in your chip is xxx.\r\n\r\nI thought about an IANA registry for HW IP identifiers, but that seems a bit of an overreach. On the other hand, it would be clear what they all are and they could be integers like PENs. They would be very compact.\r\n\r\n\r\nThis is also completely different from a HW Model number. Before my conversation with Dave, I though this was a HW Model number so that's what I defined.\r\n\r\nNow I think we need both a HW Model number and a HW Class/IP identifier. I've renamed the previous text to be the HW Model number and created this new PR that is the HW Class ID.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-12-23T21:45:33Z",
          "updatedAt": "2021-12-23T21:48:31Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 148,
      "id": "PR_kwDOCEWCXc4wSZOs",
      "title": "Major change to prefer the term \"entity\" to \"device\"",
      "url": "https://github.com/ietf-rats-wg/eat/pull/148",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Address #16 and other comments.",
      "createdAt": "2021-12-27T02:28:31Z",
      "updatedAt": "2022-01-05T21:19:16Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "9c5d1b8e371d9d05a935f260164a365fea99bc0b",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "entity",
      "headRefOid": "6770a20c3fc44100f19c170a64f8f7e126496588",
      "closedAt": "2022-01-05T21:19:12Z",
      "mergedAt": "2022-01-05T21:19:12Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "bc8d3c79cfe696e40a26108396697500bb6c2a57"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOCEWCXc4yFZ-m",
          "commit": {
            "abbreviatedOid": "3f94f6c"
          },
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-12-27T10:00:34Z",
          "updatedAt": "2021-12-27T10:03:07Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "As a read I do know what to unpack from \"roughly\" here. It is the main semantic anchor of the document.\r\n\r\n",
              "createdAt": "2021-12-27T10:00:34Z",
              "updatedAt": "2021-12-27T10:03:07Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nAn entity corresponds to a \"system component\" as defined in the Internet Security Glossary {{RFC4949}}.\r\n```",
              "createdAt": "2021-12-27T10:00:54Z",
              "updatedAt": "2021-12-27T10:03:07Z"
            },
            {
              "originalPosition": 26,
              "body": "If that feels like it is not enough, please add text that specifically elaborates on the difference.",
              "createdAt": "2021-12-27T10:01:43Z",
              "updatedAt": "2021-12-27T10:03:07Z"
            },
            {
              "originalPosition": 32,
              "body": "Same here",
              "createdAt": "2021-12-27T10:02:32Z",
              "updatedAt": "2021-12-27T10:03:07Z"
            },
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nAn entity corresponds to an Attester as defined in RATS Architecture.\r\n```",
              "createdAt": "2021-12-27T10:02:46Z",
              "updatedAt": "2021-12-27T10:03:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 149,
      "id": "PR_kwDOCEWCXc4wlTJ9",
      "title": "Tighten up section 1 (address comments from Hannes)",
      "url": "https://github.com/ietf-rats-wg/eat/pull/149",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-01-05T22:23:37Z",
      "updatedAt": "2022-01-16T19:46:29Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "bc8d3c79cfe696e40a26108396697500bb6c2a57",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "hannes1",
      "headRefOid": "94e81b415d698c1eaf0520cf9ddb2344d28fdc74",
      "closedAt": "2022-01-16T19:46:24Z",
      "mergedAt": "2022-01-16T19:46:24Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "ee023dce97d6a23b60c51d9837d1648de1859f3a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 150,
      "id": "PR_kwDOCEWCXc4w9gvv",
      "title": "Remove boot-seed and uptime claims",
      "url": "https://github.com/ietf-rats-wg/eat/pull/150",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Non-critical claims; make the document a little shorter.",
      "createdAt": "2022-01-13T20:12:14Z",
      "updatedAt": "2022-01-25T19:59:49Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "bc8d3c79cfe696e40a26108396697500bb6c2a57",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "rm_claims",
      "headRefOid": "fa3e8a7c0d6eda0d2a97d96d14f7849dea92e17a",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "We have identified cases for uptime.  Moreover I could not identify a request to remove these 2 claims based on the list feedback, nor the issues list.  Recommend withdrawing this PR.",
          "createdAt": "2022-01-14T17:05:34Z",
          "updatedAt": "2022-01-14T17:05:34Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Hannes and others have said the document is too long and that it doesn't need to define so many claims. These are the two claims I thought were the first on the list to go.\r\n\r\nI'm personally neutral on whether they stay or go. I'll leave this PR open for a while and withdraw it if no one else wants them removed.",
          "createdAt": "2022-01-16T19:44:12Z",
          "updatedAt": "2022-01-16T19:44:12Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "@laurencelundblade \r\n\r\nIt seems that an alternative candidate for claim removal are the DLOA claim - which is not clear that anyone will make use of it outside of GP, which seems to already have this information covered independent of EAT.  Security level may also be a candidate for removal given that it does not provide additional security assurances to a relying party - it is self-attested claim.   Also, removal of the current Section 4 (if we are interested in shortening the doc) may be in order as it is not clear that a discussion on unsigned JWT's should be addressed in an attestation document.",
          "createdAt": "2022-01-18T17:54:07Z",
          "updatedAt": "2022-01-18T17:54:07Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "Unprotected JWT Claims Sets are now at least covered in Appendix A of the UCCS I-D: https://www.ietf.org/rfcdiff?url2=draft-ietf-rats-uccs-02.txt",
          "createdAt": "2022-01-18T18:37:45Z",
          "updatedAt": "2022-01-18T18:37:45Z"
        },
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's keep issues separate and independent.  If you want to remove DLOA's and security level please file separate issues for them.\r\n\r\nWe already have issues filed for the UCCS stuff.\r\n",
          "createdAt": "2022-01-25T19:14:31Z",
          "updatedAt": "2022-01-25T19:14:31Z"
        },
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": ">Let's keep issues separate and independent. If you want to remove DLOA's and security level please file separate issues for them.\r\n\r\nActually I was responding to your rationale on selecting these 2 claims:\r\n\r\n>These are the two claims I thought were the first on the list to go.\r\n\r\nThis seems to be based on arbitrary criteria, so I suggested two others that could be \"first on the list to go\".",
          "createdAt": "2022-01-25T19:59:49Z",
          "updatedAt": "2022-01-25T19:59:49Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 152,
      "id": "PR_kwDOCEWCXc4xctrl",
      "title": "Second attempt at early allocation of CWT Labels",
      "url": "https://github.com/ietf-rats-wg/eat/pull/152",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This brings in the CWT Labels for EAT claims including updating the CDDL and examples.\r\n\r\nThis also fill out all the IANA section for the TBD items too, that was previously a \"TODO\" item.",
      "createdAt": "2022-01-22T21:25:31Z",
      "updatedAt": "2022-04-05T16:31:30Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "76722d0ef25c0cd7b54e42b59431bfb9b238863f",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "early2",
      "headRefOid": "de7f7230764985b30fdf6e728655b4736520f02b",
      "closedAt": "2022-02-17T18:52:08Z",
      "mergedAt": "2022-02-17T18:52:08Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "6e89874a97d43aa55f77a7b7d438ec381409bf90"
      },
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "This addresses #131",
          "createdAt": "2022-01-22T23:59:59Z",
          "updatedAt": "2022-01-22T23:59:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOCEWCXc40gCma",
          "commit": {
            "abbreviatedOid": "0a686e6"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T03:20:13Z",
          "updatedAt": "2022-02-12T03:20:13Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Please update all the \"CWT Claim Key\" values to use the form:\r\n\r\n- CWT Claim Key: TBD (requested value NNN)\r\n\r\nFor instance, this example should be:\r\n\r\n- CWT Claim Key: TBD (requested value 256)",
              "createdAt": "2022-02-12T03:20:13Z",
              "updatedAt": "2022-02-12T03:20:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOCEWCXc40wo7g",
          "commit": {
            "abbreviatedOid": "de7f723"
          },
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "TL;DR\r\n\r\nThe axiom/principle-decision to allow for every Claim defined by EAT to be included in both RATS Conceptual Messages that are Evidence and Attestation Results appears to be quite confusing to me.\r\n\r\nA more detailed overview and selected examples are included in the comments for [draft-ietf-rats-eat.md](https://github.com/ietf-rats-wg/eat/pull/152/files/c8b39f500de29237c1b3916bb8249c27c7ee2fdd..de7f7230764985b30fdf6e728655b4736520f02b#diff-a14dc11088917fcc59b3a1cf2f73b0fd477930cf32583c0264038cd78e68fd9d).\r\n\r\nA comment intended as a more elaborate overview is located in [cddl/eat-tbd-labels.cddl](https://github.com/ietf-rats-wg/eat/pull/152/files/c8b39f500de29237c1b3916bb8249c27c7ee2fdd..de7f7230764985b30fdf6e728655b4736520f02b#diff-af71a31529405c70227897845f05d0a1c611c044f8e358e2eb8700b3f38ca5d8).",
          "createdAt": "2022-02-16T21:29:25Z",
          "updatedAt": "2022-02-16T22:48:01Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Actually, I am simply skipping this one as I am pretty sure that there is no tangible consensus on how the semantics of this Claim should be defined. See the ongoing threads in security-level on the mail list.",
              "createdAt": "2022-02-16T21:29:25Z",
              "updatedAt": "2022-02-16T22:28:42Z"
            },
            {
              "originalPosition": 13,
              "body": "This comment is placed as the top comment of a batch review and serves as a kind of introduction to the review.\r\n\r\nIn general, I am under the impression that a significant source for debate is the undifferentiated use of the defined sets of Claims in both EATs that reflect Evidence or EATs that reflect Attestation Results.\r\n\r\nAdditionally, I am not clear about how an EAT shall express that its content is either Evidence or Attestation Results. Adding to that, I am not clear about how an EAT shall expresses the identity the responsible Attesting Environment of an Attester or the responsible Verifier that produces the Claims and puts them into the corresponding RATS Conceptual Message (except implicitly due to the key material used for signing, which might not apply if UCCS or UJCS are used and nesting EATs are conveyed).\r\n\r\nTo reiterate, the more I try to compose RATS Conceptual Messages via the current Claim definition provided by this document, the more my doubts concerning the feasibility of the entire approach increase. I am not clear on how to compose useful and unambiguous EAT with the current definitions, tbh. To illustrate my confusion, I selected the very first issue that came to mind for each Claim definition that is covered by this PR.\r\n\r\nAnalogously, each following comment of this review batch is target towards a single Claim in the set for early allocation, specifically. The Claim specific comments are associated with [draft-ietf-rats-eat.md](https://github.com/ietf-rats-wg/eat/pull/152/files/c8b39f500de29237c1b3916bb8249c27c7ee2fdd..de7f7230764985b30fdf6e728655b4736520f02b#diff-a14dc11088917fcc59b3a1cf2f73b0fd477930cf32583c0264038cd78e68fd9d).",
              "createdAt": "2022-02-16T21:39:26Z",
              "updatedAt": "2022-02-16T22:50:28Z"
            },
            {
              "originalPosition": 14,
              "body": "A Claim that only belongs into Evidence, I think. What purpose would it serve, if it is produced by a Verifier and put into Attestation Results?",
              "createdAt": "2022-02-16T21:40:19Z",
              "updatedAt": "2022-02-16T22:28:42Z"
            },
            {
              "originalPosition": 23,
              "body": "Same. A Claim that only belongs into Evidence, I think. What purpose would it serve, if it is produced by a Verifier and put into Attestation Results? Do I want to know a boodseed of a Verifier? Wouldn't that be Evidence about the Verifier that takes on the role of an Attester in a \"separate RATS layer\"?",
              "createdAt": "2022-02-16T21:40:37Z",
              "updatedAt": "2022-02-16T22:28:42Z"
            },
            {
              "originalPosition": 32,
              "body": "I am not sure what the intend (sorry for pun) of this Claim actually is. \r\n\r\nOne example:\r\n\r\n\"security assessment of the attesting entity\". Security assessment come from the Verifier, so it seems to belong into Attestation Results, but it says attesting entity, so it belongs into Evidence? These conditions are mutually exclusive and belong into separate Conceptual Messages, right?\r\n\r\nAnother example:\r\n\r\n\"to provide an attestation\". I do not understand what that means. Is that Evidence? Or is that an Attestation Result? Or not even part of a artifact (Conceptual Message), but an activity?\r\n\r\nI hope these two examples (and there are more) illustrate my confusion.",
              "createdAt": "2022-02-16T21:47:14Z",
              "updatedAt": "2022-02-16T22:28:42Z"
            },
            {
              "originalPosition": 41,
              "body": "The definition of this Claim states: \"This claim is typically issued by a Verifier, not an Attester.\"\r\n\r\nSo what does it mean, if it is included in Evidence (which is clearly allowed)?",
              "createdAt": "2022-02-16T21:49:01Z",
              "updatedAt": "2022-02-16T22:28:42Z"
            },
            {
              "originalPosition": 50,
              "body": "The definition of this Claim implies that the EAT it is included in is about a software component that could alternatively be expressed as a CoSWID. This again brings up the question of the system boundaries that one EAT encompasses. I assume the definition implies \"if you find this Claim (or the corresponding CoSWID Claim) in this EAT, the whole EAT is about a single software component\". Is that correct? What if there are other signed EATs in this EAT that do not include any of the two claimes? Are they also about that software component (the same goes for UCCS and UJCS, of course)?",
              "createdAt": "2022-02-16T21:54:13Z",
              "updatedAt": "2022-02-16T22:28:42Z"
            },
            {
              "originalPosition": 59,
              "body": "same as for swname",
              "createdAt": "2022-02-16T21:54:58Z",
              "updatedAt": "2022-02-16T22:28:42Z"
            },
            {
              "originalPosition": 68,
              "body": "The CDDL defintion for this Claim includes \"manifests-type = [+ $$manifest-formats]\", which means that you can express multiple CoSWIDs or SUIT Manifests as content of an EAT. As CoSWIDs are either \"Evidence\" (which literally translates to Claims produced by an Attester) or \"Payload\" (\"which means they are Endorsements that can be co-located with endorsed software components on an Attester), why should they be produced by the Verifier and included in Attestation Results? See below, the output of an appraisal conducted by a Verifier that is \"swresult\".",
              "createdAt": "2022-02-16T22:01:57Z",
              "updatedAt": "2022-02-16T22:28:42Z"
            },
            {
              "originalPosition": 77,
              "body": "Why should a Verifier be allowed to include this Claim in Attestation Results. The descriptive text clearly implies that this Claim must originate from an Attester. What is the purpose of allowing this for Attestation Results?",
              "createdAt": "2022-02-16T22:04:33Z",
              "updatedAt": "2022-02-16T22:28:42Z"
            },
            {
              "originalPosition": 86,
              "body": "The complement to \"swevidence\". Why should this Claim ever be produced by an Attester? What is the purpose of allowing this for Evidence?",
              "createdAt": "2022-02-16T22:05:16Z",
              "updatedAt": "2022-02-16T22:28:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 154,
      "id": "PR_kwDOCEWCXc4xh8OD",
      "title": "Wording improvements, more use of normative langauge",
      "url": "https://github.com/ietf-rats-wg/eat/pull/154",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "These are changes to section 3, except for the submodules section to address comments from Hannes.\r\n\r\nThe biggest group of changes is to use normative language when needed.",
      "createdAt": "2022-01-25T01:28:38Z",
      "updatedAt": "2022-01-26T05:24:00Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "ee023dce97d6a23b60c51d9837d1648de1859f3a",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "hannes3",
      "headRefOid": "d7a9e9cca9d34e61f88519e8fa40368bf3e30799",
      "closedAt": "2022-01-26T05:23:56Z",
      "mergedAt": "2022-01-26T05:23:56Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "c71282e01efe9b88cca58bcb82d559ed05bb9c96"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 156,
      "id": "PR_kwDOCEWCXc4xohmq",
      "title": "Introduction of the Odometer Claim",
      "url": "https://github.com/ietf-rats-wg/eat/pull/156",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-01-26T18:45:34Z",
      "updatedAt": "2022-02-17T18:53:30Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "c71282e01efe9b88cca58bcb82d559ed05bb9c96",
      "headRepository": "hannestschofenig/eat",
      "headRefName": "patch-1",
      "headRefOid": "731544fd504647bcd7ee7b7a3f0ad539651c3d41",
      "closedAt": "2022-02-17T18:53:30Z",
      "mergedAt": "2022-02-17T18:53:30Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "3eab6a0db7f7dc05451265197dcfe6ce3cd0d0e6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 158,
      "id": "PR_kwDOCEWCXc4xwNoI",
      "title": "IANA registrations for the application/eat+cbor media type",
      "url": "https://github.com/ietf-rats-wg/eat/pull/158",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "question"
      ],
      "body": "Fixes #157",
      "createdAt": "2022-01-28T18:46:49Z",
      "updatedAt": "2022-01-31T17:55:01Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "8e6182ca3c4fb4a8b466db901f73a583249e3e96",
      "headRepository": "thomas-fossati/eat",
      "headRefName": "eat-media-type",
      "headRefOid": "872bf9fa0eff4dd762a67a7cc60eb6c80c5a378d",
      "closedAt": "2022-01-31T17:55:01Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "a) This PR lacks detail as to when to use the proposed media type in place of application/CWT.\r\n\r\nb) This PR does not state whether eat+cbor excludes COSE/CWT encapsulation.\r\n\r\nc) This PR lacks a corresponding section for security considerations, particularly in the presence of content-filtering proxies.  EAT was designed to provide a self-protecting payload, which could therefore be transported without any corresponding x-port security (e.g. TLS/DTLS).  However an intermediary could choose to drop an unrecognized content type if it can peek into the headers, and many existing proxies will.  The original intent of the editors was to avoid defining new media types to allow for seamless transition with existing proxies/gateways, without having to compel the use of a specific type of transport security.  Contrast this to protocols such as HTTP 2.0, which had to essentially mandate the use of TLS 1.2 (https://datatracker.ietf.org/doc/html/rfc7540#section-9.2) in practice (https://daniel.haxx.se/blog/2015/03/06/tls-in-http2/) to ensure in part that outdated proxies would not drop the traffic.  What is the security guidance on the use of new media types?  \r\n\r\nI don't think this PR is ready for inclusion in the EAT spec, and I think this topic would be better handled more comprehensively in a separate draft that provides for all attestation media types, along with sufficient guidance for implementors, and associated security considerations.  Moreover, this topic seems broader than just attestation.  Many data types that appear in a protocol that involves attestation conveyance may benefit from a more expressive CWT/JWT media type.",
          "createdAt": "2022-01-30T20:28:35Z",
          "updatedAt": "2022-01-30T20:28:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 159,
      "id": "PR_kwDOCEWCXc4xyAnP",
      "title": "Clarifications to the submods section",
      "url": "https://github.com/ietf-rats-wg/eat/pull/159",
      "state": "CLOSED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is based on comments from Hannes.",
      "createdAt": "2022-01-29T19:16:10Z",
      "updatedAt": "2022-01-29T20:30:40Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "8e6182ca3c4fb4a8b466db901f73a583249e3e96",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "submod-tweaks",
      "headRefOid": "40af595e6e8c83076b7f6b3266c76b4bb08cefb9",
      "closedAt": "2022-01-29T20:30:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "laurencelundblade",
          "authorAssociation": "COLLABORATOR",
          "body": "Something is wrong with this PR. It's not picking up the last push.",
          "createdAt": "2022-01-29T20:30:39Z",
          "updatedAt": "2022-01-29T20:30:39Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 160,
      "id": "PR_kwDOCEWCXc4xyD3s",
      "title": "Improve submods section based on comments from Hannes",
      "url": "https://github.com/ietf-rats-wg/eat/pull/160",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-01-29T20:31:20Z",
      "updatedAt": "2022-01-29T20:51:27Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "f9b30878904d2d2dc52b106ce950988f43df6f4d",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "submod-tweaks",
      "headRefOid": "032732fd9f63bd86e55fc93a91387ced0f86a1fd",
      "closedAt": "2022-01-29T20:51:26Z",
      "mergedAt": "2022-01-29T20:51:26Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "76722d0ef25c0cd7b54e42b59431bfb9b238863f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 161,
      "id": "PR_kwDOCEWCXc4xyEPt",
      "title": "fix plural of UEID and some merge conflict indicators",
      "url": "https://github.com/ietf-rats-wg/eat/pull/161",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-01-29T20:42:45Z",
      "updatedAt": "2022-01-29T20:43:09Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "d88aeb5535c0bd176624ea15eaad80f6a8ca7ad9",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "fix-recent-confusion",
      "headRefOid": "48b46a4e7ecff28d77683533126e311235cbb060",
      "closedAt": "2022-01-29T20:43:09Z",
      "mergedAt": "2022-01-29T20:43:09Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "f9b30878904d2d2dc52b106ce950988f43df6f4d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 162,
      "id": "PR_kwDOCEWCXc4xzGu2",
      "title": "Clarify the security level claimed ",
      "url": "https://github.com/ietf-rats-wg/eat/pull/162",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From mailing list comment by MCR.\r\n\r\nLaurence Lundblade <lgl@island-resort.com> wrote:\r\n- It is claiming the lowest level possible (as a warning)\r\n\r\nI think that this is the key part that makes it useful, even when self-asserted.\r\n\r\nIt is saying, \"I am *least* THIS vulnerable\",\r\n         not \"I am at *most* THIS secure\".\r\n",
      "createdAt": "2022-01-30T18:53:07Z",
      "updatedAt": "2022-01-31T03:56:46Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "76722d0ef25c0cd7b54e42b59431bfb9b238863f",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "sl1",
      "headRefOid": "ef70fe7c2a4b1352863cd355fc661bf6e371ccba",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "\"The security level claimed MUST be for the weakest point in the entity, not the strongest.  For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for secure-restriced.\".  \r\n\r\nIn my opinion this does not fully capture the original intent, which was also to convey a security level whose value could be determined independent from the entity manufacturer.  Therefore, in the example above, a manufacturer of an entity should not be able to claim a TEE-level of security assurance if this level of assurance has not been independently verified (e.g. by a cert house).     I would recommend adding text to clarify the difference between a security level that has been self-asserted versus a security level that has been independently verified.\r\n\r\nI would also recommend avoiding terms like 'self-assertion' and suggest 'self-determination' instead.  This is because 'assertion' already has definitions that may not correspond directly to the intent in this case (see https://www.w3.org/TR/webauthn-2/#sctn-terminology).\r\n\r\nI suggest the following:\r\n\r\n\"The security level claimed MUST be for the weakest point in the entity, not the strongest.  The weakest point of the entity could be determined by the attester itself, in which case it is self-determined.  The weakest point may also be determined by independent analysis (e.g. via a 3rd-party security certification program), in which case the security level is not self-determined and can be confirmed separately from the attestation (e.g. NIST's Cryptographic Module Validation Program online lookup - see https://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules/search).  \r\n\r\nFor example, in the case of self-determination if the attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for secure-restricted.  However, if the security level is not self-determined then the attester should only claim the security level at which the entity was verified by an independent 3rd-party.  In this example, if the manufacturer only obtained a security certification for the entity that corresponded to 'restricted' level, then that is the level at which the claim should be set even though the entity contains a TEE\".",
          "createdAt": "2022-01-30T23:30:58Z",
          "updatedAt": "2022-01-31T03:56:46Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 164,
      "id": "PR_kwDOCEWCXc4yMtMb",
      "title": "Add section on privacy considerations for replay protection",
      "url": "https://github.com/ietf-rats-wg/eat/pull/164",
      "state": "MERGED",
      "author": "gmandyam",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-07T21:41:13Z",
      "updatedAt": "2022-02-17T19:07:10Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "76722d0ef25c0cd7b54e42b59431bfb9b238863f",
      "headRepository": "gmandyam/eat",
      "headRefName": "PrivacyMods",
      "headRefOid": "2e3ddfbeead83c8d9aee07b3786b94b26a50450e",
      "closedAt": "2022-02-17T19:07:10Z",
      "mergedAt": "2022-02-17T19:07:10Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "80900556448aeb130f05baf55e3b919c9954646f"
      },
      "comments": [
        {
          "author": "gmandyam",
          "authorAssociation": "COLLABORATOR",
          "body": "For https://github.com/ietf-rats-wg/eat/issues/163",
          "createdAt": "2022-02-07T21:41:33Z",
          "updatedAt": "2022-02-07T21:41:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOCEWCXc40LhN8",
          "commit": {
            "abbreviatedOid": "5dc232f"
          },
          "author": "dthaler",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM modulo a couple typos.",
          "createdAt": "2022-02-08T01:43:58Z",
          "updatedAt": "2022-02-08T01:45:32Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nEAT offers 2 primary mechanisms for token replay protection (also sometimes\r\nknown as token \"freshness\"):  the cti/jti claim and the nonce claim.  The cti/jti claim\r\n```",
              "createdAt": "2022-02-08T01:43:58Z",
              "updatedAt": "2022-02-08T01:45:32Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nan implementor may choose a cti that is equivalent to a username associated with the device (e.g., account\r\n```",
              "createdAt": "2022-02-08T01:44:42Z",
              "updatedAt": "2022-02-08T01:45:32Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nof the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order\r\n```",
              "createdAt": "2022-02-08T01:44:56Z",
              "updatedAt": "2022-02-08T01:45:32Z"
            }
          ]
        }
      ]
    },
    {
      "number": 166,
      "id": "PR_kwDOCEWCXc4zAt6B",
      "title": "a few more things for odometer claim",
      "url": "https://github.com/ietf-rats-wg/eat/pull/166",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add the label, makefile variables and such for odometer claim",
      "createdAt": "2022-02-17T19:04:19Z",
      "updatedAt": "2022-02-17T19:06:06Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "3eab6a0db7f7dc05451265197dcfe6ce3cd0d0e6",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "odom2",
      "headRefOid": "f64537a3a1468f1ca151f1192264056ce23fd966",
      "closedAt": "2022-02-17T19:06:02Z",
      "mergedAt": "2022-02-17T19:06:02Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "87a375dab358a0156790b35c3fa5139b684103be"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 167,
      "id": "PR_kwDOCEWCXc4zAyza",
      "title": "minor fixes to replay privacy",
      "url": "https://github.com/ietf-rats-wg/eat/pull/167",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Formatting and changes list",
      "createdAt": "2022-02-17T19:21:58Z",
      "updatedAt": "2022-02-17T19:22:17Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "80900556448aeb130f05baf55e3b919c9954646f",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "rep-priv-2",
      "headRefOid": "170c88502a93d794d7856957c8759110d581b166",
      "closedAt": "2022-02-17T19:22:13Z",
      "mergedAt": "2022-02-17T19:22:13Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "17959f3c7711d484a6c64cf13d8b182fa5a0584a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 171,
      "id": "PR_kwDOCEWCXc4zv4CO",
      "title": "Sort the claims into four categories",
      "url": "https://github.com/ietf-rats-wg/eat/pull/171",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "1. Claims about the Entity (most claims)\r\n2. Claims about the Token (e.g. profile, intended use)\r\n3. Nonce\r\n4. Encoding keys\r\n\r\nThis is to clarify claims occurring in attestation evidence and/or attestation results",
      "createdAt": "2022-03-01T19:13:53Z",
      "updatedAt": "2022-04-06T21:40:03Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "b50a70c0f31f8880c94f170ac5c79cc514f7c939",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "ClaimCategories",
      "headRefOid": "17b8f8b732f9ccc0863d5f4995158511227ad201",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 172,
      "id": "PR_kwDOCEWCXc4zway7",
      "title": "remove half-precision exclusion from location claim",
      "url": "https://github.com/ietf-rats-wg/eat/pull/172",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-01T22:17:23Z",
      "updatedAt": "2022-03-22T13:12:22Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "17959f3c7711d484a6c64cf13d8b182fa5a0584a",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "LocationHalf",
      "headRefOid": "c24061883fa2c369282655cb954968fa77225a49",
      "closedAt": "2022-03-22T13:12:18Z",
      "mergedAt": "2022-03-22T13:12:18Z",
      "mergedBy": "laurencelundblade",
      "mergeCommit": {
        "oid": "c88bea72b9697fc0a7302e8143f698b54327af82"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 173,
      "id": "PR_kwDOCEWCXc40HvFc",
      "title": "first go at using JC<> template from uccs",
      "url": "https://github.com/ietf-rats-wg/eat/pull/173",
      "state": "OPEN",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-08T17:53:09Z",
      "updatedAt": "2022-04-06T17:26:20Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "17959f3c7711d484a6c64cf13d8b182fa5a0584a",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "jc-cddl",
      "headRefOid": "61d2bf65acf51ee31c92882ceb15773903d6a2d6",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 174,
      "id": "PR_kwDOCEWCXc41W8ey",
      "title": "Type in DLOS's claim",
      "url": "https://github.com/ietf-rats-wg/eat/pull/174",
      "state": "MERGED",
      "author": "laurencelundblade",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-31T01:15:53Z",
      "updatedAt": "2022-04-05T16:31:26Z",
      "baseRepository": "ietf-rats-wg/eat",
      "baseRefName": "master",
      "baseRefOid": "c88bea72b9697fc0a7302e8143f698b54327af82",
      "headRepository": "ietf-rats-wg/eat",
      "headRefName": "of",
      "headRefOid": "7dba54da104a9179dbe2ae448f22be66fe6c32cb",
      "closedAt": "2022-03-31T06:15:29Z",
      "mergedAt": "2022-03-31T06:15:29Z",
      "mergedBy": "henkbirkholz",
      "mergeCommit": {
        "oid": "b50a70c0f31f8880c94f170ac5c79cc514f7c939"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOCEWCXc43Qal8",
          "commit": {
            "abbreviatedOid": "7dba54d"
          },
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-31T06:15:19Z",
          "updatedAt": "2022-03-31T06:15:19Z",
          "comments": []
        }
      ]
    }
  ]
}