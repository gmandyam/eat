<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="06"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer. <xref target="RFC7252" format="default"/>
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: $$manifest-body-json .feature "J" /
                    $$manifest-body-cbor .feature "C"
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

base64-url-text = text

]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
See the discussion above in the manifests claim.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: $$swevidence-body-json .feature "J" /
                    $$swevidence-body-cbor .feature "C"
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="nested-token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
              <t>The following two sections describe how to encode and decode a nested token.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string.
The text string MUST contain a JSON-encoded array of two items.
The first item is a string identifying the type of the token.
The second item is the JSON-encoded token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"UJCS":  </dt>
                  <dd>
                    <t>The second item MUST be a UJCS-Message as defined in this document.</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>The definition of additional types requires a standards action.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two in the same format as described in the section above.</t>
                <t>A CBOR-encoded token nested inside a JSON-encoded MUST use the same array of two, but with the type as follows:</t>
                <dl>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                  </dd>
                </dl>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
          <section anchor="cddl-for-submods" numbered="true" toc="default">
            <name>CDDL for submods</name>
            <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (odometer-label => uint)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: $$manifest-body-json .feature "J" /
                    $$manifest-body-cbor .feature "C"
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

base64-url-text = text


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: $$swevidence-body-json .feature "J" /
                    $$swevidence-body-cbor .feature "C"
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 256
sueids-label = 257
oemid-label = 258
hardware-model-label = 259
hardware-version-label = 260
secure-boot-label = 262
debug-status-label = 263
location-label = 264
profile-label = 265
submods-label = 266


security-level-label = <TBD>
uptime-label = <TBD>
boot-seed-label = <TB>
odometer-label = <TBD>
intended-use-label = <TBD>
dloas-label = <TBD>
sw-name-label = <TBD>
sw-version-label = <TBD>
manifests-label = <TBD>
swevidence-label = <TBD>
swresults-label = <TBD>


]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

nonce-label /= "nonce"

ueid-label /= "ueid"
sueids-label /= "sueids"
oemid-label /= "oemid"
hardware-model-label /= "hwmodel"
hardware-version-label /= "hwversion"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
profile-label /= "eat-profile"
uptime-label /= "uptime"
boot-seed-label /= "bootseed"
odometer-label /= "odometer"
intended-use-label /= "intuse"
dloas-label /= "dloas"
sw-name-label /= "swname"
sw-version-label /= "swversion"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
swresults-label /= "swresults"
submods-label /= "submods"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [700, / CoAP Content tag for CoSWID /
                                h'a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02' ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ [ 900,
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' ]
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11-1" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAA55dWIAA+y9a3PbWJYg+B2/AqHs2LSqSMp6+NmR06uUlFnKti2PJbd7
tqIiAyJBCWUSYAOgZLbH/dv3vO+5ACirqmYiNjamuiMtAhf3ee55P8bjcdK0
WTn7PVtUZf46bet1nhSrmv5q2oOnT189PUimWfs6bdpZksyqaZktoeGszubt
uMjb+bjO2macZ+14kbV50ybJ/c3r9MPx1WX6qao/F+VN+mtdrVfJD+m0Kpu8
bNbN6/THTd78CI+a9fWyaJqiKtvNCvo9P7v6JVkVr5M0bauptqMfs3zV3sKT
I/zdVHVb5/MmtGg2y/jBtFqusmnrWqyvw7Oywkf1fJrPmnazyLVZW7T44+o2
T89K+LFJj1tcVtbCHNOr6nNepk/Ojq92k+z6us7vXqfwI8nqPIPJl21el3mb
fL6H/SpuSlx85j6fXlc1LHoGG/U6PXi6fzjef5pk6/a2ql8n47QoYfpvJumb
dTm7XmSzHGbI2/0mW9d5Oc2jV1UNG32ZT9c1ThNmXNWb9M2bE3iVL7Ni8Tpd
3Cz+70YatPR+AjugI/06Sd/C2W+ypY3za1EXs9usdi9olP++zhbw5TK9yqe3
ZbWoboq8gfVOJ7ivcBI57OmzFy+epW+rOr+t1k2entbFHU5zCoPDPLMyPS3y
mwp3Pb+B3XidnmSLYl7VZZHRca3LtoaWHy+P4efqlgBy54/76ctnL9Pnz/bT
FwCOO2FxS57i//0fbTH5D5mfX95vk/Tix9OqrG5u12Enf8vrfLmJ3zx+iQcv
XqW/ZHUJ51itb27TD1U2syW6F7SeGW7ox/2j9MWby2iBZdHms/RfATpm1TKs
9Y9HR+n+wbOD9PD54f7LV2Glf61mNNn+UpOyqpcAW3c53pgPv5wc7O+/kj9f
7D+zP5/tPwt/Ppc/X746sgYwbGjwIvxpDV4+faqf7R9YD/svjvTPw1faw8vn
+9b2xZF2dvjqZfjMRnsFCAb/xP/BP59+vXx5xL/brL7BLd+5bdtV83pvL8/q
9nZclPNqUt5kk2Wx2FvdrvZm1X25gGOYwI9/mReL/KdpVdWz8f1N8/Joh7vi
O/3p4sOb0/TXs4vTs6vzk/Tyf1xenb1N91+9PBql7349nlxevTudPH16+Pz3
/cnTydPfaTLUgV5R/HvM4PKObnS2SH/Nq2YFP7LFGO//YlHc0E09xn826RPo
eZc+tFt/NH76Yvz0ZQJPz4/fHU9OPl1NThZZsWzilePCYd339/eTIiuzCYy7
lzWIV5Z52TZ70/vWL+/k54sP6af8WpEUdLubcr9+EalfBY7vJjfPFk1u8/qt
M69oYs1DM/urzEyn9tvlxTs/td86U4vn1ptcd3YfT04uJ6dIgaDR+HQSyNB6
Om2wxdUt3Ndf37+fnL89O+/vKk5+BRQkW0wOb1Yrmv8sbz631WpZzdaLvNm7
XOXTYl5M6Zg7P0/zFu5lM8ma1Zd/afyb89lPLw5e+VM5rGcAImVeMwV4D0AM
P5rbYpW+r6u/5tP2nxnjQA+LNBqG6WZ6Ahg1fZe390BNU8B50LxeFgB6zT+n
79bL67wGRDJKs9mszuEMkORAo2IGJ2FdbYPiQ9ijGDhfpbh/v5yfXkyOP1yc
vfZrwafpMfSCXUPHVZ0eLxbVPSCzD0Dj6mKKeO1iRYuFeZyVd0VdMUykb4qm
HTyIeTGrMrg2GdwaOgnc0YYej5V4jev8P9YFYG4CL3qV+XmMM54HtNN5jCud
xzh38xgvYB7ju/3JwXg+Gx88hSXvPz2Y3LbLxbZNQl6Aly6zdDv2rrrL8QhS
7Al37uz43Xj/cBjk8L7cNPu8SGS7snrW7F1nNdKKBhBcOV6vpn7HmaNQVHNc
w3IXuZw6TA8G2/v4/iTVLrat4NfL/c4p41RPqstP56fuCjXZdDmeVs19McP3
cJDl+elJVZYApQiFw6uCfS6L2QT4Hjk5fgAd0Yfwb52P939/GvZYFsf9pzIA
wzlgXqDe8AlcTwaivIY/srTJ23R/aONfEkodwnDz9WLBRP/dBPiPz8VyXWe9
d8Am/Fxns0W+6b16O0l/A8rc9F78PElnefo2n+UAV/3XJxNkg9piCStKiK6d
vrk4Ht69m0V1nS1WwDsDJ7Qk0Lhf4d61AK176xWStmYPlvhsb/9g79f3J7+f
FjcFYK43OTCW9cX8eLWqq7ts8fsdUq3VbO63WNqm3Dit5qk2H4bh/WcJnvz7
s3dbkGZeBowPP/be5yX0uBA0M1llN7kf/z3wgDAGstJ5vaqLxoD3CYyxC2jj
P9YkMyjNQQ553GY3TYR48BXTtyt4BV/dwCWuN1sv2TC51K7DX5MvBJPwP2Qr
Yk7qaP9AmZSjo/Cn45n2D4zNOTp6bgzNITTAv0ECmhzX01tg9qYtsO9dWpW5
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
eXM4eHRNQHUCj0menrYrVFga2APmxrkukUugYvNNry5OL15bxK19J+5il5wr
w7t3dnJh+OwXUZnGEM8iaQs4mthqSnc/mEQO2tUcnhc+wyjqzCRKF/uUWlwu
iRXZBmU27P2f19SFZKtKxWtWXeEubK20PErJ1MmZIfl+KlRn3/STfHgUFHJQ
8IXCHBzNiu2xfOOHgYs6dIXb5l5tHzwJ5QMxsdGMxE01moVEAfNXrD2nUmz7
6XiMHWMA8XnkKxktyKymfDA4wjy6od0PVOr+/tIo48DYItT6EyHP81moS6ot
Kap8LBcDP/tgPttupzAlzXggcCpaALV8U5TrL9IdRVePXcDV1v5txZrNnC4v
hnA5QM9mmLOLizmgMpOjdpLkGQ4iYVuL4rrZPgp3BW3qrLaUpRR2VgPfs8Co
Z67RzP6pbK7q6UzRNTx5TitjCMABL0P9CXmqZaL9+hLNoi0FpqXWqU+4wSgr
hC0F6OM0mZIyyZHMYcJDMOkxwBgdz+p1GcOGuuQijC1XLZlNqCISItJ12cMj
AmhRx+jwjqlA4HTaXCt5R9gKe5UREOolueCs4GRyUsadTGG4+H8OajIq6YW8
Cqn2KByPr+U1RWShDyyr4PlUDntzYw5jcFLYM9nMKCmaac/dzpINSXKmzSRm
cSYogqu0h2RAxnjEJyF3gJ1A9d4/bjpy4ItYtrNC4tHQ/WGfOQD9+4ZGni/k
HoZeRn/fTGJyQDmgHsj+ZPnOIjs9cazaRYcN2PE4ZweBYeeXbJpfV9VndArY
eVRcubHMsWlMH4dasRF0ycsBt+fBm6cuz1tuD1xI83weAmJ1fO4AU3rEjwcO
O302SrbMue8LPTRlc2fePuXhJjxlexdP2R73p7yTdqZrpz60y0hzdVON9ukW
Ck3TXXNkSHfMEw3cKreLr9Pn/a0Lc+nvHkwlrFamYg8UNnXZNpUQtR+m0t2d
HRSIPRi6tFZhbtzBa5fhymb7Ov3ujgZB+HsLFmmb59PpuXcdXLqFB2FwpPbi
MCDymryaTi65oCB+wuwPi7z85zcx/2l8GONoSng0QqmFKsBQELlKSZg8/Tgq
Ksxo6aaqZopjLBSI5B71vwCJsKTJYnxv6I9YIuSP16XxDVLSjDMfUaqWfLFA
v4vdqOtuLyBVjFcV5kbM1rOi4szDIHRWaHjYXGfTz/HMVH4KySQ4FxPF31jP
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
mlhXuWxGwRpzrAeRSyyprKbb1DS4BhjWCA3LS+SDcFRcTjwMP4uxJPcUTuut
2EX72/qLPi3JlNX1VxgKC3OnSiUta536zVGUC/RDdLXKppiqnbMCk9kmy/PC
MUG3V7vD27+x2i6+b3P9ffWOj9uCA5nSoASZhjSceSYkTxYQAGW2XEsM9hK0
2jUXI86aWSWfXaSZ7lukVrGxmcOIZnidm2YLDRGfxmXbjsb8wm8gNAy5xXPj
8wcaI7w0rnwaYFJIsFb97W4xzDit5DYVZeIeyonSMRAbvqZt3F7jTCrK1+vx
hbDE2lBgH9KovFz3q8LYtDTZGGyonpQdI2ICwkc1/n6fPLBNix7ncZdX4A3H
P96kfI21zNUKlBBuZV0N6B6PsF3klsEXOQ+AvNBwfKuNYwZJZvtguzz9y3ap
MW4WRhyE8ZL6e1d+LjKuuFP2C8F3QUcjpn0F67lsacbzif1Aeb30ZIlod2F/
o080/DpSDW3TCfNNI8qXa59vavOMlzlkm6mnOQNanNxBADI9gQyYCAk64mgx
fjkzZqxSjgXdck7XUbbb8oQU9/BjKb5Cjsrqi/d3Uld8Q2jZpp/Su2ClNkP2
5WChGrXacp3MaeFsJW+aA9bv5PQgNiW2H+kqHfBo7/YHlmwT0rYnPEuuh8VI
4AQCvZbspjybYcz81qDjrJxPHMC6W2+jVXa1XHPXlfRHpEgGXmM7kQ/Q28yb
t9hueDsT10TYz5ldzZohZgMiE53tNrM0ysI6mJ9mbe2obbE8pw1eKkWMPo9u
2uaCNBmeZC/Zx2KsZhv6gmcv+cTUWZoHSHOH3G8kXIiVu0lXifCU+z55Zrxw
GYEw1TOAnuhGitWRR2G+l4id6L+EhJ1Ta3nmXDJ1bkeh7WaXqsJeibJXsHol
SFGFl21k1O7kBBLJsHI35HEQKCvhDdhOYQzfpKlSUXKa6tZUaoElhzVORdew
qvOX55Vdz67GZ6LU3oW35UWV5w+zAa/H2BNxeLZA+7LTiYoEaUiKvVNSRi6G
M+1CpAWethM2V24Fqm51JxLgieaiYE1Vt6mCs0yUPHODvwngcaMICp4MqY8I
PNgioalyAkHi9Hp+yhvRGtahaUSmLY5KjweCy1wi8jmMekUaKBYl6uJiHcGM
M5Whntdien+o3ESHACfCqopcB/KUQ+ehGjXVSbpsT/quFm/WaArS1UK1MtW9
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
a06G4eza+Wgwg1H0fwG9DMfjcUwCAA==

-->

</rfc>
