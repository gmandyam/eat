<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="02"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer. <xref target="RFC7252" format="default"/>
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: $$manifest-body-json .feature "J" /
                    $$manifest-body-cbor .feature "C"
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-json /= base64-url-text

base64-url-text = text

]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
See the discussion above in the manifests claim.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: $$swevidence-body-json .feature "J" /
                    $$swevidence-body-cbor .feature "C"
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="nested-token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
              <t>The following two sections describe how to encode and decode a nested token.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string.
The text string MUST contain a JSON-encoded array of two items.
The first item is a string identifying the type of the token.
The second item is the JSON-encoded token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"UJCS":  </dt>
                  <dd>
                    <t>The second item MUST be a UJCS-Message as defined in this document.</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>The definition of additional types requires a standards action.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two in the same format as described in the section above.</t>
                <t>A CBOR-encoded token nested inside a JSON-encoded MUST use the same array of two, but with the type as follows:</t>
                <dl>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                  </dd>
                </dl>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
          <section anchor="cddl-for-submods" numbered="true" toc="default">
            <name>CDDL for submods</name>
            <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (odometer-label => uint)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: $$manifest-body-json .feature "J" /
                    $$manifest-body-cbor .feature "C"
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-json /= base64-url-text

base64-url-text = text


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: $$swevidence-body-json .feature "J" /
                    $$swevidence-body-cbor .feature "C"
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 256
sueids-label = 257
oemid-label = 258
hardware-model-label = 259
hardware-version-label = 260
secure-boot-label = 262
debug-status-label = 263
location-label = 264
profile-label = 265
submods-label = 266


security-level-label = <TBD>
uptime-label = <TBD>
boot-seed-label = <TB>
odometer-label = <TBD>
intended-use-label = <TBD>
dloas-label = <TBD>
sw-name-label = <TBD>
sw-version-label = <TBD>
manifests-label = <TBD>
swevidence-label = <TBD>
swresults-label = <TBD>


]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

nonce-label /= "nonce"

ueid-label /= "ueid"
sueids-label /= "sueids"
oemid-label /= "oemid"
hardware-model-label /= "hwmodel"
hardware-version-label /= "hwversion"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
profile-label /= "eat-profile"
uptime-label /= "uptime"
boot-seed-label /= "bootseed"
odometer-label /= "odometer"
intended-use-label /= "intuse"
dloas-label /= "dloas"
sw-name-label /= "swname"
sw-version-label /= "swversion"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
swresults-label /= "swresults"
submods-label /= "submods"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [700, / CoAP Content tag for CoSWID /
                                h'a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02' ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ [ 900,
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' ]
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11-1" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAD9OcGIAA+y9a3PbWJYg+B2/AqGs2LSqSMp6+Nmb3aOUlFly2ZbHktvd
W1uRAZKQhDIJsAFQMtvj/u1z3vdcAJRdVTMRGxtT3ZEWgYv7PPe8H+PxOGna
rJz/li2qMn+ZtvU6T4pVTX817cHjxy8eHySzrH2ZNu08SebVrMyW0HBeZ9ft
uMjb63Gdtc04z9rxImvzpk2S+5uX6fvjq8v0Y1V/Ksqb9Ne6Wq+SH9JZVTZ5
2aybl+mPm7z5ER416+myaJqiKtvNCvo9P7v6JVkVL5M0bauZtqMf83zV3sKT
I/zdVHVb59dNaNFslvGDWbVcZbPWtVhPw7Oywkf19SyfN+1mkWuztmjxx9Vt
np6V8GOTHre4rKyFOaZX1ae8TB+dHV/tJtl0Wud3L1P4kWR1nsHkyzavy7xN
Pt3DfhU3JS4+c5/PplUNi57DRr1MDx7vH473HyfZur2t6pfJOC1KmP7rSfp6
Xc6ni2yewwx5u19n6zovZ3n0qqphoy/z2brGacKMq3qTvn59Aq/yZVYsXqaL
m8V/a6RBS+8nsAM60q+T9A2c/SZb2ji/FnUxv81q94JG+e/rbAFfLtOrfHZb
VovqpsgbWO9sgvsKJ5HDnj559uxJ+qaq89tq3eTpaV3c4TRnMDjMMyvT0yK/
qXDX8xvYjZfpSbYorqu6LDI6rnXZ1tDyw+Ux/FzdEkDu/GE/ff7kefr0yX76
DMBxJyxuyVP8b//RFpP/kPn55b2apBc/nlZldXO7Djv5Kq/z5SZ+8/1LPHj2
Iv0lq0s4x2p9c5u+r7K5LdG9oPXMcUM/7B+lz15fRgssizafp38C6JhXy7DW
PxwdpfsHTw7Sw6eH+89fhJX+tZrTZPtLTcqqXgJs3eV4Y97/cnKwv/9C/ny2
/8T+fLL/JPz5VP58/uLIGsCwocGz8Kc1eP74sX62f2A97D870j8PX2gPz5/u
W9tnR9rZ4Yvn4TMb7QUgGPwT/wf/fPz18vkR/26z+ga3fOe2bVfNy729PKvb
23FRXleT8iabLIvF3up2tTev7ssFHMMEfvzLdbHIf5pVVT0f3980z492uCu+
0x8v3r8+TX89uzg9uzo/SS///fLq7E26/+L50Sh9++vx5PLq7enk8ePDp7/t
Tx5PHv9Gk6EO9Iri32MGl7d0o7NF+mteNSv4kS3GeP8Xi+KGbuox/rNJH0HP
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
x0xSRIN6QMGDgg1wkegWQbSc2YUJZjrqxaN1ib7wBdKNbenhoWwyMTSP9t1h
4OIPnjxlhmeSwKWlg8SGGppnX4vumTge8kP6H+kVdvQzdiR/I0sMf8c5Pv4H
tHz8+fE+vHh//PYU2wo3l6X7B89H6f6LA0S1MJHxFM0GMKtqKdjUaREqNRpT
HgNznRcoTL2Vx4MhO32ipbGU/EUlo2eDMlIzUbTiekVKvMBkyiRQBcSzwp1S
yywd+1wZCDcIiZ/sLgo8XZQFAeScW7MuGdlSTN1tLSL3N7aEmcgpwKPEmDGC
WRTXeQfZhN0L1xvNBnioS7hYeuhwLLRSxh/UGbOtWZktNg35pKGrKQDL+JS8
NwB+9aAP4IQppcXZh3M9bPOaoBczSW3S8TMO7D6608PHLqCeHoyPAFrw36eP
EWDoryOJGpvT6TFHfPHhfIT/GR8+ZbJ/cn7qcYHjbLtTyTGohJ3Tl0Y5ASmO
ld8LuAnH59taXbd5GahMRpxDww5vCFtvjk80GxySaNoRuoTmUAQtaHEZels2
FdLFoN3nlU/SR8HZ4548zoxmcGyHyY0SemKpb5oQiWGNojmNgusHCb0YnkCY
QDxYefHoeRllMUEPtC9fLEmOg4FDhIE3Z+fxZT8azzH9ldtEplwWaghDPZc2
hE8wmZ0Ax0k159sPIo00idguogszVTeSVOXo5kg0e2xXm+Ym82cNY0KR7mEO
Aun7Ry5Uh5GlZEbAsX9sxObxiHIFoEr+8uT8vBeET43/KfyZHsrIpMLDjRoR
C/L48+Hh7oRUX7Rt3LlO0qyBprp9vb4txYq+JvPK5b++9TpUJfxR2kU+ny8v
0x+QHyBRqRm3TD0w1clPO3TmJxK8ibuOp9DsfPWkCadrHlssfNRooUGNCez8
7XqJXnDiWg9MR8mHWybeg9asIhiNiLZfVLGgzFDH/thBV6XZA5z7llieCYu1
SHr1CeqSEsdfVqsMr3E4YxHmJaPDkqODN+rbX7Tss15jnhlzjJ+kXSO7eT+o
Cy2uEG5D0A3TLU8IJ9LEvNGtC6IdRxdKYANyOI+UyEg2ytkb6E6scHzUVb4s
5njErCLIGuEEWTjPMFkgRhAwb0CMCSKFO/TWuQYgWYgxDK9+NC3Rs5RwQBPs
4a0xNjBh7k6pLicU6GwUbwLC+jPeBGgNEn5oH1wJvC+ln0LEajUA9sucpnIV
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

-->

</rfc>
