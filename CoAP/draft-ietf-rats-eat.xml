<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="08"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252" format="default"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: $$manifest-body-json .feature "J" /
                    $$manifest-body-cbor .feature "C"
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

base64-url-text = text

]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID" format="default"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: $$swevidence-body-json .feature "J" /
                    $$swevidence-body-cbor .feature "C"
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="nested-token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
              <t>The following two sections describe how to encode and decode a nested token.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string.
The text string MUST contain a JSON-encoded array of two items.
The first item is a string identifying the type of the token.
The second item is the JSON-encoded token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"UJCS":  </dt>
                  <dd>
                    <t>The second item MUST be a UJCS-Message as defined in this document.</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>The definition of additional types requires a standards action.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two in the same format as described in the section above.</t>
                <t>A CBOR-encoded token nested inside a JSON-encoded MUST use the same array of two, but with the type as follows:</t>
                <dl>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                  </dd>
                </dl>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
          <section anchor="cddl-for-submods" numbered="true" toc="default">
            <name>CDDL for submods</name>
            <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (odometer-label => uint)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: $$manifest-body-json .feature "J" /
                    $$manifest-body-cbor .feature "C"
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

base64-url-text = text


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: $$swevidence-body-json .feature "J" /
                    $$swevidence-body-cbor .feature "C"
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 256
sueids-label = 257
oemid-label = 258
hardware-model-label = 259
hardware-version-label = 260
secure-boot-label = 262
debug-status-label = 263
location-label = 264
profile-label = 265
submods-label = 266


security-level-label = <TBD>
uptime-label = <TBD>
boot-seed-label = <TB>
odometer-label = <TBD>
intended-use-label = <TBD>
dloas-label = <TBD>
sw-name-label = <TBD>
sw-version-label = <TBD>
manifests-label = <TBD>
swevidence-label = <TBD>
swresults-label = <TBD>


]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

nonce-label /= "nonce"

ueid-label /= "ueid"
sueids-label /= "sueids"
oemid-label /= "oemid"
hardware-model-label /= "hwmodel"
hardware-version-label /= "hwversion"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
profile-label /= "eat-profile"
uptime-label /= "uptime"
boot-seed-label /= "bootseed"
odometer-label /= "odometer"
intended-use-label /= "intuse"
dloas-label /= "dloas"
sw-name-label /= "swname"
sw-version-label /= "swversion"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
swresults-label /= "swresults"
submods-label /= "submods"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11-1" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11-2" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIANf3d2IAA+y9a3PbWJYg+B2/AqHs2LSqSMp6+NmR06uUlFnKti2PJbd7
tqIiAyJBCWUSYAOgZLbH/dv3vO+5ACirqmYiNjamuiMtAhf3ee55P8bjcdK0
WTn7PVtUZf46bet1nhSrmv5q2oOnT189PUimWfs6bdpZksyqaZktoeGszubt
uMjb+bjO2macZ+14kbV50ybJ/c3r9MPx1WX6qao/F+VN+mtdrVfJD+m0Kpu8
bNbN6/THTd78CI+a9fWyaJqiKtvNCvo9P7v6JVkVr5M0bauptqMfs3zV3sKT
I/zdVHVb5/MmtGg2y/jBtFqusmnrWqyvw7Oywkf1fJrPmnazyLVZW7T44+o2
T89K+LFJj1tcVtbCHNOr6nNepk/Ojq92k+z6us7vXqfwI8nqPIPJl21el3mb
fL6H/SpuSlx85j6fXlc1LHoGG/U6PXi6fzjef5pk6/a2ql8n47QoYfpvJumb
dTm7XmSzHGbI2/0mW9d5Oc2jV1UNG32ZT9c1ThNmXNWb9M2bE3iVL7Ni8Tpd
3Cz+70YatPR+AjugI/06Sd/C2W+ypY3za1EXs9usdi9olP++zhbw5TK9yqe3
ZbWoboq8gfVOJ7ivcBI57OmzFy+epW+rOr+t1k2entbFHU5zCoPDPLMyPS3y
mwp3Pb+B3XidnmSLYl7VZZHRca3LtoaWHy+P4efqlgBy54/76ctnL9Pnz/bT
FwCOO2FxS57i//0fbTH5D5mfX95vk/Tix9OqrG5u12Enf8vrfLmJ3zx+iQcv
XqW/ZHUJ51itb27TD1U2syW6F7SeGW7ox/2j9MWby2iBZdHms/RfATpm1TKs
9Y9HR+n+wbOD9PD54f7LV2Glf61mNNn+UpOyqpcAW3c53pgPv5wc7O+/kj9f
7D+zP5/tPwt/Ppc/X746sgYwbGjwIvxpDV4+faqf7R9YD/svjvTPw1faw8vn
+9b2xZF2dvjqZfjMRnsFCAb/xP/BP59+vXx5xL/brL7BLd+5bdtV83pvL8/q
9nZclPNqUt5kk2Wx2FvdrvZm1X25gGOYwI9/mReL/KdpVdWz8f1N8/Joh7vi
O/3p4sOb0/TXs4vTs6vzk/Tyf1xenb1N91+9PBql7349nlxevTudPH16+Pz3
/cnTydPfaTLUgV5R/HvM4PKObnS2SH/Nq2YFP7LFGO//YlHc0E09xn826RPo
eZc+tFt/NH76Yvz0ZQJPz4/fHU9OPl1NThZZsWzilePCYd339/eTIiuzCYy7
lzWIV5Z52TZ70/vWL+/k54sP6af8WpEUdLubcr9+EalfBY7vJjfPFk1u8/qt
M69oYs1DM/urzEyn9tvlxTs/td86U4vn1ptcd3YfT04uJ6dIgaDR+HQSyNB6
Om2wxdUt3Ndf37+fnL89O+/vKk5+BRQkW0wOb1Yrmv8sbz631WpZzdaLvNm7
XOXTYl5M6Zg7P0/zFu5lM8ma1Zd/afyb89lPLw5e+VM5rGcAImVeMwV4D0AM
P5rbYpW+r6u/5tP2nxnjQA+LNBqG6WZ6Ahg1fZe390BNU8B50LxeFgB6zT+n
79bL67wGRDJKs9mszuEMkORAo2IGJ2FdbYPiQ9ijGDhfpbh/v5yfXkyOP1yc
vfZrwafpMfSCXUPHVZ0eLxbVPSCzD0Dj6mKKeO1iRYuFeZyVd0VdMUykb4qm
HTyIeTGrMrg2GdwaOgnc0YYej5V4jev8P9YFYG4CL3qV+XmMM54HtNN5jCud
xzh38xgvYB7ju/3JwXg+Gx88hSXvPz2Y3LbLxbZNQl6Aly6zdDv2rrrL8QhS
7Al37uz43Xj/cBjk8L7cNPu8SGS7snrW7F1nNdKKBhBcOV6vpn7HmaNQVHNc
w3IXuZw6TA8G2/v4/iTVLrat4NfL/c4p41RPqstP56fuCjXZdDmeVs19McP3
cJDl+elJVZYApQiFw6uCfS6L2QT4Hjk5fgAd0Yfwb52P939/GvZYFsf9pzIA
wzlgXqDe8AlcTwaivIY/srTJ23R/aONfEkodwnDz9WLBRP/dBPiPz8VyXWe9
d8Am/Fxns0W+6b16O0l/A8rc9F78PElnefo2n+UAV/3XJxNkg9piCStKiK6d
vrk4Ht69m0V1nS1WwDsDJ7Qk0Lhf4d61AK176xWStmYPlvhsb/9g79f3J7+f
FjcFYK43OTCW9cX8eLWqq7ts8fsdUq3VbO63WNqm3Dit5qk2H4bh/WcJnvz7
s3dbkGZeBowPP/be5yX0uBA0M1llN7kf/z3wgDAGstJ5vaqLxoD3CYyxC2jj
P9YkMyjNQQ553GY3TYR48BXTtyt4BV/dwCWuN1sv2TC51K7DX5MvBJPwP2Qr
Yk7qaP9AmZSjo/Cn45n2D4zNOTp6bgzNITTAv0ECmhzX01tg9qYtsO9dWpW5
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
AJTBpUcNjyQ5KqtLx/6NZEjVQ3udHg0M2U+O6kd0GVJ7j3oj2hsdceehc+av
seJH2Ff4tfj+PZvl1+ubMUoC62bgTKLX/kSiF9ExbPnEDiEvUecLW/pU0qUU
jTzYjx+MKWqKVmUnY+9AXFhmJdkr7HDsJaf4AhwUNzvqTa9/YDI7237ts/fA
za7/zg3bfzk4u4eOVw2y4XzsiVzh6LeRCKyeQIZdJIfE/vM+oVv94It/Cbbg
/husEJVNN9u/GW9vgiFCyHX2XoB4BUxa73GoN6L0H3kjG/CG5rdG+gYkLywz
3cf67fp7J3ELTQ/olT7YScJK00N8pb/hjS0jPaI38jt841aaPvMfj0NbW3L6
HFvIz51EVpy+wKf0Yydxy01f4nN7AGPiYtNXNMrNg1hgvaKNCowJ85DbEQDh
iybPHR0n+vYQSalmFcWrPnqY/5ME+29Ngv2drZwtqsyh6j8DJ4iPhLElFGc/
lZTjk991TrA8rNMRXqzgxqCw/zt1+poV1HLXqIHLe+7bPEjzH64N8p01mkdA
+Dw8UhCIn+Ba/2itxmyA/ktoJU9sS6ikSNnSt6+RN0AEk0av+IvXIBdaJ9fV
bEPH76TA3/T8uv/rfkeJtcJ3Jzu8gQON9ozTpJ9rDEq+wWxdVXNfzHrf0ITw
G7LJgGAJ7CQJm4/p/PLj+dXvZyXwLxXs66O7btZFO55RuqniLh9LcqPxLEfb
E4jziBv3XyVJ50OUeOn773GL9+r+4VlXe2Y8X/yIgcA9NDDoPfv7AMF18zeC
QvfLLcAw2Oy74DA4raFTe0hWEK+4GLXo4yA3e3fXsbwcQMBRsxIITb0uDRtH
L1FDxjqqDFMDHww0mVNpL0PRzEFprHrA1hiImcWvno2SLXPuI/GhKRtu3j7l
4SY8ZXsXTzlg/N6UkQBEHbFrFt6xgV2GT21TMRE3yyayhZ/zukRcfajUrriD
Od24HeMY9/GiuG5oq9wuvk6f97cuzKW/ezCVsFqZij3gqThKqFMJElCYSnd3
dvD6ejB0EmqYG3fw2gmrNtvX6Xd3NFzb7y1YcAPPp9Nz7zo40fVBGBwpvQ0D
oqzPq0HM8P/L8rb/J82mS7Ppi/3GroZzSVzr85NSIls+r5/QHRbJgXu2l35U
IhGe0rKSpN8aweHT1VhevOXoi4F2AG7olfWohqdnP3fbJQNz0rHtlTYeaqvj
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
XHJYTGSMR/8X3JA+eGZOAgA=

-->

</rfc>
