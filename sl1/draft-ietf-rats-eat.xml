<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.0.4) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.6 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="16"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship-between-attestation-evidence-and-attestation-results">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>Many claims in Attestation Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the entity by the Verifier just through normal verification of the Attester's signature.
The UEID, <xref target="UEID"/>, and Location, <xref target="location"/>, are examples of claims that may be passed through.</t>
          <t>Some claims in Attestation Evidence will be verified by the Verifier by comparison to Reference Values.
These claims will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence"/>, compares it to Reference Values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults"/>.</t>
          <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="token-id-claim-cti-and-jti">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the Relying Party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="UEID">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
        <t>The UEID is permanent. It MUST never change for a given entity.</t>
        <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
        <table anchor="ueid-types-table">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
            </tr>
          </tbody>
        </table>
        <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the Relying Party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Entity manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa. The essential requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
      </section>
      <section anchor="semi-permanent-ueids-sueids">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
        <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
      </section>
      <section anchor="oemid">
        <name>Hardware OEM Identification (oemid)</name>
        <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
        <section anchor="random-number-based-oemid">
          <name>Random Number Based OEMID</name>
          <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
          <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
          <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
          <t>In JSON format tokens this MUST be base64url encoded.</t>
        </section>
        <section anchor="ieee-based-oemid">
          <name>IEEE Based OEMID</name>
          <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
          <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
          <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
          <t>This format is always 3 bytes in size in CBOR.</t>
          <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
        </section>
        <section anchor="iana-private-enterprise-number-based-oemid">
          <name>IANA Private Enterprise Number Based OEMID</name>
          <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
          <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
          <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
          <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-model-claim-hardware-model">
        <name>Hardware Model Claim (hardware-model)</name>
        <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
        <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
        <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
        <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
        <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
        <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
        <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hw-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
      </section>
      <section anchor="software-name-claim">
        <name>Software Name Claim</name>
        <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
      </section>
      <section anchor="software-version-claim">
        <name>Software Version Claim</name>
        <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
        <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
        <dl>
          <dt>1 - Unrestricted:</dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>2 - Restricted:</dt>
          <dd>
            <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
          </dd>
          <dt>3 - Secure-Restricted:</dt>
          <dd>
            <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
          </dd>
          <dt>4 - Hardware:</dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
        <t>This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140"/> 
or those based on Common Criteria <xref target="Common.Criteria"/>.
See <xref target="dloas"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
      </section>
      <section anchor="secure-boot-claim-secure-boot">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
      </section>
      <section anchor="debug-status-claim-debug-status">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
        </section>
        <section anchor="disabled-permanently">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision SHOULD NOT be used.
They usually do not provide enough precision for a geographic location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
      </section>
      <section anchor="the-uptime-claim-uptime">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
        <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>1 -- Generic:</dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>2-- Registration:</dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>3 -- Provisioning:</dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
          </dd>
          <dt>4 -- Certificate Issuance</dt>
          <dd>
            <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>5 -- Proof-of-Possession:</dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
      </section>
      <section anchor="profile-claim">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090"/> and the URI according to <xref target="RFC8949"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
        <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
      </section>
      <section anchor="dloas">
        <name>The DLOA (Digital Letter or Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
        <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
        <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
        <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
        <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
        <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
      </section>
      <section anchor="swevidence">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
      </section>
      <section anchor="swresults">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
        <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported. TODO: defined objective</t>
        <section anchor="scheme">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>1 -- all:</dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>2 -- firmware:</dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>3 -- kernel:</dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>4 -- privileged:</dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>5 -- system-libs:</dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>6 -- partial:</dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
          <dl>
            <dt>1 -- verification-not-run:</dt>
            <dd>
              <t>Indicates that no attempt was made to run the verification</t>
            </dd>
            <dt>2 -- verification-indeterminite:</dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>3 -- verification-failed:</dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
            </dd>
            <dt>4 -- fully-verified:</dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
            </dd>
            <dt>5 -- partially-verified:</dt>
            <dd>
              <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
        </section>
      </section>
      <section anchor="submods">
        <name>Submodules (submods)</name>
        <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
        <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
        <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
        <section anchor="submodule-types">
          <name>Submodule Types</name>
          <t>The following sections define the three types of submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
            <li>The digest of a detached Claims-Set</li>
          </ul>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
            <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
            <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
          </section>
          <section anchor="nested-token">
            <name>Nested Token</name>
            <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
            <t>The following two sections describe how to encode and decode a nested token.</t>
            <section anchor="surrounding-eat-is-cbor-encoded">
              <name>Surrounding EAT is CBOR-Encoded</name>
              <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
              <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
              <t>If the nested token is JSON-encoded, then the data item MUST be a text string.
The text string MUST contain a JSON-encoded array of two items.
The first item is a string identifying the type of the token.
The second item is the JSON-encoded token.</t>
              <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
              <dl>
                <dt>"JWT":</dt>
                <dd>
                  <t>The second item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                </dd>
                <dt>"UJCS":</dt>
                <dd>
                  <t>The second item MUST be a UJCS-Message as defined in this document.</t>
                </dd>
                <dt>"DEB":</dt>
                <dd>
                  <t>The second item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                </dd>
              </dl>
              <t>The definition of additional types requires a standards action.</t>
              <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
              <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
            </section>
            <section anchor="surrounding-eat-is-json-encoded">
              <name>Surrounding EAT is JSON-Encoded</name>
              <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
              <t>The nested token MUST be an array of two in the same format as described in the section above.</t>
              <t>A CBOR-encoded token nested inside a JSON-encoded MUST use the same array of two, but with the type as follows:</t>
              <dl>
                <dt>"CBOR":</dt>
                <dd>
                  <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                </dd>
              </dl>
              <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
              <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
            </section>
          </section>
          <section anchor="detached-submodule-digest">
            <name>Detached Submodule Digest</name>
            <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
            <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
            <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
            <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
            <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
            <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
            <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
            <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
            <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
          </section>
        </section>
        <section anchor="no-inheritance">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="cddl-for-submods">
          <name>CDDL for submods</name>
          <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="UJCS">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hw-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 11
oemid-label = 13
security-level-label = 14
secure-boot-label = 15
debug-status-label = 16
location-label = 17
profile-label = 18
submods-label = 20


sueids-label = <TBD25>
hw-version-label = <TBD26>
sw-name-label = <TBD29>
sw-version-label = <TBD30>
uptime-label = <TBD31>
boot-seed-label = <TBD32>
intended-use-label = <TBD33>
dloas-label = <TBD34>
manifests-label = <TBD35>
swevidence-label = <TBD36>
swresults-label = <TBD37>
hardware-model-label = <TBD39>

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

ueid-label /= "ueid"
sueids-label /= "sueids"
nonce-label /= "nonce"
oemid-label /= "oemid"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
uptime-label /= "uptime"
profile-label /= "eat-profile"
intended-use-label /= "intuse"
boot-seed-label /= "bootseed"
submods-label /= "submods"
timestamp /= "timestamp"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
dloas-label /= "dloas"
swresults-label /= "swresults"
sw-name-label /= "swname"
sw-version-label /= "swversion"
hardware-model-label /= "hwmodel"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / manfests /        35: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device">
        <name>Submodules for Board and Device</name>
        <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /       13: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /     39: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /      26: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /         29: "Acme OS",
    / SW Version /      30: ["3.5.5", 1],
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level /  14: 3, / secure restricted OS /
    / submods / 20: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   13: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 39: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  26: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   13: 61234, / PEN Format OEM ID / 
            / HW Version /  26: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e0b500198f50a4ff6c058
      61c8860d13a638ea0d19faf20e040ff51003181a8263332e
      310114a163544545822f5820e5cf95fd24fab71446742dd5
      8d43dae178e55fe2b94291a9291082ffc2635a0b',
      
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e0e030ff51002182381
                 585dda53574944a60064336132340c01016b4163
                 6d6520544545204f530d65332e312e340282a218
                 1f6b41636d6520544545204f53182101a2181f6b
                 41636d6520544545204f5318210206a111a11818
                 6e61636d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
        <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ], / multipartnumeric /
    / submods/          20: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation">
        <name>Key / Key Store Attestation</name>
        <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / debug-status /    16: 2, / disabled-since-boot /
    / secure-boot /     15: true,
    / manifests /       35: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        20 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level /  14: 1, / unrestricted /
           / secure-boot /     15: true,
           / manifests /       35: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / OEMID /           13: h'8945ad', / IEEE CID based /
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /          20: {
                            "OS" : {
        / security-level /      14: 2, / restricted /
        / secure-boot /         15: true,
        / debug-status /        16: 2, / disabled-since-boot /
        / swevidence /          36: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPjVpYg+h2/AiFXjFNVJLXm2m33yJLskju3SSnL3a+i
wgGRIIVKEmADYCrZOa7fPme/5wKgMqurJ+LFi1fd4RSBi7uee/ZlPB4nTZuV
s1+zZVXmL9K23uRJsa7pr6Y9Pjx8fnicTLP2Rdq0sySZVdMyW0HDWZ3N23GR
t/NxnbXNOM/a8TJr86ZNkvvFi/Td2c11+ktVfyjKRfpTXW3WyTfptCqbvGw2
zYv0223efAuPms3tqmiaoirb7Rr6vbq8+TFZFy+SNG2rqbajH7N83d7Bk1P8
3VR1W+fzJrRotqv4wbRarbNp61psbsOzssJH9Xyaz5p2u8y1WVu0+OPmLk8v
S/ixTc9aXFbWwhzTm+pDXqaPLs9u9pPs9rbOP75I4UeS1XkGky/bvC7zNvlw
D/tVLEpcfOY+n95WNSx6Bhv1Ij0+PDoZHx0m2aa9q+oXyTgtSpj+y0n6clPO
bpfZLIcZ8na/zDZ1Xk7z6FVVw0Zf59NNjdOEGVf1Nn358hxe5ausWL5Il4vl
/2ykQUvvJ7ADOtJPk/QVnP02W9k4PxV1MbvLaveCRvlfm2wJX67Sm3x6V1bL
alHkDax3OsF9hZPIYU8fP336OH1V1fldtWny9KIuPuI0pzA4zDMr04siX1S4
6/kCduNFep4ti3lVl0VGx7Up2xpavr8+g5/rOwLIvT8cpc8eP0ufPD5KnwI4
7oXFrXiK//M/2mLyHzI/v7yfJ+mbby+qslrcbcJO/pzX+Wobv/n6JR4/fZ7+
mNUlnGO1Wdyl76psZkt0L2g9M9zQ90en6dOX19ECy6LNZ+m/AnTMqlVY6x9O
T9Oj48fH6cmTk6Nnz8NK/1rNaLL9pSZlVa8Atj7meGPe/Xh+fHT0XP58evTY
/nx89Dj8+UT+fPb81DV4Gv60p88OD7Xt0bF9dvT0VP88eX6sfz45srZPT7Wz
k+fPwmePte1zwCr4J/4P/vnlp+tnp/y7zeoF7vPeXduumxcHB3lWt3fjopxX
k3KRTVbF8mB9tz6YVfflEvZ+Aj/+ZV4s8++mVVXPxveL5tnpHnfFF/mXN+9e
XqQ/Xb65uLy5Ok+v//365vJVevT82ekoff3T2eT65vXF5PDw5MmvR5PDyeGv
NBnqQO8l/j1mGHlN1zhbpj/lVbOGH9lyjJd+uSwWdD3P8J9t+gh63qcP7aqf
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

-->

</rfc>
