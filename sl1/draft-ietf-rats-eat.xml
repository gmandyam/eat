<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.0.4) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.6 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="May" day="16"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="swresults">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>1 -- all:</dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>2 -- firmware:</dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>3 -- kernel:</dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>4 -- privileged:</dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>5 -- system-libs:</dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>6 -- partial:</dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>1 -- verification-not-run:</dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>2 -- verification-indeterminite:</dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>3 -- verification-failed:</dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>4 -- fully-verified:</dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>5 -- partially-verified:</dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >

]]></sourcecode>
          </section>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( swresults-label => [ + swresult-type ] )

swresult-type = [
    verification-system: tstr,
    objective:           verification-objective-type,
    result:              verification-result-type, 
    ? objective-name:    tstr
]

verification-result-type = verification-not-run /
                           verification-indeterminate /
                           verification-failed /
                           fully-verified /
                           partially-verified

verification-not-run       = JC< "verification-not-run",       1 >
verification-indeterminate = JC< "verification-indeterminate", 2 >
verification-failed        = JC< "verification-failed",        3 >
fully-verified             = JC< "fully-verified",             4 >
partially-verified         = JC< "partially-verified",         5 >

verification-objective-type = all /
                              firmware /
                              kernel /
                              privileged / 
                              system-libs /
                              partial 

all         = JC< "all",         1 >
firmware    = JC< "firmware",    2 >
kernel      = JC< "kernel",      3 >
privileged  = JC< "privilege",   4 >
system-libs = JC< "system-libs", 5 >
partial     = JC< "partial",     6 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "nonce",      10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwvers",     260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "profile",    265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
swresults-label        = JC< "swresults" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "nonce" :    "lI-IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "nonce":    "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "secure-restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; This produces erroneous diagnostic messages with cddl tool
; circa March 2022.
;JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; This doesn't produce erroneous error messages
JC<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"

; The nonce was added to JWT in the IANA registry after the publication of
; RFC 7519
; TODO: what about multiple nonces in JSON?
; TODO: add reference to IANA and OpenID (or such document that defines nonce)
$$Claims-Set-Claims //=
    (nonce-label => nonce-type / [ 2* nonce-type ])
nonce-type = text


; TODO: nonce-label for JSON should probably be here
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9+3PbVpYg/Dv+CpSSqljTJGU97NieTXoVSUkrY1teSx7P
fP11pSASotAmAQ4ASmZ7M3/7nvc9FwBldc9u1VZ9n6urIwIX93nueT/G43HS
tFk5+y1bVGX+Km3rdZ4Uq5r+atqDp09fPj1Ipln7Km3aWZLMqmmZLaHhrM5u
2nGRtzfjOmubcZ6140XW5k2bJPfzV+n746vL9GNVfyrKefpLXa1XyTfptCqb
vGzWzav0u03efAePmvX1smiaoirbzQr6PT+7+jlZFa+SNG2rqbajH7N81d7C
kyP83VR1W+c3TWjRbJbxg2m1XGXT1rVYX4dnZYWP6ptpPmvazSLXZm3R4o+r
2zw9K+HHJj1ucVlZC3NMr6pPeZk+OTu+2k2y6+s6v3uVwo8kq/MMJl+2eV3m
bfLpHvarmJe4+Mx9Pr2ualj0DDbqVXrwdP9wvP80ydbtbVW/SsZpUcL0X0/S
1+tydr3IZjnMkLf7dbau83KaR6+qGjb6Mp+ua5wmzLiqN+nr1yfwKl9mxeJV
upgv/nsjDVp6P4Ed0JF+maRv4Ow32dLG+aWoi9ltVrsXNMr/WGcL+HKZXuXT
27JaVPMib2C90wnuK5xEDnv67Pvvn6Vvqjq/rdZNnp7WxR1OcwqDwzyzMj0t
8nmFu57PYTdepSfZorip6rLI6LjWZVtDyw+Xx/BzdUsAufOH/fTFsxfp82f7
6fcAjjthcUue4n//j7aY/IfMzy/v10l68d1pVVbz23XYyV/zOl9u4jePX+LB
9y/Tn7O6hHOs1vPb9H2VzWyJ7gWtZ4Yb+mH/KP3+9WW0wLJo81n6LwAds2oZ
1vqHo6N0/+DZQXr4/HD/xcuw0r9WM5psf6lJWdVLgK27HG/M+59PDvb3X8qf
3+8/sz+f7T8Lfz6XP1+8PLIGMGxo8H340xq8ePpUP9s/sB72vz/SPw9fag8v
nu9b2++PtLPDly/CZzbaS0Aw+Cf+g/98/OXyxRH/brN6jlu+c9u2q+bV3l6e
1e3tuChvqkk5zybLYrG3ul3tzar7cgHHMIEff7wpFvkP06qqZ+P7efPiaIe7
4jv98eL969P0l7OL07Or85P08t8vr87epPsvXxyN0re/HE8ur96eTp4+PXz+
2/7k6eTpbzQZ6kCvKP49ZnB5Szc6W6S/5FWzgh/ZYoz3f7Eo5nRTj/E/m/QJ
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
ujoFPCal5WOeG4sHkaZKsjNEgG2d8+1YbMa8a25+0C+v8mCMBbnnEnJblVHh
aHPdVWgnjQJxEGV+n2KeMTRKCDSFyQA5sMJ8cUqATqLD2o1siQ5TIREewJq8
FaV5FNQa9sayIrIWRGBKcx6TvnHdRuNNJJT0Hc4USRa5bbjVa3Emfa/8S4Aa
qYmBPB3Pj9PGEbAneuiwnl496kjBb1W/MKYG7gBja6yZIVfNwIfTbbD2LVMe
RcBF80kYFFHNs06hixW5VmvdRFn0ROJXTyxJLWCSBkRsVLS8co+pXMm6xYIa
tEFPTo6/a3bTaFbhMBobjVitQnqMcyPHRVJhW1ZZUTfpbdVIWm0nZwLnUyL+
irBXB6Bcz6aswLmhqu3JyeX73YlEzcKpg5gA/3tXNZJqGw//uIOoOju+BZTx
zZRCZUtSLiL0c+8r6z198q56t+sv4SR9U3Gy0WnR5MhPZCm0YW0je7ek7h4k
rtyl2OYCh9nzQJa4PjKn0GzChWlyKmCMNsswvYQYIzgAvX6fCvZS8UuWjS9z
YBPyBhkDmAgNRNQ+eRD2MG1x4IOY/H/KN0aEePF+fx4V0+vRRKCZ0VMtI9V/
+AOTU8Dqw0GCEX7aEnTor9K2NtOm3jLCqloliU7Cx+/JMyvDnWIdbjcbq8Ad
nkkMajQhiysMz6RCE87J/kkzeNatHQET7DWDZ77ZM19+CZgQdRj4l3zTUFVH
vbSmSO74fiAYaML5LA2lacW5Qu5xFUoiorN7Y6ZSyQAR7F5e8+UdVUKK2ZtK
CrA2TknwSVQopEu+3lj9+oGMpJ+CtsWcUWKEcF5dKVqvyusqY58+NUW4XGI/
n59e2PNQ3NHvA1upm/gusttSmE6nWIPGA9C9xuS+I50O8rad3ElX3hXPcTW3
1b1ZdIPWGosGu1SlqqJRgQW2r6jWjW0fp5ixqACJd7MoQhciac/cpwlCEal/
uobRxmXBxXHRteM3aK2NyHnyxT4maKU1f5KOeibLbkfU4GN+nXY7+/7Z/vdS
Vavh8liaxFaiDDgqVkoRE2iiYEIfFDWtSmwarNlWNR16aKjxlXgCLb1tOS/7
I2rd7c/C6rSVTUJjmWwCXikK8zg/fnusqK3I1WtHBAsqJFbgGIWVRIs29Puj
79HiyBvy4ulT2F1XlVLy1Z23QRrAaYAghjeeqF5CUZZN5VOMhrt4vXGStM6b
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
CRCXb3zSrOy6uhOsLKPG/nGt+d0PwOsU4XUq8Kp7idzQ+CeKYCR0FVEUpuJE
8PsHRzmaWEkt4FTn4+AKFGOKSdoz11EQb1eHUMQlzPsbRqFr9zni7P4oaUwx
oop1LERYZY/ZXYYiu/DBA8ySuQVhkvZwp7jETIdd4hAQfUIxtv0h0cs1HhWf
rktLB0zqZ80XgtnBEJzYTyrXHCdpdW1SiFt3KGnvHhY2zyCsSrGjkbjk0FsG
lYbjcNIL1umKmyt7jVCJPTTnsoGDTiRObXKfbcKaBpkqFk1tsUT1LUkFU11i
ReGA29uNM43ExyL9oNhB3occaywiotByrhXpmNV1i34f13RUpjf2uabCDWO2
pwesQdHAoE6WmjlliRTvYaya0CV+qEAmFhoX0i2dI+jPVVegwu0XNy2FXA6T
0w76Z/GlcQWzCaUPywhxVZqhAVyRGjYnIaiyhhCATnQynSm4b/rVEEJNcReN
FszjDlgVmszDNxi8BJUxE0N8t1TsItZPap49IuUfSeCqSigwmVyZh6x+zi2X
3qoW53nKqqcuz65Ga+EgRNh3HARiWHWZboKPtNWGIlQh7Lp4LiprPM/WErzB
q4syMhALqLGrXubhO4OWfq0uZGFG0TB0d1BTIM5C5Ca1rGaaAOIejmXBHhfI
UDi7v7iNKCNXAvSpq388hORW7roOUA/Qe7aI+qGVhICVsCZehmWwEAdnJpvs
KezdSVy+1tgZuhOeGzur/x55nE/FZ5Q2Zlu81HDcEhlSq5a5FCn2xgy2+s2f
CuPrBwwOHhLJy8FllYiZZGMM8qSGMgQWTlIucCBrUOgRQrhhgwdnba6W15Tl
gHy44nKdlNdOEZsUCxTDKWnMpIVCk3L1Ye5oHfhMrJYE0sji/J3qIlVzhGd6
vMBcmLM8zgKBb0iAMXv4iKciMKCJMWyyLnFU/F245zYS0HWM2EHMsmLizif3
WoRuPTV0u+ynio7kc/IuICMnSCcjIrfwJ9Jb4zgrKWnOajfbIQ1Vnc1qcrMV
x/EPrHtFBBMSQyNwxVdBvrZgHZ/IUULuGQyDYxB2NpKOiVHHQ8FAAKfWCR76
5zdDz0fubof7rioVOqCYoLIJjZ1o9NJixUuX/cowkrJNYcqyOc5E2LVH4y6r
W3HHoNYpxaY7x1TLvEgxQUiUSYcvoOpyoxyp5g2/SiPTuxNO3mQrmtMxZS84
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

-->

</rfc>
