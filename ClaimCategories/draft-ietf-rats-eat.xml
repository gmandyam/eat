<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="April" day="07"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>Entity manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa. The essential requirement on the manufacturer is
that UEIDs be universally unique.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
        </section>
        <section anchor="dloas" numbered="true" toc="default">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
          <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
          <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
          <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
          <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="nested-token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
              <t>The following two sections describe how to encode and decode a nested token.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string.
The text string MUST contain a JSON-encoded array of two items.
The first item is a string identifying the type of the token.
The second item is the JSON-encoded token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"UJCS":  </dt>
                  <dd>
                    <t>The second item MUST be a UJCS-Message as defined in this document.</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>The definition of additional types requires a standards action.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two in the same format as described in the section above.</t>
                <t>A CBOR-encoded token nested inside a JSON-encoded MUST use the same array of two, but with the type as follows:</t>
                <dl>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                  </dd>
                </dl>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
          <section anchor="cddl-for-submods" numbered="true" toc="default">
            <name>CDDL for submods</name>
            <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (odometer-label => uint)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 256
sueids-label = 257
oemid-label = 258
hardware-model-label = 259
hardware-version-label = 260
secure-boot-label = 262
debug-status-label = 263
location-label = 264
profile-label = 265
submods-label = 266


security-level-label = <TBD>
uptime-label = <TBD>
boot-seed-label = <TB>
odometer-label = <TBD>
intended-use-label = <TBD>
dloas-label = <TBD>
sw-name-label = <TBD>
sw-version-label = <TBD>
manifests-label = <TBD>
swevidence-label = <TBD>
swresults-label = <TBD>


]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

nonce-label /= "nonce"

ueid-label /= "ueid"
sueids-label /= "sueids"
oemid-label /= "oemid"
hardware-model-label /= "hwmodel"
hardware-version-label /= "hwversion"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
profile-label /= "eat-profile"
uptime-label /= "uptime"
boot-seed-label /= "bootseed"
odometer-label /= "odometer"
intended-use-label /= "intuse"
dloas-label /= "dloas"
sw-name-label /= "swname"
sw-version-label /= "swversion"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
swresults-label /= "swresults"
submods-label /= "submods"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11-1" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIALsaT2IAA+y9aXPbWJYg+h2/AqHseGlVkZQlee/J7lFKyixlextLbve8
iooMiAQplEmADYCSOR73b5+z33MBUFZ1zUS8eDHVHWkRuLjruWdfxuNx0rRZ
Ofs9W1Zl/ipt602eFOua/mrao8ePXz4+SqZZ+ypt2lmSzKppma2g4azO5u24
yNv5uM7aZpxn7XiZtXnTJsnd4lX64eTqMv1U1Z+LcpH+WlebdfJDOq3KJi+b
TfMq/XGbNz/Co2ZzvSqapqjKdruGfi/Or35J1sWrJE3baqrt6McsX7c38OQJ
/m6quq3zeRNaNNtV/GBardbZtHUtNtfhWVnho3o+zWdNu13m2qwtWvxxdZOn
5yX82KYnLS4ra2GO6VX1OS/TR+cnV/tJdn1d57evUviRZHWeweTLNq/LvE0+
38F+FYsSF5+5z6fXVQ2LnsFGvUqPHh8ejw8fJ9mmvanqV8k4LUqY/utJ+npT
zq6X2SyHGfJ2v842dV5O8+hVVcNGX+bTTY3ThBlX9TZ9/foUXuWrrFi+SpeL
5X9tpEFL7yewAzrSr5P0DZz9NlvZOL8WdTG7yWr3gkb5b5tsCV+u0qt8elNW
y2pR5A2sdzrBfYWTyGFPnz5//jR9U9X5TbVp8vSsLm5xmlMYHOaZlelZkS8q
3PV8AbvxKj3NlsW8qssio+PalG0NLT9ensDP9Q0B5N4fD9MXT1+kz54eps8B
HPfC4lY8xf/6720x+XeZn1/eb5P03Y9nVVktbjZhJ3/L63y1jd88fIlHz1+m
v2R1CedYbRY36Ycqm9kS3Qtazww39OPhk/T568togWXR5rP0XwA6ZtUqrPWP
T56kh0dPj9LjZ8eHL16Glf61mtFk+0tNyqpeAWzd5nhjPvxyenR4+FL+fH74
1P58evg0/PlM/nzx8olr8Dz8aU9fPH6sbQ+P7LPD50/0z+OXR/rns0Nr+/yJ
dnb88kX47Km2fQlYBf/E/8E/n369fPGEf7dZvcB93rtp23Xz6uAgz+r2ZlyU
82pSLrLJqlgerG/WB7PqrlzC3k/gxz/Pi2X+07Sq6tn4btG8eLLHXfFF/vTu
w+uz9Nfzd2fnVxen6eV/v7w6f5MevnzxZJS+/fVkcnn19mzy+PHxs98PJ48n
j3+nyVAHei/x7zHDyFu6xtky/TWvmjX8yJZjvPTLZbGg63mC/2zTR9DzPn1o
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
6E7nJZljR13h+aP+kEWEGXLfVxus6jR0IqkBBE6OUK8Lh6Fu73tg93Nv1m+C
XR73/aay/xVfu2cbdA/+rdsa/1S3tnG/Pz7SRhoN++P+YDQbT/oT3d4mR746
oO2K9pwpmfPOqXTkq8Nev9dLBwPshX3ZC498tfs1tsxzv2WOalxntT912+ax
r7rd9aitk3/u3T6PM7oPb5+8+xxdRrh9voDayAtHbj6qDN0+3/XaL3qP2n6D
Muq3z0eUcXD3fLCMe039gyF8P1nMrv7w74FHwMH/eshjRnrN3rtgvkr+gPj5
JJcTYF8z9SqTmcQvalgeuGbt0ETnjR4e3DjA4QBjWc7R9EGx+evc3moQSSVg
meHcCckpq02Ql4KPlY6V2GeOU4xVrlUOamz4sc74D63u2IKUyydw9vQ2NX5S
s6UNXY+/QKL8xMIDNRTQWh5UwHysbKo5Kh47cKcPnUq9YFy7z5Q9/cXPyhs4
4OR+UpjmXIPHfO2QxL/X6OoCmLN2uPtgaKT998rVqHf3IqhsmCx8UNlzekpo
scNzw7/N0xw7HaKoQhzjVW2oAhFE3FQ6VIoyJa92q6/p0ZpePdCz8ZG9qx9y
MOhhS8eDY3WF8HS4TjgcJ4fJ/rBaBJkx7JfS+0eWwicqqZNgWNYcxI0rx5cS
rtWjvdkllYnsnpGmw/SHnfmxughpy6NFcNTV6y1INyHzgf5dHqsLBfkzcvam
noEeF3ysfoLvD2iijvv4jVQb9kuwhnS0VjbuyRlep8+ncZN+0ufzuHFXzuOO
ViiHVPUh64XL8YD+XY5dYkz3WHWrm3Q6g8GsP5h2xpNep8unxR0qa9bvjefH
ODjQnP5s0J32ZovevJ/Oe4NJ0pv2et1hmswGw2PcPWhOtztbjhNSj9PecN6l
2gzG02lnKH1z9OiQlkpjQX0xpN/6/HsvHZOOP+o/qk868/5k1vV9Mu8OerNp
MkuOPokhJX8wm03mYxql7igZ9OfT6ZBEJdm6yVHmJv3MyFacDsdkJg9H09ls
vJjThF9OJ4/rExLgUMIXrFnTDJnTjOl1B9zM3rHTvr/oz3xvJKNkupgvlrP+
hAzO5NhpTzvrIB2k3XSSTkY96o7JvLeYzccdkqtHj86gn0y7fVq+i3Ta7/dn
6ejnHz0dvuMPpSyBbFMWyS6FzNQZiWt+1yJR2eJ9L0gxM1VGHvmKwT7tmKYR
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
TAIA

-->

</rfc>
