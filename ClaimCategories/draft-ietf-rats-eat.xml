<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="April" day="06"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no hard rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.
Multiple nonces are allowed to accommodate multistage verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
        <t>This defines the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce MUST be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. 
The nonce MUST be 64 bytes or less in length to limit the memory
a constrained implementation uses. 
The receiver of an EAT MUST be able to process a 64 byte nonce.
This size range is not set
for the already-registered JWT nonce, but it should follow
this size requirement when used in an EAT.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity" numbered="true" toc="default">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship" format="default"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID" numbered="true" toc="default">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table" align="center">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>Entity manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa. The essential requirement on the manufacturer is
that UEIDs be universally unique.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid" numbered="true" toc="default">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid" numbered="true" toc="default">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid" numbered="true" toc="default">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim" numbered="true" toc="default">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim" numbered="true" toc="default">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
          <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
          <dl>
            <dt>
1 - Unrestricted:  </dt>
            <dd>
              <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
            </dd>
            <dt>
2 - Restricted:  </dt>
            <dd>
              <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
            </dd>
            <dt>
3 - Secure-Restricted:  </dt>
            <dd>
              <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
            </dd>
            <dt>
4 - Hardware:  </dt>
            <dd>
              <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
          <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled" numbered="true" toc="default">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled" numbered="true" toc="default">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot" numbered="true" toc="default">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently" numbered="true" toc="default">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
          </section>
        </section>
        <section anchor="location" numbered="true" toc="default">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer" numbered="true" toc="default">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim 
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
        </section>
      </section>
      <section anchor="dloas" numbered="true" toc="default">
        <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
        <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
        <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
        <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
          <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
          <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
          <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
          <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
        </section>
        <section anchor="swevidence" numbered="true" toc="default">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
          <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
        </section>
        <section anchor="swresults" numbered="true" toc="default">
          <name>The SW Measurement Results Claim (swresults)</name>
          <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
          <t>For each software objective, the following can be reported. TODO: defined objective</t>
          <section anchor="scheme" numbered="true" toc="default">
            <name>Scheme</name>
            <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
          </section>
          <section anchor="objective" numbered="true" toc="default">
            <name>Objective</name>
            <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
            <dl>
              <dt>
1 -- all:  </dt>
              <dd>
                <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
              </dd>
              <dt>
2 -- firmware:  </dt>
              <dd>
                <t>Indicates all of and only the firmware</t>
              </dd>
              <dt>
3 -- kernel:  </dt>
              <dd>
                <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
              </dd>
              <dt>
4 -- privileged:  </dt>
              <dd>
                <t>Refers to all of the software used by the root, system or administrative account</t>
              </dd>
              <dt>
5 -- system-libs:  </dt>
              <dd>
                <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
              </dd>
              <dt>
6 -- partial:  </dt>
              <dd>
                <t>Some other partial set of the software</t>
              </dd>
            </dl>
          </section>
          <section anchor="results" numbered="true" toc="default">
            <name>Results</name>
            <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
            <dl>
              <dt>
1 -- verification-not-run:  </dt>
              <dd>
                <t>Indicates that no attempt was made to run the verification</t>
              </dd>
              <dt>
2 -- verification-indeterminite:  </dt>
              <dd>
                <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
              </dd>
              <dt>
3 -- verification-failed:  </dt>
              <dd>
                <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
              </dd>
              <dt>
4 -- fully-verified:  </dt>
              <dd>
                <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
              </dd>
              <dt>
5 -- partially-verified:  </dt>
              <dd>
                <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
              </dd>
            </dl>
          </section>
          <section anchor="objective-name" numbered="true" toc="default">
            <name>Objective Name</name>
            <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
          </section>
        </section>
        <section anchor="submods" numbered="true" toc="default">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types" numbered="true" toc="default">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <section anchor="submodule-claims-set" numbered="true" toc="default">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="nested-token" numbered="true" toc="default">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
              <t>The following two sections describe how to encode and decode a nested token.</t>
              <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string.
The text string MUST contain a JSON-encoded array of two items.
The first item is a string identifying the type of the token.
The second item is the JSON-encoded token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>
"JWT":  </dt>
                  <dd>
                    <t>The second item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                  </dd>
                  <dt>
"UJCS":  </dt>
                  <dd>
                    <t>The second item MUST be a UJCS-Message as defined in this document.</t>
                  </dd>
                  <dt>
"DEB":  </dt>
                  <dd>
                    <t>The second item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>The definition of additional types requires a standards action.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two in the same format as described in the section above.</t>
                <t>A CBOR-encoded token nested inside a JSON-encoded MUST use the same array of two, but with the type as follows:</t>
                <dl>
                  <dt>
"CBOR":  </dt>
                  <dd>
                    <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                  </dd>
                </dl>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest" numbered="true" toc="default">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
            </section>
          </section>
          <section anchor="no-inheritance" numbered="true" toc="default">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels" numbered="true" toc="default">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names" numbered="true" toc="default">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
          <section anchor="cddl-for-submods" numbered="true" toc="default">
            <name>CDDL for submods</name>
            <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
            <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token" numbered="true" toc="default">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they must never be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat" numbered="true" toc="default">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim" numbered="true" toc="default">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>
1 -- Generic:  </dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>
2-- Registration:  </dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>
3 -- Provisioning:  </dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>
4 -- Certificate Issuance  </dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>
5 -- Proof-of-Possession:  </dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (odometer-label => uint)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 256
sueids-label = 257
oemid-label = 258
hardware-model-label = 259
hardware-version-label = 260
secure-boot-label = 262
debug-status-label = 263
location-label = 264
profile-label = 265
submods-label = 266


security-level-label = <TBD>
uptime-label = <TBD>
boot-seed-label = <TB>
odometer-label = <TBD>
intended-use-label = <TBD>
dloas-label = <TBD>
sw-name-label = <TBD>
sw-version-label = <TBD>
manifests-label = <TBD>
swevidence-label = <TBD>
swresults-label = <TBD>


]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

nonce-label /= "nonce"

ueid-label /= "ueid"
sueids-label /= "sueids"
oemid-label /= "oemid"
hardware-model-label /= "hwmodel"
hardware-version-label /= "hwversion"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
profile-label /= "eat-profile"
uptime-label /= "uptime"
boot-seed-label /= "bootseed"
odometer-label /= "odometer"
intended-use-label /= "intuse"
dloas-label /= "dloas"
sw-name-label /= "swname"
sw-version-label /= "swversion"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
swresults-label /= "swresults"
submods-label /= "submods"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="replayprivacyconsiderations" numbered="true" toc="default">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-15.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="February" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-15"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 3, / secure restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e190100500198
    f50a4ff6c05861c8860d13a638ea19010219faf2
    19010504190106f5190107031901048263332e31
    0119010aa163544545822f5820e5cf95fd24fab7
    1446742dd58d43dae178e55fe2b94291a9291082
    ffc2635a0b',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106f519
                 01070219011181585dda53574944a60064336132
                 340c01016b41636d6520544545204f530d65332e
                 312e340282a2181f6b41636d6520544545204f53
                 182101a2181f6b41636d6520544545204f531821
                 0206a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 4, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 3, / secure-restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIANIITmIAA+y9aXPbWJYg+h2/AqHseGlVkZQlee/J7lFKyixlextLbve8
iooMiAQplEmADYCSOR73b5+z33MBUFZ1zUS8eDHVHWkRuLjruWdfxuNx0rRZ
Ofs9W1Zl/ipt602eFOua/mrao8ePXz4+SqZZ+ypt2lmSzKppma2g4azO5u24
yNv5uM7aZpxn7XiZtXnTJsnd4lX64eTqMv1U1Z+LcpH+WlebdfJDOq3KJi+b
TfMq/XGbNz/Co2ZzvSqapqjKdruGfi/Or35J1sWrJE3baqrt6McsX7c38OQJ
/m6quq3zeRNaNNtV/GBardbZtHUtNtfhWVnho3o+zWdNu13m2qwtWvxxdZOn
5yX82KYnLS4ra2GO6VX1OS/TR+cnV/tJdn1d57evUviRZHWeweTLNq/LvE0+
38F+FYsSF5+5z6fXVQ2LnsFGvUqPHh8ejw8fJ9mmvanqV8k4LUqY/utJ+npT
zq6X2SyHGfJ2v842dV5O8+hVVcNGX+bTTY3ThBlX9TZ9/foUXuWrrFi+SpeL
5X9tpEFL7yewAzrSr5P0DZz9NlvZOL8WdTG7yWr3gkb5b5tsCV+u0qt8elNW
y2pR5A2sdzrBfYWTyGFPnz5//jR9U9X5TbVp8vSsLm5xmlMYHOaZlelZkS8q
3PV8AbvxKj3NlsW8qssio+PalG0NLT9ensDP9Q0B5N4fD9MXT1+kz54eps8B
HPfC4lY8xf/6720x+XeZn1/eb5P03Y9nVVktbjZhJ3/L63y1jd88fIlHz1+m
v2R1CedYbRY36Ycqm9kS3Qtazww39OPhk/T568togWXR5rP0XwA6ZtUqrPWP
T56kh0dPj9LjZ8eHL16Glf61mtFk+0tNyqpeAWzd5nhjPvxyenR4+FL+fH74
1P58evg0/PlM/nzx8olr8Dz8aU9fPH6sbQ+P7LPD50/0z+OXR/rns0Nr+/yJ
dnb88kX47Km2fQlYBf/E/8E/n369fPGEf7dZvcB93rtp23Xz6uAgz+r2ZlyU
82pSLrLJqlgerG/WB7PqrlzC3k/gxz/Pi2X+07Sq6tn4btG8eLLHXfFF/vTu
w+uz9Nfzd2fnVxen6eV/v7w6f5MevnzxZJS+/fVkcnn19mzy+PHxs98PJ48n
j3+nyVAHei/x7zHDyFu6xtky/TWvmjX8yJZjvPTLZbGg63mC/2zTR9DzPn1o
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
tsEobtBZeNnOugvia6L/C60R6DZqSwIA

-->

</rfc>
